/**
 * File: ProfileGUI.java
 * Desc: Sends input to ProfileController and handles all the GUI related events
 *
 * Author: Pat Ripley
 */
package webradio;

// imports
import java.awt.Color;
import java.awt.event.KeyEvent;
import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class ProfileGUI extends javax.swing.JFrame implements Util {

    /**
     * Minor inner class used to create the list on the right side of the panel
     */
    // <editor-fold defaultstate="collapsed" desc="ListElement">
    public class ListElement {

        String fName, lName, id;

        public ListElement(String fName, String lName, String id) {
            this.fName = fName;
            this.lName = lName;
            this.id = id;
        }

        @Override
        public String toString() {
            return lName + ", " + fName;
        }
    }
    // </editor-fold>

    /**
     * Minor inner class used to limit th amount of text in a text field
     * Mainly for the phone fields
     */
    // <editor-fold defaultstate="collapsed" desc="JTextFieldLimit">
    class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        JTextFieldLimit(int limit, boolean upper) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }
    // </editor-fold>

    // global constants
    public static final int DJ = 0;
    public static final int MEMBER = 1;
    public static final int PROSPECT = 2;
    public static final int ADVISOR = 3;

    public static final int PRESIDENT = 0;
    public static final int VICE_PRESIDENT = 1;
    public static final int TREASURER = 2;
    public static final int SM_MANAGER = 3;
    public static final int SECRETARY = 4;
    public static final int TECH_OFFICER = 5;
    public static final int PREZ_TECH = 6;
    public static final int VP_SECRETARY = 7;

    private static final int ADD = 0;
    private static final int REMOVE = 1;

    // globals
    DefaultListModel<ListElement> people = new DefaultListModel<>();
    ListElement[] elements;
    Profile temp;

    /**
     * Creates new form ProfileGUI
     */
    public ProfileGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        sfNameField = new javax.swing.JTextField();
        slNameField = new javax.swing.JTextField();
        snum800Field = new javax.swing.JTextField();
        ssiueEmailField = new javax.swing.JTextField();
        sprefEmailField = new javax.swing.JTextField();
        stypeBox = new javax.swing.JComboBox<>();
        spositionBox = new javax.swing.JComboBox<>();
        stypeField = new javax.swing.JTextField();
        spositionField = new javax.swing.JTextField();
        sscrollPane = new javax.swing.JScrollPane();
        snotesField = new javax.swing.JTextArea();
        submitButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        sphoneField1 = new javax.swing.JTextField();
        sphoneField2 = new javax.swing.JTextField();
        sphoneField3 = new javax.swing.JTextField();
        addPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        afNameField = new javax.swing.JTextField();
        alNameField = new javax.swing.JTextField();
        anum800Field = new javax.swing.JTextField();
        aphoneField1 = new javax.swing.JTextField();
        aphoneField2 = new javax.swing.JTextField();
        aphoneField3 = new javax.swing.JTextField();
        asiueEmailField = new javax.swing.JTextField();
        aprefEmailField = new javax.swing.JTextField();
        atypeField = new javax.swing.JTextField();
        atypeBox = new javax.swing.JComboBox<>();
        apositionField = new javax.swing.JTextField();
        apositionBox = new javax.swing.JComboBox<>();
        ascrollPane = new javax.swing.JScrollPane();
        anotesField = new javax.swing.JTextArea();
        addButton = new javax.swing.JButton();
        errLabel = new javax.swing.JLabel();
        sp = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        jLabel19 = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        closeItem = new javax.swing.JMenuItem();
        logoutItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        bugItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("W.R.A.P. - Profiles");
        setIconImage(new ImageIcon("src\\images\\imageicon.png").getImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tabs.setName("tabPane"); // NOI18N

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("First Name:");
        jLabel10.setFocusable(false);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel11.setText("Last Name:");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("800 Number:");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("SIUe Email:");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("Pref. Email:");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel15.setText("Phone:");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel16.setText("Type:");
        jLabel16.setFocusable(false);

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Position:");
        jLabel17.setFocusable(false);

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel18.setText("Notes:");

        sfNameField.setEditable(false);
        sfNameField.setFocusCycleRoot(true);
        sfNameField.setNextFocusableComponent(slNameField);
        sfNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sfNameFieldFocusGained(evt);
            }
        });
        sfNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sfNameFieldKeyPressed(evt);
            }
        });

        slNameField.setEditable(false);
        slNameField.setNextFocusableComponent(snum800Field);
        slNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                slNameFieldFocusGained(evt);
            }
        });
        slNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                slNameFieldKeyPressed(evt);
            }
        });

        snum800Field.setEditable(false);
        snum800Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                snum800FieldFocusGained(evt);
            }
        });
        snum800Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                snum800FieldKeyPressed(evt);
            }
        });

        ssiueEmailField.setEditable(false);
        ssiueEmailField.setNextFocusableComponent(sprefEmailField);
        ssiueEmailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ssiueEmailFieldFocusGained(evt);
            }
        });
        ssiueEmailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ssiueEmailFieldKeyPressed(evt);
            }
        });

        sprefEmailField.setEditable(false);
        sprefEmailField.setNextFocusableComponent(stypeBox);
        sprefEmailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sprefEmailFieldFocusGained(evt);
            }
        });
        sprefEmailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sprefEmailFieldKeyPressed(evt);
            }
        });

        stypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DJ", "Member", "Prospect", "Advisor", "--" }));
        stypeBox.setSelectedIndex(4);
        stypeBox.setEnabled(false);
        stypeBox.setNextFocusableComponent(spositionBox);
        stypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stypeBoxActionPerformed(evt);
            }
        });
        stypeBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stypeBoxKeyPressed(evt);
            }
        });

        spositionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "President", "Vice President", "Treasurer", "SM Manager", "Secretary", "Tech Officer", "President/Tech", "VP/Secretary", "None", "--" }));
        spositionBox.setSelectedIndex(9);
        spositionBox.setEnabled(false);
        spositionBox.setNextFocusableComponent(snotesField);
        spositionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spositionBoxActionPerformed(evt);
            }
        });
        spositionBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                spositionBoxKeyPressed(evt);
            }
        });

        stypeField.setEditable(false);
        stypeField.setFocusable(false);

        spositionField.setEditable(false);
        spositionField.setFocusable(false);

        sscrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sscrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        snotesField.setEditable(false);
        snotesField.setBackground(new java.awt.Color(240, 240, 240));
        snotesField.setColumns(20);
        snotesField.setLineWrap(true);
        snotesField.setRows(5);
        snotesField.setBorder(null);
        snotesField.setNextFocusableComponent(sfNameField);
        snotesField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                snotesFieldFocusGained(evt);
            }
        });
        snotesField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                snotesFieldKeyPressed(evt);
            }
        });
        sscrollPane.setViewportView(snotesField);

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.setMaximumSize(new java.awt.Dimension(65, 23));
        editButton.setMinimumSize(new java.awt.Dimension(65, 23));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        sphoneField1.setEditable(false);
        sphoneField1.setNextFocusableComponent(asiueEmailField);
        aphoneField1.setDocument(new JTextFieldLimit(3));
        sphoneField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sphoneField1FocusGained(evt);
            }
        });
        sphoneField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sphoneField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sphoneField1KeyReleased(evt);
            }
        });

        sphoneField2.setEditable(false);
        sphoneField2.setNextFocusableComponent(asiueEmailField);
        aphoneField2.setDocument(new JTextFieldLimit(3));
        sphoneField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sphoneField2FocusGained(evt);
            }
        });
        sphoneField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sphoneField2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sphoneField2KeyReleased(evt);
            }
        });

        sphoneField3.setEditable(false);
        sphoneField3.setNextFocusableComponent(asiueEmailField);
        aphoneField3.setDocument(new JTextFieldLimit(4));
        sphoneField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sphoneField3FocusGained(evt);
            }
        });
        sphoneField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sphoneField3KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGap(0, 36, Short.MAX_VALUE)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(sscrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(spositionBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, 158, Short.MAX_VALUE)
                                .addComponent(spositionField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(stypeBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stypeField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sprefEmailField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(ssiueEmailField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(snum800Field, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(slNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(sfNameField))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                                .addComponent(sphoneField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sphoneField2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sphoneField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(sfNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(slNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(snum800Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sphoneField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sphoneField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sphoneField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ssiueEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(sprefEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(stypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spositionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spositionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(sscrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(submitButton)
                            .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteButton)))
                    .addComponent(jLabel18))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tabs.addTab("Search", searchPanel);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("First Name:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Last Name:");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("800 Number:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("SIUe Email:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Pref. Email:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Phone:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Type:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Position:");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Notes:");

        afNameField.setNextFocusableComponent(alNameField);
        afNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                afNameFieldFocusGained(evt);
            }
        });
        afNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                afNameFieldKeyPressed(evt);
            }
        });

        alNameField.setNextFocusableComponent(anum800Field);
        alNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                alNameFieldFocusGained(evt);
            }
        });
        alNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                alNameFieldKeyPressed(evt);
            }
        });

        anum800Field.setNextFocusableComponent(aphoneField1);
        anum800Field.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                anum800FieldFocusGained(evt);
            }
        });
        anum800Field.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                anum800FieldKeyPressed(evt);
            }
        });

        aphoneField1.setNextFocusableComponent(asiueEmailField);
        aphoneField1.setDocument(new JTextFieldLimit(3));
        aphoneField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aphoneField1FocusGained(evt);
            }
        });
        aphoneField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aphoneField1KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aphoneField1KeyReleased(evt);
            }
        });

        aphoneField2.setNextFocusableComponent(asiueEmailField);
        aphoneField2.setDocument(new JTextFieldLimit(3));
        aphoneField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aphoneField2FocusGained(evt);
            }
        });
        aphoneField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aphoneField2KeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aphoneField2KeyReleased(evt);
            }
        });

        aphoneField3.setNextFocusableComponent(asiueEmailField);
        aphoneField3.setDocument(new JTextFieldLimit(4));
        aphoneField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aphoneField3FocusGained(evt);
            }
        });
        aphoneField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aphoneField3KeyPressed(evt);
            }
        });

        asiueEmailField.setNextFocusableComponent(aprefEmailField);
        asiueEmailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                asiueEmailFieldFocusGained(evt);
            }
        });
        asiueEmailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                asiueEmailFieldKeyPressed(evt);
            }
        });

        aprefEmailField.setNextFocusableComponent(atypeBox);
        aprefEmailField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aprefEmailFieldFocusGained(evt);
            }
        });
        aprefEmailField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aprefEmailFieldKeyPressed(evt);
            }
        });

        atypeField.setEditable(false);
        atypeField.setBackground(new java.awt.Color(255, 255, 255));

        atypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DJ", "Member", "Prospect", "Advisor", "--" }));
        atypeBox.setSelectedIndex(4);
        atypeBox.setNextFocusableComponent(apositionBox);
        atypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atypeBoxActionPerformed(evt);
            }
        });
        atypeBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                atypeBoxKeyPressed(evt);
            }
        });

        apositionField.setEditable(false);
        apositionField.setBackground(new java.awt.Color(255, 255, 255));

        apositionBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "President", "Vice President", "Treasurer", "SM Manager", "Secretary", "Tech Officer", "President/Tech", "VP/Secretary", "None", "--" }));
        apositionBox.setSelectedIndex(9);
        apositionBox.setNextFocusableComponent(anotesField);
        apositionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apositionBoxActionPerformed(evt);
            }
        });
        apositionBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                apositionBoxKeyPressed(evt);
            }
        });

        ascrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        ascrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        anotesField.setColumns(20);
        anotesField.setLineWrap(true);
        anotesField.setRows(5);
        anotesField.setNextFocusableComponent(afNameField);
        anotesField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                anotesFieldFocusGained(evt);
            }
        });
        anotesField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                anotesFieldKeyPressed(evt);
            }
        });
        ascrollPane.setViewportView(anotesField);

        addButton.setText("Add");
        addButton.setNextFocusableComponent(afNameField);
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(anum800Field)
                            .addComponent(asiueEmailField)
                            .addComponent(aprefEmailField)
                            .addComponent(atypeField)
                            .addComponent(alNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(afNameField)
                            .addGroup(addPanelLayout.createSequentialGroup()
                                .addComponent(aphoneField1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aphoneField2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(aphoneField3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(apositionBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(apositionField, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ascrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                    .addComponent(atypeBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(addButton)))))
                .addGap(10, 10, 10))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(afNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(alNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(anum800Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aphoneField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(aphoneField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aphoneField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(asiueEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(aprefEmailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(atypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(atypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(apositionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(apositionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ascrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(addButton)
                .addContainerGap())
        );

        tabs.addTab("Add", addPanel);

        errLabel.setText(" ");

        list.setModel(FillList());
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        sp.setViewportView(list);

        file.setText("File");

        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        file.add(closeItem);

        logoutItem.setText("Logout");
        logoutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutItemActionPerformed(evt);
            }
        });
        file.add(logoutItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        file.add(exitItem);

        menubar.add(file);

        help.setText("Help");

        bugItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bug_PNG3980.png"))); // NOI18N
        bugItem.setText("Report a bug");
        bugItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugItemActionPerformed(evt);
            }
        });
        help.add(bugItem);

        menubar.add(help);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(errLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sp, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabs))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sp)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Literally all event related methods
     * Includes:
     *
     * Add, Submit, and Edit : calls outside methods
     * FormWindow events : closing, opening
     * ListClicked : searches for element that was clicked
     * KeyPressed : if enter was pressed, do a thing
     * MenuBar things : things in the menu bar (exit, close, logout, help, bug, etc)
     * ComboBox things : changes the fields when the combobox is changed
     * GainFocus : selects all text in the field when field gains focus
     * EnterKeyPressed : clicks a button when enter is pressed
     */
    // <editor-fold defaultstate="collapsed" desc="Literally all event-related methods"> 
    /**
     * Handles when the window is closed
     * When the window is closed, call Main.closeProfileGUI()
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Main.CloseProfileGUI();
    }//GEN-LAST:event_formWindowClosed

    /**
     * Handles when the graphical list is clicked on
     * Basically just searches for the element that was clicked on
     */
    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if (!people.isEmpty()) {
            // graphics update
            submitButton.setEnabled(false);
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);
            setSearchFieldsEditable(false);

            // search for the profile
            Search(people.elementAt(list.getSelectedIndex()).id);

            // if search tab is not in focus, put it in focus
            tabs.setSelectedIndex(0);
        } else {
            // do nothing
            // it'll crash otherwise
        }

    }//GEN-LAST:event_listMouseClicked

    /**
     * Handles when the EDIT button is pressed
     * Just calls outside method Edit()
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        Edit();
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Handles when the DELETE button is pressed
     * Pops up a confirmation window, then calls Delete() if user wishes
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete "
                + slNameField.getText() + ", "
                + sfNameField.getText() + "?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        // do a thing based on response
        switch (res) {
            case 0:
                Delete();
                break;
            default:
            // do nothing
        }

    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Handles when the SUBMIT button is pressed
     * Checks to see if all the modified elements are okay, calls Submit() if they are
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (sCheck()) {
            Submit();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Handles when the ADD button is pressed
     * Checks to see if all of the elements are kosher, then calls Add() if they are
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (aCheck()) {
            Add();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Handles if the comboBox index is changed (Type for search)
     * Changes the field to match the changed index
     */
    private void stypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stypeBoxActionPerformed
        switch (stypeBox.getSelectedIndex()) {
            case 0:
                stypeField.setText("DJ");
                break;
            case 1:
                stypeField.setText("Member");
                break;
            case 2:
                stypeField.setText("Prospect");
                break;
            case 3:
                stypeField.setText("Advisor");
                break;
            case 4:
                stypeField.setText("");
                break;
        }
    }//GEN-LAST:event_stypeBoxActionPerformed

    /**
     * Handles if the comboBox index is changed (position for search)
     * Changes the field to match the changed index
     */
    private void spositionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spositionBoxActionPerformed
        switch (spositionBox.getSelectedIndex()) {
            case 0:
                spositionField.setText("President");
                break;
            case 1:
                spositionField.setText("Vice President");
                break;
            case 2:
                spositionField.setText("Treasurer");
                break;
            case 3:
                spositionField.setText("Social Media Manager");
                break;
            case 4:
                spositionField.setText("Secretary");
                break;
            case 5:
                spositionField.setText("Tech Officer");
                break;
            case 6:
                spositionField.setText("President/Tech");
                break;
            case 7:
                spositionField.setText("VP/Secretary");
                break;
            case 8:
                spositionField.setText("None");
                break;
            case 9:
                spositionField.setText("");
                break;
        }
    }//GEN-LAST:event_spositionBoxActionPerformed

    /**
     * Handles if the comboBox index is changed (Type for add)
     * Changes the field to match the changed index
     */
    private void atypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atypeBoxActionPerformed
        switch (atypeBox.getSelectedIndex()) {
            case 0:
                atypeField.setText("DJ");
                break;
            case 1:
                atypeField.setText("Member");
                break;
            case 2:
                atypeField.setText("Prospect");
                break;
            case 3:
                atypeField.setText("Advisor");
                break;
            case 4:
                atypeField.setText("");
                break;
        }
    }//GEN-LAST:event_atypeBoxActionPerformed

    /**
     * Handles if the comboBox index is changed (Position for add)
     * Changes the field to match the changed index
     */
    private void apositionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apositionBoxActionPerformed
        switch (apositionBox.getSelectedIndex()) {
            case 0:
                apositionField.setText("President");
                break;
            case 1:
                apositionField.setText("Vice President");
                break;
            case 2:
                apositionField.setText("Treasurer");
                break;
            case 3:
                apositionField.setText("Social Media Manager");
                break;
            case 4:
                apositionField.setText("Secretary");
                break;
            case 5:
                apositionField.setText("Tech Officer");
                break;
            case 6:
                apositionField.setText("President/Tech");
                break;
            case 7:
                apositionField.setText("VP/Secretary");
                break;
            case 8:
                apositionField.setText("None");
                break;
            case 9:
                apositionField.setText("");
                break;
        }
    }//GEN-LAST:event_apositionBoxActionPerformed

    /**
     * Handles if user selects bug option in the menu bar
     * Calls Main.LaunchBugReportGUI()
     */
    private void bugItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugItemActionPerformed
        Main.LaunchBugReportGUI();
    }//GEN-LAST:event_bugItemActionPerformed

    /**
     * Handles if user selects close current window option in the menu bar
     * Calls Main.CloseProfileGUI()
     */
    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        Main.CloseProfileGUI();
    }//GEN-LAST:event_closeItemActionPerformed

    /**
     * Handles if user selects logout option in the menu bar
     * Calls Main.Logout(), setting the user to null, as well as
     * Main.CloseAccountGUI()
     */
    private void logoutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutItemActionPerformed
        Main.Logout();
        Main.CloseProfileGUI();
    }//GEN-LAST:event_logoutItemActionPerformed

    /**
     * Handles if user selects exit option in the menu bar
     * Pops up a confirmation window, then exits the program if user wishes
     */
    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit WRAP?",
                "",
                JOptionPane.YES_NO_OPTION);

        // do a thing based on response
        switch (res) {
            case 0:
                System.exit(0);
                break;
            default:
            // do nothing
        }
    }//GEN-LAST:event_exitItemActionPerformed

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void afNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_afNameFieldFocusGained
        afNameField.selectAll();
    }//GEN-LAST:event_afNameFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void alNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_alNameFieldFocusGained
        alNameField.selectAll();
    }//GEN-LAST:event_alNameFieldFocusGained

    /**
     * Handles if the first part of the phone (area code) is 3 characters long
     * Shifts focus to the next phone field
     *
     * @param evt
     */
    private void aphoneField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aphoneField1KeyReleased
        if (aphoneField1.getText().length() == 3) {
            aphoneField2.requestFocus();
        }
    }//GEN-LAST:event_aphoneField1KeyReleased

    /**
     * Handles if the middle part of the phone is 3 characters long
     * Shifts focus to the next phone field
     *
     * @param evt
     */
    private void aphoneField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aphoneField2KeyReleased
        if (aphoneField2.getText().length() == 3) {
            aphoneField3.requestFocus();
        }
    }//GEN-LAST:event_aphoneField2KeyReleased

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void anum800FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anum800FieldFocusGained
        anum800Field.selectAll();
    }//GEN-LAST:event_anum800FieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aphoneField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aphoneField1FocusGained
        aphoneField1.selectAll();
    }//GEN-LAST:event_aphoneField1FocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aphoneField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aphoneField2FocusGained
        aphoneField2.selectAll();
    }//GEN-LAST:event_aphoneField2FocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aphoneField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aphoneField3FocusGained
        aphoneField3.selectAll();
    }//GEN-LAST:event_aphoneField3FocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void asiueEmailFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_asiueEmailFieldFocusGained
        asiueEmailField.selectAll();
    }//GEN-LAST:event_asiueEmailFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aprefEmailFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aprefEmailFieldFocusGained
        aprefEmailField.selectAll();
    }//GEN-LAST:event_aprefEmailFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void anotesFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_anotesFieldFocusGained
        anotesField.selectAll();
    }//GEN-LAST:event_anotesFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sphoneField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sphoneField1FocusGained
        sphoneField1.selectAll();
    }//GEN-LAST:event_sphoneField1FocusGained

    /**
     * Handles if the first part of the phone (area code) is 3 characters long
     * Shifts focus to the next phone field
     *
     * @param evt
     */
    private void sphoneField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sphoneField1KeyReleased
        if (sphoneField1.getText().length() == 3) {
            sphoneField2.requestFocus();
        }
    }//GEN-LAST:event_sphoneField1KeyReleased

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sphoneField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sphoneField2FocusGained
        sphoneField2.selectAll();
    }//GEN-LAST:event_sphoneField2FocusGained

    /**
     * Handles if the middle part of the phone is 3 characters long
     * Shifts focus to the next phone field
     *
     * @param evt
     */
    private void sphoneField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sphoneField2KeyReleased
        if (sphoneField2.getText().length() == 3) {
            sphoneField3.requestFocus();
        }
    }//GEN-LAST:event_sphoneField2KeyReleased

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sphoneField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sphoneField3FocusGained
        sphoneField3.selectAll();
    }//GEN-LAST:event_sphoneField3FocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sfNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sfNameFieldFocusGained
        sfNameField.selectAll();
    }//GEN-LAST:event_sfNameFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void slNameFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_slNameFieldFocusGained
        slNameField.selectAll();
    }//GEN-LAST:event_slNameFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void snum800FieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_snum800FieldFocusGained
        snum800Field.selectAll();
    }//GEN-LAST:event_snum800FieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void ssiueEmailFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ssiueEmailFieldFocusGained
        ssiueEmailField.selectAll();
    }//GEN-LAST:event_ssiueEmailFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sprefEmailFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sprefEmailFieldFocusGained
        sprefEmailField.selectAll();
    }//GEN-LAST:event_sprefEmailFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void snotesFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_snotesFieldFocusGained
        snotesField.selectAll();
    }//GEN-LAST:event_snotesFieldFocusGained

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void afNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_afNameFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_afNameFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void alNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_alNameFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_alNameFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void anum800FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anum800FieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_anum800FieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void aphoneField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aphoneField1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aphoneField1KeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void aphoneField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aphoneField2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aphoneField2KeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void aphoneField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aphoneField3KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aphoneField3KeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void asiueEmailFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_asiueEmailFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_asiueEmailFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void aprefEmailFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aprefEmailFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aprefEmailFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void anotesFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_anotesFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_anotesFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void atypeBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_atypeBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_atypeBoxKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the ADD button
     *
     * @param evt
     */
    private void apositionBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apositionBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_apositionBoxKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void sfNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sfNameFieldKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_sfNameFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void slNameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_slNameFieldKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_slNameFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void snum800FieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_snum800FieldKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_snum800FieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void sphoneField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sphoneField1KeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_sphoneField1KeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void sphoneField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sphoneField2KeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_sphoneField2KeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void sphoneField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sphoneField3KeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_sphoneField3KeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void ssiueEmailFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ssiueEmailFieldKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_ssiueEmailFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void sprefEmailFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sprefEmailFieldKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_sprefEmailFieldKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void stypeBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stypeBoxKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_stypeBoxKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void spositionBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_spositionBoxKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_spositionBoxKeyPressed

    /**
     * Handles if Enter is pressed while field is in focus
     * Clicks the SUBMIT button if user is editing Profile
     *
     * @param evt
     */
    private void snotesFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_snotesFieldKeyPressed
        if (submitButton.isEnabled()) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                submitButton.doClick();
            }
        }
    }//GEN-LAST:event_snotesFieldKeyPressed

    // </editor-fold>
    
    /**
     * FillList()
     *
     * Gets all of the Profiles from IOController and shoves them into an array
     * Then it populates the DefaultListModel of ListElements from that array
     *
     * @return the DefaultListModel to populate the JList
     */
    public DefaultListModel FillList() {
        // get total
        int total = IOController.getTotalProfiles();

        // get Profiles (sorted)
        Profile[] str = ProfileController.sort(ProfileController.getAllProfiles());

        // create the array
        elements = new ListElement[total];
        if (str != null) {
            for (int i = 0; i < total; i++) {
                elements[i] = new ListElement(str[i].getfName(),
                        str[i].getlName(),
                        str[i].getId());
                people.add(i, elements[i]);
            }
        }
        return people;
    }

    /**
     * UpdateList()
     *
     * Works with the global list of Profiles, which updates the JList graphics
     *
     * @param action,  the type of action (either add or remove)
     * @param element, the element to add or remove
     */
    public void UpdateList(int action, ListElement element) {
        switch (action) {
            case ADD:         // add
                people.add(people.getSize(), element);
                break;
            case REMOVE:      // remove
                people.remove(list.getSelectedIndex());
                break;
        }
    }

    /**
     * Add()
     *
     * If the fields are all valid, this method is called
     * Takes fields and creates Profile and ListElement objects
     * Then it calls the ProfileController to add the user
     * If the addition succeeds, update the list, and update graphics
     * Else addition fails, means that the username is already taken, update graphics
     */
    public void Add() {

        // get the values from fields
        String[] str = getAddValues();

        // create Profile and ListElement objects
        Profile p = new Profile(str[0], str[1], str[2], str[3], str[4], str[5], Integer.valueOf(str[6]), Integer.valueOf(str[7]), str[8],
                Util.toBool(str[9]), Util.toBool(str[10]), Util.toBool(str[11]), Util.toBool(str[12]));
        ListElement element = new ListElement(str[0], str[1], str[2]);

        // if the addition succeeds
        if (ProfileController.AddProfile(p)) {
            // update graphics
            errLabel.setForeground(Color.blue);
            errLabel.setText("Profile added successfully");

            UpdateList(ADD, element);

            setAddValuesToNull();
            afNameField.requestFocus();
            
            // else if addition fails
        } else {
            errLabel.setForeground(Color.red);
            errLabel.setText("Duplicate 800 number");
        }
    }

    /**
     * Search()
     *
     * Calls the SearchUser method from ProfileController, which returns a valid Profile 
     * Update the graphics with the Profile info
     *
     * @param id, the id to search
     */
    public void Search(String id) {

        // get the Profile
        Profile p = ProfileController.SearchProfile(id);
        
        // update graphics
        errLabel.setText(" ");
        editButton.setEnabled(true);
        deleteButton.setEnabled(true);
        setSearchFieldsToValid();

        // create the phone
        String[] str = getPhone(p.getPhone());

        // update fields with Profile info
        sfNameField.setText(p.getfName());
        slNameField.setText(p.getlName());
        snum800Field.setText(p.getId());
        sphoneField1.setText(str[0]);
        sphoneField2.setText(str[1]);
        sphoneField3.setText(str[2]);
        ssiueEmailField.setText(p.getSiueEmail());
        sprefEmailField.setText(p.getPrefEmail());
        stypeBox.setSelectedIndex(p.getType());
        spositionBox.setSelectedIndex(p.getPosition());
        snotesField.setText(p.getNotes());
    }

    /**
     * Delete()
     *
     * Creates an Profile with the fields given
     * Then call DeleteUser() from ProfileController
     * If success, confirm on errLabel
     */
    public void Delete() {
        
        // get necessary fields
        String fName, lName, id;
        fName = sfNameField.getText();
        lName = slNameField.getText();
        id = snum800Field.getText();

        // if deletion succeeds
        if (ProfileController.DeleteProfile(id)) {
            
            // create ListElement
            ListElement element = new ListElement(fName, lName, id);
            
            // update graphics
            UpdateList(REMOVE, element);
            errLabel.setForeground(Color.blue);
            errLabel.setText("User deleted successfully");
            setSearchValuesToNull();
            setSearchFieldsEditable(false);
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            submitButton.setEnabled(false);
        }
    }

    /**
     * Edit()
     *
     * Basically just sets the fields to editable 
     * Stores a temporary global Profile, used in the editing process in Submit()
     */
    public void Edit() {

        // create the temp Profile
        String[] str = getSearchValues();
        temp = new Profile(str[0], str[1], str[2], str[3], str[4], str[5], Integer.valueOf(str[6]), Integer.valueOf(str[7]), str[8],
                Util.toBool(str[9]), Util.toBool(str[10]), Util.toBool(str[11]), Util.toBool(str[12]));

        // update graphics
        setSearchFieldsEditable(true);
        submitButton.setEnabled(true);
        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
    }

    /**
     * Submit()
     *
     * Takes the new input as parameters for a new Profile object
     * Then it deletes the old account, then adds the new one (in that order)
     * If success, update the graphics
     * If failure, return and update graphics
     */
    public void Submit() {

        // update graphics
        setSearchFieldsEditable(false);
        errLabel.setForeground(Color.blue);
        errLabel.setText("User edited successfully");

        // create new Profile object
        String[] str = getSearchValues();
        Profile p = new Profile(str[0], str[1], str[2], str[3], str[4], str[5], Integer.valueOf(str[6]), Integer.valueOf(str[7]), str[8],
                Util.toBool(str[9]), Util.toBool(str[10]), Util.toBool(str[11]), Util.toBool(str[12]));

        // delete then add
        ProfileController.DeleteProfile(temp.getId());
        ProfileController.AddProfile(p);

        // create ListElements
        ListElement t = new ListElement(temp.getfName(),
                temp.getlName(),
                temp.getId());
        ListElement q = new ListElement(p.getfName(),
                p.getlName(),
                p.getId());

        // update graphics
        UpdateList(REMOVE, t);
        UpdateList(ADD, q);
        submitButton.setEnabled(false);
        editButton.setEnabled(false);
        deleteButton.setEnabled(false);
        
        // reset the form, selecting the new Profile just edited
        list.setSelectedIndex(list.getLastVisibleIndex());
        Search(people.getElementAt(people.getSize() - 1).id);
    }

    /**
     * setSearchValuesToNull()
     * 
     * Graphics update
     * Resets the search panel with null values
     */
    public void setSearchValuesToNull() {
        sfNameField.setText("");
        slNameField.setText("");
        snum800Field.setText("");
        sphoneField1.setText("");
        sphoneField2.setText("");
        sphoneField3.setText("");
        ssiueEmailField.setText("");
        sprefEmailField.setText("");
        stypeField.setText("");
        spositionField.setText("");
        stypeBox.setSelectedIndex(4);
        spositionBox.setSelectedIndex(9);
        snotesField.setText("");
    }

    /**
     * setAddValuesToNull()
     * 
     * Graphics update
     * Resets the add panel with null values
     */
    public void setAddValuesToNull() {
        afNameField.setText("");
        alNameField.setText("");
        anum800Field.setText("");
        aphoneField1.setText("");
        aphoneField2.setText("");
        aphoneField3.setText("");
        asiueEmailField.setText("");
        aprefEmailField.setText("");
        atypeBox.setSelectedIndex(4);
        apositionBox.setSelectedIndex(9);
        anotesField.setText("");
    }

    /**
     * setSearchFieldsToValid()
     * 
     * Graphics update
     * Sets the search panel to accept valid values
     */
    public void setSearchFieldsToValid() {
        sfNameField.setBackground(Color.white);
        slNameField.setBackground(Color.white);
        snum800Field.setBackground(Color.white);
        sphoneField1.setBackground(Color.white);
        sphoneField2.setBackground(Color.white);
        sphoneField3.setBackground(Color.white);
        ssiueEmailField.setBackground(Color.white);
        sprefEmailField.setBackground(Color.white);
        stypeBox.setSelectedIndex(4);
        spositionBox.setSelectedIndex(9);
        stypeField.setBackground(Color.white);
        spositionField.setBackground(Color.white);
        snotesField.setBackground(Color.white);
    }

    /**
     * setSearchFieldsEditable()
     * 
     * Graphics update
     * Sets the search fields editable based on boolean parameter
     * 
     * @param b, the conditional to change the editability of the fields 
     */
    public void setSearchFieldsEditable(boolean b) {
        sfNameField.setEditable(b);
        slNameField.setEditable(b);
        snum800Field.setEditable(b);
        sphoneField1.setEditable(b);
        sphoneField2.setEditable(b);
        sphoneField3.setEditable(b);
        ssiueEmailField.setEditable(b);
        sprefEmailField.setEditable(b);
        stypeBox.setEnabled(b);
        spositionBox.setEnabled(b);
        snotesField.setEditable(b);
        if (!b) {
            stypeBox.setSelectedIndex(4);
            spositionBox.setSelectedIndex(9);
        }

        if (!b) {
            sfNameField.setBackground(new Color(240, 240, 240));
            slNameField.setBackground(new Color(240, 240, 240));
            snum800Field.setBackground(new Color(240, 240, 240));
            sphoneField1.setBackground(new Color(240, 240, 240));
            sphoneField2.setBackground(new Color(240, 240, 240));
            sphoneField3.setBackground(new Color(240, 240, 240));
            ssiueEmailField.setBackground(new Color(240, 240, 240));
            sprefEmailField.setBackground(new Color(240, 240, 240));
            stypeField.setBackground(new Color(240, 240, 240));
            spositionField.setBackground(new Color(240, 240, 240));
            snotesField.setBackground(new Color(240, 240, 240));
        } else {
            sfNameField.setBackground(Color.white);
            slNameField.setBackground(Color.white);
            snum800Field.setBackground(Color.white);
            sphoneField1.setBackground(Color.white);
            sphoneField2.setBackground(Color.white);
            sphoneField3.setBackground(Color.white);
            ssiueEmailField.setBackground(Color.white);
            sprefEmailField.setBackground(Color.white);
            stypeField.setBackground(Color.white);
            spositionField.setBackground(Color.white);
            snotesField.setBackground(Color.white);
        }
    }

    /**
     * getSearchValues()
     * 
     * Reads the values of the search panel to a String array
     * 
     * @return str, the String array with values
     */
    public String[] getSearchValues() {
        String[] str = new String[13];

        str[0] = sfNameField.getText();
        str[1] = slNameField.getText();
        str[2] = snum800Field.getText();
        str[3] = sphoneField1.getText() + sphoneField2.getText() + sphoneField3.getText();
        str[4] = ssiueEmailField.getText();
        str[5] = sprefEmailField.getText();
        str[6] = String.valueOf(stypeBox.getSelectedIndex());
        str[7] = String.valueOf(spositionBox.getSelectedIndex());
        str[8] = snotesField.getText();
        str[9] = "false";
        str[10] = "false";
        str[11] = "false";
        str[12] = "false";

        return str;
    }

    /**
     * getAddValues()
     * 
     * Reads the values of the add panel to a String array
     * 
     * @return str, the String array with values
     */
    public String[] getAddValues() {
        String[] str = new String[13];

        str[0] = afNameField.getText();
        str[1] = alNameField.getText();
        str[2] = anum800Field.getText();
        str[3] = aphoneField1.getText() + aphoneField2.getText() + aphoneField3.getText();
        str[4] = asiueEmailField.getText();
        str[5] = aprefEmailField.getText();
        str[6] = String.valueOf(atypeBox.getSelectedIndex());
        str[7] = String.valueOf(apositionBox.getSelectedIndex());
        str[8] = anotesField.getText();
        str[9] = "false";
        str[10] = "false";
        str[11] = "false";
        str[12] = "false";

        return str;
    }

    /**
     * getPhone()
     * 
     * Gets the values of the three phone text fields and combines them into 
     * one string
     * 
     * @param phone
     * @return the combined string phone
     */
    public String[] getPhone(String phone) {
        
        // create a char array
        String[] str = new String[3];
        char[] p = phone.toCharArray();

        // create the individual strings
        str[0] = "" + p[0] + p[1] + p[2];
        str[1] = "" + p[3] + p[4] + p[5];
        str[2] = "" + p[6] + p[7] + p[8] + p[9];

        return str;
    }

    /**
     * asetAllForeground()
     * 
     * Sets the text color of all fields on add panel
     * 
     * @param c 
     */
    public void asetAllForeground(Color c) {
        afNameField.setForeground(c);
        alNameField.setForeground(c);
        anum800Field.setForeground(c);
        aphoneField1.setForeground(c);
        aphoneField2.setForeground(c);
        aphoneField3.setForeground(c);
        asiueEmailField.setForeground(c);
        aprefEmailField.setForeground(c);
        atypeBox.setForeground(c);
        apositionBox.setForeground(c);
        anotesField.setForeground(c);
    }

    /**
     * ssetAllForeground()
     * 
     * Sets the text color of all fields on search panel
     * 
     * @param c 
     */
    public void ssetAllForeground(Color c) {
        sfNameField.setForeground(c);
        slNameField.setForeground(c);
        snum800Field.setForeground(c);
        sphoneField1.setForeground(c);
        sphoneField2.setForeground(c);
        sphoneField3.setForeground(c);
        ssiueEmailField.setForeground(c);
        sprefEmailField.setForeground(c);
        stypeBox.setForeground(c);
        spositionBox.setForeground(c);
        snotesField.setForeground(c);
    }

    /**
     * aCheck()
     *
     * Checks the add panel and makes sure all the fields are kosher
     * See comments in function for details on each element
     * First, it "resets" by making all fields foregrounds black
     * Then it checks each individual field, and sets the foreground red if the field has an error
     * If it returns a true flag, there is no error
     * It calls the setAddErrLabel to find the individual errors and updates errLabel
     *
     * @return flag, the conditional to show if the fields are valid
     */
    public boolean aCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        asetAllForeground(Color.black);

        // FirstName
        // if it is either nothing or the default, throw error
        // if it contains separator character, throw error
        if (afNameField.getText().equals("") || afNameField.getText().equals("--")) {
            flag = false;
            afNameField.setForeground(Color.red);
            afNameField.setText("--");
        } else if (!Util.sepCheck(afNameField.getText())) {
            flag = false;
            afNameField.setForeground(Color.red);
        }

        // LastName
        // if it is either nothing or the default, throw error
        // if it contains separator character, throw error
        if (alNameField.getText().equals("") || alNameField.getText().equals("--")) {
            flag = false;
            alNameField.setForeground(Color.red);
            alNameField.setText("--");
        } else if (!Util.sepCheck(alNameField.getText())) {
            flag = false;
            alNameField.setForeground(Color.red);
        }

        // 800 number
        // if it is either nothing or the default, throw error
        // if it is not an integer, throw error
        try {
            // check for empty or default
            if (anum800Field.getText().equals("") || anum800Field.getText().equals("--")) {
                flag = false;
                anum800Field.setForeground(Color.red);
                anum800Field.setText("--");
            } else {
                // try to make it an integer
                int num = Integer.parseInt(anum800Field.getText());
            }
        } catch (NumberFormatException e) {
            // if it's not an integer
            flag = false;
            anum800Field.setForeground(Color.red);
        }

        // Phone number
        // if it is either nothing or the default, throw error
        // if it not the correct length of 10, throw error
        // if it not an integer, throw error
        try {
            // check for empty or default
            if ((aphoneField1.getText().equals("") || aphoneField1.getText().equals("--"))
                    && (aphoneField2.getText().equals("") || aphoneField2.getText().equals("--"))
                    && (aphoneField3.getText().equals("") || aphoneField3.getText().equals("--"))) {
                flag = false;
                aphoneField1.setForeground(Color.red);
                aphoneField2.setForeground(Color.red);
                aphoneField3.setForeground(Color.red);
                aphoneField1.setText("--");
                aphoneField2.setText("--");
                aphoneField3.setText("--");

                // check for length
            } else if (aphoneField1.getText().length() != 3
                    || aphoneField2.getText().length() != 3
                    || aphoneField3.getText().length() != 4) {
                flag = false;
                aphoneField1.setForeground(Color.red);
                aphoneField2.setForeground(Color.red);
                aphoneField3.setForeground(Color.red);

                // try to make it an integer
            } else {
                int num1 = Integer.parseInt(aphoneField1.getText());
                int num2 = Integer.parseInt(aphoneField2.getText());
                int num3 = Integer.parseInt(aphoneField3.getText());
            }
        } catch (NumberFormatException e) {
            // if it's not an integer
            flag = false;
            aphoneField1.setForeground(Color.red);
            aphoneField2.setForeground(Color.red);
            aphoneField3.setForeground(Color.red);
        }

        // siue email
        // if it is empty or the default, throw error
        // if it does not contain an @, throw error
        // if it doesn't end with email ending, throw error
        // if it contains separator, throw error
        if (asiueEmailField.getText().equals("") || asiueEmailField.getText().equals("--")) {
            flag = false;
            asiueEmailField.setForeground(Color.red);
            asiueEmailField.setText("--");
        }

        // check for @ 
        if (!asiueEmailField.getText().contains("@")) {
            flag = false;
            asiueEmailField.setForeground(Color.red);

            // check for email ending
        } else if (!(asiueEmailField.getText().endsWith(".com")
                || asiueEmailField.getText().endsWith(".edu")
                || asiueEmailField.getText().endsWith(".org")
                || asiueEmailField.getText().endsWith(".net"))) {
            flag = false;
            asiueEmailField.setForeground(Color.red);

            // check for separator
        } else if (!Util.sepCheck(asiueEmailField.getText())) {
            flag = false;
            asiueEmailField.setForeground(Color.red);
        }

        // preferred email
        // if it is empty or the default, throw error
        // if it does not contain an @, throw error
        // if it doesn't end with email ending, throw error
        if (aprefEmailField.getText().equals("") || aprefEmailField.getText().equals("--")) {
            flag = false;
            aprefEmailField.setForeground(Color.red);
            aprefEmailField.setText("--");

            // check for @
        } else if (!aprefEmailField.getText().contains("@")) {
            flag = false;
            aprefEmailField.setForeground(Color.red);

            // check ending
        } else if (!(aprefEmailField.getText().endsWith(".com")
                || aprefEmailField.getText().endsWith(".edu")
                || aprefEmailField.getText().endsWith(".org")
                || aprefEmailField.getText().endsWith(".net"))) {
            flag = false;
            aprefEmailField.setForeground(Color.red);

            // check for separator
        } else if (!Util.sepCheck(aprefEmailField.getText())) {
            flag = false;
            aprefEmailField.setForeground(Color.red);
        }

        // type
        // if the box is on the default index, throw error
        if (atypeBox.getSelectedIndex() == 4) {
            flag = false;
            atypeBox.setForeground(Color.red);
        }

        // position
        // if the box is on the default index, throw error
        if (apositionBox.getSelectedIndex() == 9) {
            flag = false;
            apositionBox.setForeground(Color.red);
        }

        // notes
        // if it contains separator, throw error
        if (!Util.sepCheck(anotesField.getText())) {
            flag = false;
            anotesField.setForeground(Color.red);
        }

        setAddErrLabel();
        return flag;
    }
    
    /**
     * sCheck()
     *
     * Checks the search panel and makes sure all the fields are kosher
     * See comments in function for details on each element
     * First, it "resets" by making all fields foregrounds black
     * Then it checks each individual field, and sets the foreground red if the field has an error
     * If it returns a true flag, there is no error
     * It calls the setSearchErrLabel to find the individual errors and updates errLabel
     *
     * @return flag, the conditional to show if the fields are valid
     */
    public boolean sCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        ssetAllForeground(Color.black);

        // FirstName
        // if it is either nothing or the default, throw error
        // if it contains seperator, throw error
        if (sfNameField.getText().equals("") || sfNameField.getText().equals("--")) {
            flag = false;
            sfNameField.setForeground(Color.red);
            sfNameField.setText("--");
            errLabel.setText("All fields required");
        } else if (!Util.sepCheck(sfNameField.getText())) {
            flag = false;
            sfNameField.setForeground(Color.red);
        }

        // LastName
        // if it is either nothing or the default, throw error
        // if it contains separator, throw error
        if (slNameField.getText().equals("") || slNameField.getText().equals("--")) {
            flag = false;
            slNameField.setForeground(Color.red);
            slNameField.setText("--");
            errLabel.setText("All fields required");
        } else if (!Util.sepCheck(slNameField.getText())) {
            flag = false;
            slNameField.setForeground(Color.red);
        }

        // 800 number
        // if it is either nothing or the default, throw error
        // if it is not an integer, throw error
        try {
            // check for empty or default
            if (snum800Field.getText().equals("") || snum800Field.getText().equals("--")) {
                flag = false;
                snum800Field.setForeground(Color.red);
                errLabel.setText("All fields required");
                snum800Field.setText("--");
            } else {
                // try to make it an integer
                int num = Integer.parseInt(snum800Field.getText());
            }
        } catch (NumberFormatException e) {
            // if it's not an integer
            flag = false;
            snum800Field.setForeground(Color.red);
            errLabel.setText("800 Number field invalid");
        }

        // Phone number
        // if it is either nothing or the default, throw error
        // if it not the correct length of 10, throw error
        // if it not an integer, throw error
        try {
            // check for empty or default
            if ((sphoneField1.getText().equals("") || sphoneField1.getText().equals("--"))
                    && (sphoneField2.getText().equals("") || sphoneField2.getText().equals("--"))
                    && (sphoneField3.getText().equals("") || sphoneField3.getText().equals("--"))) {
                flag = false;
                sphoneField1.setForeground(Color.red);
                sphoneField2.setForeground(Color.red);
                sphoneField3.setForeground(Color.red);
                errLabel.setText("All fields required");
                sphoneField1.setText("--");
                sphoneField2.setText("--");
                sphoneField3.setText("--");

                // check for length
            } else if (sphoneField1.getText().length() != 3
                    || sphoneField2.getText().length() != 3
                    || sphoneField3.getText().length() != 4) {
                flag = false;
                sphoneField1.setForeground(Color.red);
                sphoneField2.setForeground(Color.red);
                sphoneField3.setForeground(Color.red);
                errLabel.setText("Phone number field invalid");

                // try to make it an integer
            } else {
                int num1 = Integer.parseInt(sphoneField1.getText());
                int num2 = Integer.parseInt(sphoneField2.getText());
                int num3 = Integer.parseInt(sphoneField3.getText());
            }
        } catch (NumberFormatException e) {
            // if it's not an integer
            flag = false;
            sphoneField1.setForeground(Color.red);
            sphoneField2.setForeground(Color.red);
            sphoneField3.setForeground(Color.red);
            errLabel.setText("Phone number field invalid");
        }

        // siue email
        // if it is empty or the default, throw error
        // if it does not contain an @, throw error
        // if it doesn't end with email ending, throw error
        if (ssiueEmailField.getText().equals("") || ssiueEmailField.getText().equals("--")) {
            flag = false;
            ssiueEmailField.setForeground(Color.red);
            ssiueEmailField.setText("--");
            errLabel.setText("All filds required");
        }
        // check for @
        if (!ssiueEmailField.getText().contains("@")) {
            flag = false;
            ssiueEmailField.setForeground(Color.red);
            errLabel.setText("SIUe email invalid");

            // check ending
        } else if (!(ssiueEmailField.getText().endsWith(".com")
                || ssiueEmailField.getText().endsWith(".edu")
                || ssiueEmailField.getText().endsWith(".org")
                || ssiueEmailField.getText().endsWith(".net"))) {
            flag = false;
            ssiueEmailField.setForeground(Color.red);
            errLabel.setText("SIUe email invalid");

            // check for seperator
        } else if (!Util.sepCheck(ssiueEmailField.getText())) {
            flag = false;
            ssiueEmailField.setForeground(Color.red);
        }

        // preferred email
        // if it is empty or the default, throw error
        // if it does not contain an @, throw error
        // if it doesn't end with email ending, throw error
        if (sprefEmailField.getText().equals("") || sprefEmailField.getText().equals("--")) {
            flag = false;
            sprefEmailField.setForeground(Color.red);
            sprefEmailField.setText("--");
            errLabel.setText("All fields required");

            // check for @
        } else if (!sprefEmailField.getText().contains("@")) {
            flag = false;
            sprefEmailField.setForeground(Color.red);
            errLabel.setText("Preferred email invalid");

            // check ending
        } else if (!(sprefEmailField.getText().endsWith(".com")
                || sprefEmailField.getText().endsWith(".edu")
                || sprefEmailField.getText().endsWith(".org")
                || sprefEmailField.getText().endsWith(".net"))) {
            flag = false;
            sprefEmailField.setForeground(Color.red);
            errLabel.setText("SIUe email invalid");

            // check for seperator
        } else if (!Util.sepCheck(sprefEmailField.getText())) {
            flag = false;
            sprefEmailField.setForeground(Color.red);
        }

        // type
        // if the box is on the default index, throw error
        if (stypeBox.getSelectedIndex() == 4) {
            flag = false;
            stypeBox.setForeground(Color.red);
            errLabel.setText("All fields required");
        }

        // position
        // if the box is on the default index, throw error
        if (spositionBox.getSelectedIndex() == 9) {
            flag = false;
            spositionBox.setForeground(Color.red);
            errLabel.setText("All fields required");
        }

        if (!Util.sepCheck(snotesField.getText())) {
            flag = false;
            snotesField.setForeground(Color.red);
        }

        setSearchErrLabel();
        return flag;
    }

    /**
     * setAddErrLabel()
     * 
     * Checks each field to see if the text color is red
     * If it is, add to count
     * Starts with end so it can print out "Error with ##### field and # other(s)
     */
    public void setAddErrLabel() {
        int errCount = 0;
        String err = "";

        // notes
        if (anotesField.getForeground() == Color.red) {
            errCount++;
            err = "Error with notes field";
        }
        // position
        if (apositionBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with position field";
        }
        // type
        if (atypeBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with type field";
        }
        // preferred email
        if (aprefEmailField.getForeground() == Color.red) {
            errCount++;
            err = "Error with preferred email field";
        }
        // siue email
        if (asiueEmailField.getForeground() == Color.red) {
            errCount++;
        }
        // phone fields
        if (aphoneField1.getForeground() == Color.red
                || aphoneField2.getForeground() == Color.red
                || aphoneField3.getForeground() == Color.red) {
            errCount++;
            err = "Error with phone field";
        }
        // 800 number
        if (anum800Field.getForeground() == Color.red) {
            errCount++;
            err = "Error with 800 number field";
        }
        // last name
        if (alNameField.getForeground() == Color.red) {
            errCount++;
            err = "Error with last name field";
        }
        // first name
        if (afNameField.getForeground() == Color.red) {
            errCount++;
            err = "Error with first name field";
        }

        // if there is more than one error
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");
            // if there's only one
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }

        // if there are no errors, this method isn't called
    }

    /**
     * setSearchErrLabel()
     * 
     * Checks each field to see if the text color is red
     * If it is, add to count
     * Starts with end so it can print out "Error with ##### field and # other(s)
     */
    public void setSearchErrLabel() {
        int errCount = 0;
        String err = "";

        // notes
        if (snotesField.getForeground() == Color.red) {
            errCount++;
            err = "Error with notes field";
        }
        // position
        if (spositionBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with position field";
        }
        // type
        if (stypeBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with type field";
        }
        // preferred email
        if (sprefEmailField.getForeground() == Color.red) {
            errCount++;
            err = "Error with preferred email field";
        }
        // siue email
        if (ssiueEmailField.getForeground() == Color.red) {
            errCount++;
        }
        // phone fields
        if (sphoneField1.getForeground() == Color.red
                || sphoneField2.getForeground() == Color.red
                || sphoneField3.getForeground() == Color.red) {
            errCount++;
            err = "Error with phone field";
        }
        // 800 number
        if (snum800Field.getForeground() == Color.red) {
            errCount++;
            err = "Error with 800 number field";
        }
        // last name
        if (slNameField.getForeground() == Color.red) {
            errCount++;
            err = "Error with last name field";
        }
        // first name
        if (sfNameField.getForeground() == Color.red) {
            errCount++;
            err = "Error with first name field";
        }

        // if there is more than one error
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");
            // if there is only one error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
        // if there is no error, this method is not called
    }

    /**
     * main()
     * 
     * You already know what main is if you're reading this
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfileGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ProfileGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JTextField afNameField;
    private javax.swing.JTextField alNameField;
    private javax.swing.JTextArea anotesField;
    private javax.swing.JTextField anum800Field;
    private javax.swing.JTextField aphoneField1;
    private javax.swing.JTextField aphoneField2;
    private javax.swing.JTextField aphoneField3;
    private javax.swing.JComboBox<String> apositionBox;
    private javax.swing.JTextField apositionField;
    private javax.swing.JTextField aprefEmailField;
    private javax.swing.JScrollPane ascrollPane;
    private javax.swing.JTextField asiueEmailField;
    private javax.swing.JComboBox<String> atypeBox;
    private javax.swing.JTextField atypeField;
    private javax.swing.JMenuItem bugItem;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel errLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> list;
    private javax.swing.JMenuItem logoutItem;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField sfNameField;
    private javax.swing.JTextField slNameField;
    private javax.swing.JTextArea snotesField;
    private javax.swing.JTextField snum800Field;
    private javax.swing.JScrollPane sp;
    private javax.swing.JTextField sphoneField1;
    private javax.swing.JTextField sphoneField2;
    private javax.swing.JTextField sphoneField3;
    private javax.swing.JComboBox<String> spositionBox;
    private javax.swing.JTextField spositionField;
    private javax.swing.JTextField sprefEmailField;
    private javax.swing.JScrollPane sscrollPane;
    private javax.swing.JTextField ssiueEmailField;
    private javax.swing.JComboBox<String> stypeBox;
    private javax.swing.JTextField stypeField;
    private javax.swing.JButton submitButton;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
} // end ProfileGUI
