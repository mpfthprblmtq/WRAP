/**
 * File: AccountGUI.java 
 * Desc: Sends input to AccountController and handles all
 *       the GUI related events
 *
 * Author: Pat Ripley
 */
package webradio;

// imports
import java.awt.Color;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;

public class AccountGUI extends javax.swing.JFrame {

    public class ListElement {

        String username, password, name;
        int access;

        public ListElement(String username, String password, int access, String name) {
            this.username = username;
            this.password = password;
            this.access = access;
            this.name = name;
        }

        @Override
        public String toString() {
            return username;
        }
    }

    // ivars
    Account temp;                                                   // used for editing
    DefaultListModel<ListElement> users = new DefaultListModel<>();      // for the graphical list
    ListElement[] elements;

    public static final int ADMIN = 0;
    public static final int MOD = 1;
    public static final int USER = 2;

    public static final int ADD = 0;
    public static final int REMOVE = 1;

    /**
     * Creates new form AccountGUI
     */
    public AccountGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        L2 = new javax.swing.JLabel();
        L3 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        L5 = new javax.swing.JLabel();
        sUField = new javax.swing.JTextField();
        sPField = new javax.swing.JTextField();
        sAField = new javax.swing.JTextField();
        sAComboBox = new javax.swing.JComboBox<>();
        sNField = new javax.swing.JTextField();
        addPanel = new javax.swing.JPanel();
        L6 = new javax.swing.JLabel();
        L7 = new javax.swing.JLabel();
        L8 = new javax.swing.JLabel();
        L9 = new javax.swing.JLabel();
        L10 = new javax.swing.JLabel();
        showPassword = new javax.swing.JLabel();
        aUField = new javax.swing.JTextField();
        apassField = new javax.swing.JPasswordField();
        aconfirmpassField = new javax.swing.JPasswordField();
        passwordMatch = new javax.swing.JLabel();
        aAField = new javax.swing.JTextField();
        aAComboBox = new javax.swing.JComboBox<>();
        aNField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        errLabel = new javax.swing.JLabel();
        scrollpane = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        menubar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        closeItem = new javax.swing.JMenuItem();
        logoutItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        bugItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("W.R.A.P. - Users");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tabs.setFocusable(false);
        tabs.setName("tabPane"); // NOI18N

        searchPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                searchPanelComponentHidden(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        L2.setText("Username:");

        L3.setText("Password:");

        L4.setText("Access:");

        L5.setText("Name:");

        sUField.setEditable(false);
        sUField.setFocusCycleRoot(true);
        sUField.setNextFocusableComponent(sPField);

        sPField.setEditable(false);
        sPField.setNextFocusableComponent(sAComboBox);

        sAField.setEditable(false);
        sAField.setEnabled(false);

        sAComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 : Admin", "1 : Mod", "2 : User", "--" }));
        sAComboBox.setSelectedIndex(3);
        sAComboBox.setToolTipText("");
        sAComboBox.setEnabled(false);
        sAComboBox.setName(""); // NOI18N
        sAComboBox.setNextFocusableComponent(sNField);
        sAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sAComboBoxActionPerformed(evt);
            }
        });

        sNField.setEditable(false);
        sNField.setNextFocusableComponent(sUField);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L4)
                            .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(L2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(L3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(L5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sPField)
                            .addComponent(sNField)
                            .addComponent(sUField)
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addComponent(sAField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sAComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(158, 158, 158))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sUField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L4)
                    .addComponent(sAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        tabs.addTab("Search", searchPanel);

        addPanel.setFocusable(false);

        L6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L6.setText("Username:");

        L7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L7.setText("Password:");

        L8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L8.setText("Access:");

        L9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L9.setText("Name:");

        L10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L10.setText("Confirm:");

        showPassword.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear.png"))); // NOI18N
        showPassword.setToolTipText("Show password");
        showPassword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showPasswordMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                showPasswordMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                showPasswordMouseExited(evt);
            }
        });

        aUField.setFocusCycleRoot(true);
        aUField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aUFieldKeyPressed(evt);
            }
        });

        apassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                apassFieldFocusLost(evt);
            }
        });
        apassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                apassFieldKeyPressed(evt);
            }
        });

        aconfirmpassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                aconfirmpassFieldFocusLost(evt);
            }
        });
        aconfirmpassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aconfirmpassFieldKeyPressed(evt);
            }
        });

        passwordMatch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        passwordMatch.setText(" ");

        aAField.setEditable(false);
        aAField.setBackground(new java.awt.Color(255, 255, 255));

        aAComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 : Admin", "1 : Mod", "2 : User", "--" }));
        aAComboBox.setSelectedIndex(3);
        aAComboBox.setName(""); // NOI18N
        aAComboBox.setNextFocusableComponent(aNField);
        aAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aAComboBoxActionPerformed(evt);
            }
        });
        aAComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aAComboBoxKeyPressed(evt);
            }
        });

        aNField.setNextFocusableComponent(aUField);
        aNField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aNFieldKeyPressed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addButton)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(L9)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(L6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(L7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(L10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(addPanelLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(L8)))
                        .addGap(12, 12, 12)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aNField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                                    .addComponent(passwordMatch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(showPassword))
                                .addComponent(aconfirmpassField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addComponent(aAField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(aAComboBox, 0, 86, Short.MAX_VALUE))
                                .addComponent(apassField)
                                .addComponent(aUField, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aUField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L7)
                    .addComponent(apassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aconfirmpassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordMatch)
                    .addComponent(showPassword))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L8)
                    .addComponent(aAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addGap(23, 23, 23))
        );

        tabs.addTab("Add", addPanel);

        errLabel.setForeground(new java.awt.Color(255, 0, 0));
        errLabel.setText(" ");

        list.setModel(FillList());
        list.setFocusable(false);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(list);

        file.setText("File");

        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        file.add(closeItem);

        logoutItem.setText("Logout");
        logoutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutItemActionPerformed(evt);
            }
        });
        file.add(logoutItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        file.add(exitItem);

        menubar.add(file);

        help.setText("Help");

        bugItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bug_PNG3980.png"))); // NOI18N
        bugItem.setText("Report a bug");
        bugItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugItemActionPerformed(evt);
            }
        });
        help.add(bugItem);

        menubar.add(help);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles the AddButton pressed Checks to see if all fields are filled,
     * then adds
     *
     * @param evt
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (aCheck()) {
            errLabel.setForeground(Color.red);
            errLabel.setText("Please fill all fields");
        } else {
            Add();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Main.CloseAccountGUI();
    }//GEN-LAST:event_formWindowClosed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Delete();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (sCheck()) {
            errLabel.setForeground(Color.red);
            errLabel.setText("All fields are required");
        } else {
            Submit();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        Edit();
    }//GEN-LAST:event_editButtonActionPerformed

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if (!users.isEmpty()) {
            submitButton.setEnabled(false);
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);
            setSearchFieldsEditable(false);
            
            Search(users.elementAt(list.getSelectedIndex()).username);
            tabs.setSelectedIndex(0);
        } else {
            // do nothing
        }
    }//GEN-LAST:event_listMouseClicked

    private void aUFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aUFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aUFieldKeyPressed

    private void aAComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aAComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aAComboBoxKeyPressed

    private void aNFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aNFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aNFieldKeyPressed

    private void searchPanelComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_searchPanelComponentHidden
        sUField.setText("");
        sPField.setText("");
        sAComboBox.setSelectedIndex(3);
        sAField.setText("");
        sNField.setText("");

        sUField.setEditable(false);
        sPField.setEditable(false);
        sAField.setEditable(false);
        sAComboBox.setEnabled(false);
        sNField.setEditable(false);

        sUField.setBackground(new Color(240, 240, 240));
        sPField.setBackground(new Color(240, 240, 240));
        sAField.setBackground(new Color(240, 240, 240));
        sNField.setBackground(new Color(240, 240, 240));
    }//GEN-LAST:event_searchPanelComponentHidden

    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        Main.CloseAccountGUI();
    }//GEN-LAST:event_closeItemActionPerformed

    private void logoutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutItemActionPerformed
        Main.Logout();
        Main.CloseAccountGUI();
    }//GEN-LAST:event_logoutItemActionPerformed

    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit WRAP?",
                "",
                JOptionPane.YES_NO_OPTION);
        switch (res) {
            case 0:
                System.exit(0);
                break;
            default:
            // do nothing
        }
    }//GEN-LAST:event_exitItemActionPerformed

    private void bugItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugItemActionPerformed
        Main.LaunchBugReportGUI();
    }//GEN-LAST:event_bugItemActionPerformed

    private void sAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sAComboBoxActionPerformed
        switch (sAComboBox.getSelectedIndex()) {
            case 0:
                sAField.setText("Admin");
                break;
            case 1:
                sAField.setText("Mod");
                break;
            case 2:
                sAField.setText("User");
                break;
            case 3:
                sAField.setText("");
                break;
        }
    }//GEN-LAST:event_sAComboBoxActionPerformed

    private void aAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aAComboBoxActionPerformed
        switch (aAComboBox.getSelectedIndex()) {
            case 0:
                aAField.setText("Admin");
                break;
            case 1:
                aAField.setText("Mod");
                break;
            case 2:
                aAField.setText("User");
                break;
            case 3:
                aAField.setText("");
                break;
        }
    }//GEN-LAST:event_aAComboBoxActionPerformed

    private void showPasswordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPasswordMouseClicked
        JOptionPane.showMessageDialog(null, apassField.getText());
    }//GEN-LAST:event_showPasswordMouseClicked

    private void apassFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_apassFieldFocusLost
        aCheckPasswordMatch();
    }//GEN-LAST:event_apassFieldFocusLost

    private void aconfirmpassFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aconfirmpassFieldFocusLost
        aCheckPasswordMatch();
    }//GEN-LAST:event_aconfirmpassFieldFocusLost

    private void showPasswordMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPasswordMouseEntered
        passwordMatch.setForeground(Color.black);
        passwordMatch.setText("Show password");
    }//GEN-LAST:event_showPasswordMouseEntered

    private void showPasswordMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showPasswordMouseExited
        if(!apassField.getText().equals("") && !aconfirmpassField.getText().equals("")) {
            aCheckPasswordMatch();
        } else {
            passwordMatch.setText("");
        }
    }//GEN-LAST:event_showPasswordMouseExited

    private void apassFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apassFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_apassFieldKeyPressed

    private void aconfirmpassFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aconfirmpassFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aconfirmpassFieldKeyPressed

    public DefaultListModel FillList() {
        int total = IOController.getTotalUsers();
        Account[] str = IOController.getAllUsers();
        elements = new ListElement[total];

        for (int i = 0; i < total; i++) {
            elements[i] = new ListElement(str[i].getUsername(),
                    str[i].getPassword(),
                    str[i].getAccess(),
                    str[i].getName());
            users.add(i, elements[i]);
        }
        return users;
    }

    public void UpdateList(int action, ListElement element) {
        switch (action) {
            case ADD:         // add
                users.add(users.getSize(), element);
                break;
            case REMOVE:         // remove
                users.remove(list.getSelectedIndex());
                break;
        }
    }

    public boolean aCheck() {
        boolean flag = true;
        
        // preconditions
        errLabel.setForeground(Color.red);
        asetAllForeground(Color.black);
        
        // Username
        // if it is either nothing or default, throw error
        // if it contains separator character, throw error
        if (aUField.getText().equals("") || aUField.getText().equals("--")) {
            flag = false;
            aUField.setText("--");
            aUField.setForeground(Color.red);
        } else if (!Util.sepCheck(aUField.getText())) {
            flag = false;
            aUField.setForeground(Color.red);
        }
        
        // Password
        // if it is either nothing or default, throw error
        if (apassField.getText().equals("")) {
            flag = false;
        } else if (!Util.sepCheck(apassField.getText())) {
            flag = false;
            apassField.setForeground(Color.red);
            apassField.setForeground(Color.red);
        }
        
        return true;
    }

    public boolean sCheck() {
        return (sUField.getText().equals("")
                || sPField.getText().equals("")
                || sAComboBox.getSelectedIndex() == 3
                || sNField.getText().equals(""));
    }
    
    public void asetAllForeground(Color c) {
        aAComboBox.setForeground(c);
        aNField.setForeground(c);
        aUField.setForeground(c);
        //aPField.setForeground(c);
    }
    
    public void ssetAllForeground(Color c) {
        sAComboBox.setForeground(c);
        sNField.setForeground(c);
        sUField.setForeground(c);
        sPField.setForeground(c);
    }
    
    public void aCheckPasswordMatch() {
        if(apassField.getText().equals(aconfirmpassField.getText())) {
            passwordMatch.setForeground(Color.blue);
            passwordMatch.setText("Passwords match!");
        } else {
            passwordMatch.setForeground(Color.red);
            passwordMatch.setText("Passwords don't match!");
        }
    }

    public void Add() {
        String username = aUField.getText();
        String password = apassField.getText();
        String name = aNField.getText();
        String access = String.valueOf(aAComboBox.getSelectedIndex());

        Account p = new Account(username, password, Integer.valueOf(access), name);
        ListElement element = new ListElement(username, password, Integer.valueOf(access), name);

        if (AccountController.AddUser(p)) {
            errLabel.setForeground(Color.blue);
            errLabel.setText("User added successfully");

            UpdateList(ADD, element);

            setAddValuesToNull();
            aUField.requestFocus();

        } else {
            errLabel.setForeground(Color.red);
            errLabel.setText("Username already taken");
        }
    }

    public void Search(String username) {

        errLabel.setText("");

        Account p = AccountController.SearchUser(username);

        editButton.setEnabled(true);
        deleteButton.setEnabled(true);

        setSearchFieldsToValid();

        sUField.setText(p.getUsername());
        sPField.setText(p.getPassword());
        sAField.setText(String.valueOf(p.getAccess()));
        sAComboBox.setSelectedIndex(p.getAccess());
        sNField.setText(p.getName());

    }

    public void Delete() {

        Account p = new Account(sUField.getText(),
                sPField.getText(),
                sAComboBox.getSelectedIndex(),
                sNField.getText());

        if (AccountController.DeleteUser(p)) {
            ListElement element = new ListElement(p.getUsername(),
                    p.getPassword(),
                    p.getAccess(),
                    p.getName());
            UpdateList(REMOVE, element);

            errLabel.setForeground(Color.blue);
            errLabel.setText("User deleted successfully");

            setSearchValuesToNull();
            setSearchFieldsEditable(false);
            
            deleteButton.setEnabled(false);
            editButton.setEnabled(false);
            submitButton.setEnabled(false);
        }
    }

    public void Edit() {
        String username = sUField.getText();
        String password = sPField.getText();
        String access = String.valueOf(sAComboBox.getSelectedIndex());
        String name = sNField.getText();

        setSearchFieldsEditable(true);

        submitButton.setEnabled(true);
        editButton.setEnabled(false);
        deleteButton.setEnabled(false);

        temp = new Account(username, password, Integer.valueOf(access), name);
    }

    public void Submit() {
        String username = sUField.getText();
        String password = sPField.getText();
        String access = String.valueOf(sAComboBox.getSelectedIndex());
        String name = sNField.getText();
        
        errLabel.setForeground(Color.blue);
        errLabel.setText("User edited successfully");

        setSearchFieldsEditable(false);
        
        Account p = new Account(username, password, Integer.valueOf(access), name);
        
        AccountController.DeleteUser(temp);
        AccountController.AddUser(p);
        
        ListElement t = new ListElement(temp.getUsername(), temp.getPassword(), 
                                                temp.getAccess(), temp.getName());
        ListElement q = new ListElement(username, password, Integer.valueOf(access), name);
        
        UpdateList(REMOVE, t);
        UpdateList(ADD, q);

        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
        submitButton.setEnabled(false);

        list.setSelectedIndex(list.getLastVisibleIndex());
        Search(users.getElementAt(users.getSize() - 1).username);

    }

    public void setAddValuesToNull() {
        aUField.setText("");
        apassField.setText("");
        aNField.setText("");
        aAComboBox.setSelectedIndex(3);
    }

    public void setSearchValuesToNull() {
        sUField.setText("");
        sPField.setText("");
        sAComboBox.setSelectedIndex(3);
        sAField.setText("");
        sNField.setText("");

        sUField.setBackground(new Color(240, 240, 240));
        sPField.setBackground(new Color(240, 240, 240));
        sAField.setBackground(new Color(240, 240, 240));
        sNField.setBackground(new Color(240, 240, 240));

        sUField.setEnabled(false);
        sPField.setEnabled(false);
        sNField.setEnabled(false);
    }

    public void setSearchFieldsToValid() {
        sAField.setEnabled(true);
        sUField.setBackground(Color.white);
        sPField.setBackground(Color.white);
        sAField.setBackground(Color.white);
        sNField.setBackground(Color.white);
    }
    
    public void setSearchFieldsEditable(boolean b) {
        sUField.setEditable(b);
        sPField.setEditable(b);
        sAComboBox.setEnabled(b);
        sNField.setEditable(b);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AccountGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L10;
    private javax.swing.JLabel L2;
    private javax.swing.JLabel L3;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JLabel L7;
    private javax.swing.JLabel L8;
    private javax.swing.JLabel L9;
    private javax.swing.JComboBox<String> aAComboBox;
    private javax.swing.JTextField aAField;
    private javax.swing.JTextField aNField;
    private javax.swing.JTextField aUField;
    private javax.swing.JPasswordField aconfirmpassField;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JPasswordField apassField;
    private javax.swing.JMenuItem bugItem;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel errLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JList<String> list;
    private javax.swing.JMenuItem logoutItem;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JLabel passwordMatch;
    private javax.swing.JComboBox<String> sAComboBox;
    private javax.swing.JTextField sAField;
    private javax.swing.JTextField sNField;
    private javax.swing.JTextField sPField;
    private javax.swing.JTextField sUField;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel showPassword;
    private javax.swing.JButton submitButton;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
