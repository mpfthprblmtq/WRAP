/**
 * File: AccountGUI.java
 * Desc: Sends input to AccountController and handles all the GUI related events
 *
 * Author: Pat Ripley
 */
package webradio;

// imports
import java.awt.Color;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class AccountGUI extends javax.swing.JFrame {

    /**
     * Minor inner class used to create the list on the right side of the panel
     */
    // <editor-fold defaultstate="collapsed" desc="class ListElement">  
    public class ListElement {

        String username, password, name;
        int access;

        public ListElement(String username, String password, int access, String name) {
            this.username = username;
            this.password = password;
            this.access = access;
            this.name = name;
        }

        @Override
        public String toString() {
            return username;
        }
    }
    // </editor-fold>

    /**
     * Minor inner class used to limit th amount of text in a text field
     */
    // <editor-fold defaultstate="collapsed" desc="JTextFieldLimit">
    class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        JTextFieldLimit(int limit, boolean upper) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }
    // </editor-fold>

    // globals
    Account temp;
    DefaultListModel<ListElement> users = new DefaultListModel<>();
    ListElement[] elements;
    boolean apasswordsMatch = true;
    boolean spasswordsMatch = true;
    
    String passwordChangeTo;

    // global constants
    public static final int ADMIN = 0;
    public static final int MOD = 1;
    public static final int USER = 2;

    public static final int ADD = 0;
    public static final int REMOVE = 1;

    /**
     * Creates new form AccountGUI
     */
    public AccountGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        L1 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        L5 = new javax.swing.JLabel();
        sUField = new javax.swing.JTextField();
        spasswordMatch = new javax.swing.JLabel();
        sAField = new javax.swing.JTextField();
        sAComboBox = new javax.swing.JComboBox<>();
        sNField = new javax.swing.JTextField();
        changePasswordLabel = new javax.swing.JLabel();
        addPanel = new javax.swing.JPanel();
        L6 = new javax.swing.JLabel();
        L7 = new javax.swing.JLabel();
        L8 = new javax.swing.JLabel();
        L9 = new javax.swing.JLabel();
        L10 = new javax.swing.JLabel();
        aUField = new javax.swing.JTextField();
        apassField = new javax.swing.JPasswordField();
        aconfirmpassField = new javax.swing.JPasswordField();
        apasswordMatch = new javax.swing.JLabel();
        aAField = new javax.swing.JTextField();
        aAComboBox = new javax.swing.JComboBox<>();
        aNField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        errLabel = new javax.swing.JLabel();
        scrollpane = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        loginLabel = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        closeItem = new javax.swing.JMenuItem();
        logoutItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        bugItem = new javax.swing.JMenuItem();
        suggestionItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("W.R.A.P. - Accounts");
        setIconImage(new ImageIcon("src\\images\\imageicon.png").getImage());
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tabs.setFocusable(false);
        tabs.setName("tabPane"); // NOI18N

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.setMaximumSize(new java.awt.Dimension(68, 23));
        submitButton.setMinimumSize(new java.awt.Dimension(68, 23));
        submitButton.setPreferredSize(new java.awt.Dimension(68, 23));
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        L1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L1.setText("Username:");

        L4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L4.setText("Access:");

        L5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L5.setText("Name:");

        sUField.setEditable(false);
        sUField.setFocusCycleRoot(true);
        sUField.setDocument(new JTextFieldLimit(30));
        sUField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sUFieldFocusGained(evt);
            }
        });

        spasswordMatch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        spasswordMatch.setText(" ");

        sAField.setEditable(false);
        sAField.setEnabled(false);

        sAComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 : Admin", "1 : Mod", "2 : User", "--" }));
        sAComboBox.setSelectedIndex(3);
        sAComboBox.setToolTipText("");
        sAComboBox.setEnabled(false);
        sAComboBox.setName(""); // NOI18N
        sAComboBox.setNextFocusableComponent(sNField);
        sAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sAComboBoxActionPerformed(evt);
            }
        });

        sNField.setEditable(false);
        sNField.setNextFocusableComponent(sUField);
        sNField.setDocument(new JTextFieldLimit(30));
        sNField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sNFieldFocusGained(evt);
            }
        });

        changePasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        changePasswordLabel.setText("Click to change password");
        changePasswordLabel.setEnabled(false);
        changePasswordLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePasswordLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(editButton)
                        .addGap(5, 5, 5)
                        .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(changePasswordLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sNField)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                                .addComponent(sAField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sUField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spasswordMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sUField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changePasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spasswordMatch)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton))))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        tabs.addTab("Search", searchPanel);

        addPanel.setFocusable(false);

        L6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L6.setText("Username:");

        L7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L7.setText("Password:");

        L8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L8.setText("Access:");

        L9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L9.setText("Name:");

        L10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L10.setText("Confirm:");

        aUField.setFocusCycleRoot(true);
        aUField.setNextFocusableComponent(apassField);
        aUField.setDocument(new JTextFieldLimit(30));
        aUField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aUFieldFocusGained(evt);
            }
        });
        aUField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aUFieldKeyPressed(evt);
            }
        });

        apassField.setNextFocusableComponent(aconfirmpassField);
        apassField.setDocument(new JTextFieldLimit(30));
        apassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                apassFieldFocusGained(evt);
            }
        });
        apassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                apassFieldKeyReleased(evt);
            }
        });

        aconfirmpassField.setNextFocusableComponent(aAComboBox);
        aconfirmpassField.setDocument(new JTextFieldLimit(30));
        aconfirmpassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aconfirmpassFieldFocusGained(evt);
            }
        });
        aconfirmpassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aconfirmpassFieldKeyReleased(evt);
            }
        });

        apasswordMatch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        apasswordMatch.setText(" ");

        aAField.setEditable(false);
        aAField.setBackground(new java.awt.Color(255, 255, 255));

        aAComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 : Admin", "1 : Mod", "2 : User", "--" }));
        aAComboBox.setSelectedIndex(3);
        aAComboBox.setName(""); // NOI18N
        aAComboBox.setNextFocusableComponent(aNField);
        aAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aAComboBoxActionPerformed(evt);
            }
        });
        aAComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aAComboBoxKeyPressed(evt);
            }
        });

        aNField.setNextFocusableComponent(aUField);
        aNField.setDocument(new JTextFieldLimit(30));
        aNField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aNFieldFocusGained(evt);
            }
        });
        aNField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aNFieldKeyPressed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addButton)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(L7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L6, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(L8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aNField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                                    .addComponent(apasswordMatch, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addGap(26, 26, 26))
                                .addComponent(aconfirmpassField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addComponent(aAField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(aAComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(apassField)
                                .addComponent(aUField)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aUField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L7)
                    .addComponent(apassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aconfirmpassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L10))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(apasswordMatch)
                .addGap(13, 13, 13)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L8)
                    .addComponent(aAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addGap(23, 23, 23))
        );

        tabs.addTab("Add", addPanel);

        errLabel.setForeground(new java.awt.Color(255, 0, 0));
        errLabel.setText(" ");

        list.setModel(FillList());
        list.setFocusable(false);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(list);

        loginLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        loginLabel.setText(" ");

        file.setText("File");

        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        file.add(closeItem);

        logoutItem.setText("Logout");
        logoutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutItemActionPerformed(evt);
            }
        });
        file.add(logoutItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        file.add(exitItem);

        menubar.add(file);

        help.setText("Help");

        bugItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bug_PNG3980.png"))); // NOI18N
        bugItem.setText("Report a bug");
        bugItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugItemActionPerformed(evt);
            }
        });
        help.add(bugItem);

        suggestionItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear.png"))); // NOI18N
        suggestionItem.setText("Make a suggestion");
        suggestionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestionItemActionPerformed(evt);
            }
        });
        help.add(suggestionItem);

        menubar.add(help);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(loginLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabs)
                    .addComponent(scrollpane))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Literally all event related methods Includes:
     *
     * Add, Submit, and Edit : calls outside methods FormWindow events :
     * closing, opening ListClicked : searches for element that was clicked
     * KeyPressed : if enter was pressed, do a thing MenuBar things : things in
     * the menu bar (exit, close, logout, help, bug, etc) ComboBox things :
     * changes the fields when the combobox is changed GainFocus : selects all
     * text in the field when field gains focus EnterKeyPressed : clicks a
     * button when enter is pressed ShowPassword : changes the text on the
     * passwordsMatch label, shows password in pop up window when clicked
     */
    // <editor-fold defaultstate="collapsed" desc="Literally all event-related methods">  
    /**
     * Handles when the ADD button is pressed Checks to see if all of the
     * elements are kosher, then calls Add()
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (Main.p.getAccess() == 0) {
            if (aCheck()) {
                Add();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "403 : Forbidden\nAdministrator access only",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            setAddValuesToNull();
            aUField.requestFocus();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Handles when the window is closed When the window is closed, call
     * Main.closeAccountGUI()
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Main.CloseAccountGUI();
    }//GEN-LAST:event_formWindowClosed

    /**
     * Handles when the DELETE button is pressed Pops up a confirmation window,
     * then calls Delete() if user wishes
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        if (Main.p.getAccess() == 0) {
            int res = JOptionPane.showConfirmDialog(
                    null,
                    "Are you sure you want to delete user "
                    + sUField.getText() + "?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION);

            // do a thing based on response
            switch (res) {
                case 0:
                    Delete();
                    break;
                default:
                // do nothing
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "403 : Forbidden\nAdministrator access only",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            setAddValuesToNull();
            aUField.requestFocus();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Handles when the SUBMIT button is pressed Checks to see if all the
     * modified elements are okay, calls Submit() if they are
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (sCheck()) {
            Submit();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Handles when the EDIT button is pressed Just calls outside method Edit()
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (Main.p.getUsername().equals(sUField.getText())
                || Main.p.getUsername().equals("root")) {
            Edit();
        } else {
            JOptionPane.showMessageDialog(this,
                    "403 : Administrator access only\n"
                    + "Edit usability restricted to own account",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Handles when the graphical list is clicked on Basically just searches for
     * the element that was clicked on
     */
    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if (!users.isEmpty()) {
            submitButton.setEnabled(false);
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);
            
            setSearchFieldsEditable(false);

            Search(users.elementAt(list.getSelectedIndex()).username);
            tabs.setSelectedIndex(0);
            //sCheckPasswordMatch();
        } else {
            // do nothing
            // it crashes otherwise
        }
    }//GEN-LAST:event_listMouseClicked

    /**
     * Handles when Enter was pressed while Username field (add) was in focus If
     * enter was pressed while Username field (add) was in focus, click the Add
     * button
     */
    private void aUFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aUFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aUFieldKeyPressed

    /**
     * Handles when Enter was pressed while Access comboBox (add) was in focus
     * If enter was pressed while Access comboBox (add) was in focus, click the
     * Add button
     */
    private void aAComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aAComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aAComboBoxKeyPressed

    /**
     * Handles when Enter was pressed while Name field (add) was in focus If
     * enter was pressed while Name field (add) was in focus, click the Add
     * button
     */
    private void aNFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aNFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aNFieldKeyPressed

    /**
     * Handles if user selects close current window option in the menu bar Calls
     * Main.CloseAccountGUI()
     */
    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        Main.CloseAccountGUI();
    }//GEN-LAST:event_closeItemActionPerformed

    /**
     * Handles if user selects logout option in the menu bar Calls
     * Main.Logout(), setting the user to null, as well as
     * Main.CloseAccountGUI()
     */
    private void logoutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutItemActionPerformed
        Main.Logout();
        Main.CloseAccountGUI();
        Main.CloseMainGUI();
    }//GEN-LAST:event_logoutItemActionPerformed

    /**
     * Handles if user selects exit option in the menu bar Pops up a
     * confirmation window, then exits the program if user wishes
     */
    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit WRAP?",
                "",
                JOptionPane.YES_NO_OPTION);

        // do a thing based on response
        switch (res) {
            case 0:
                System.exit(0);
                break;
            default:
            // do nothing
        }
    }//GEN-LAST:event_exitItemActionPerformed

    /**
     * Handles if user selects bug option in the menu bar Calls
     * LaunchBugReportGUI()
     */
    private void bugItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugItemActionPerformed
        Main.LaunchBugReportGUI();
    }//GEN-LAST:event_bugItemActionPerformed

    /**
     * Handles if the comboBox index is changed (Access for add) Changes the
     * field to match the changed index
     */
    private void sAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sAComboBoxActionPerformed
        switch (sAComboBox.getSelectedIndex()) {
            case 0:
                sAField.setText("Admin");
                break;
            case 1:
                sAField.setText("Mod");
                break;
            case 2:
                sAField.setText("User");
                break;
            case 3:
                sAField.setText("");
                break;
        }
    }//GEN-LAST:event_sAComboBoxActionPerformed

    /**
     * Handles if the comboBox index is changed (Access for search) Changes the
     * field to match the changed index
     */
    private void aAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aAComboBoxActionPerformed
        switch (aAComboBox.getSelectedIndex()) {
            case 0:
                aAField.setText("Admin");
                break;
            case 1:
                aAField.setText("Mod");
                break;
            case 2:
                aAField.setText("User");
                break;
            case 3:
                aAField.setText("");
                break;
        }
    }//GEN-LAST:event_aAComboBoxActionPerformed

    /**
     * Handles if key is pressed in the password fields (add) If enter, click
     * the add button Else check to see if the passwords match
     */
    private void apassFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apassFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        } else {
            aCheckPasswordMatch();
        }
    }//GEN-LAST:event_apassFieldKeyReleased

    /**
     * Handles if key is pressed in the password fields (add) If enter, click
     * the add button Else check to see if the passwords match
     */
    private void aconfirmpassFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aconfirmpassFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        } else {
            aCheckPasswordMatch();
        }
    }//GEN-LAST:event_aconfirmpassFieldKeyReleased

    /**
     * Handles if the field gains focus Highlights the contents of the field
     */
    private void sUFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sUFieldFocusGained
        sUField.selectAll();
    }//GEN-LAST:event_sUFieldFocusGained

    /**
     * Handles if the field gains focus Highlights the contents of the field
     */
    private void sNFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sNFieldFocusGained
        sNField.selectAll();
    }//GEN-LAST:event_sNFieldFocusGained

    /**
     * Handles if the field gains focus Highlights the contents of the field
     */
    private void aUFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aUFieldFocusGained
        aUField.selectAll();
    }//GEN-LAST:event_aUFieldFocusGained

    /**
     * Handles if the field gains focus Highlights the contents of the field
     */
    private void apassFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_apassFieldFocusGained
        apassField.selectAll();
    }//GEN-LAST:event_apassFieldFocusGained

    /**
     * Handles if the field gains focus Highlights the contents of the field
     */
    private void aconfirmpassFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aconfirmpassFieldFocusGained
        aconfirmpassField.selectAll();
    }//GEN-LAST:event_aconfirmpassFieldFocusGained

    /**
     * Handles if the field gains focus Highlights the contents of the field
     */
    private void aNFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aNFieldFocusGained
        aNField.selectAll();
    }//GEN-LAST:event_aNFieldFocusGained

    private void suggestionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestionItemActionPerformed
        Main.LaunchSuggestionReportGUI();
    }//GEN-LAST:event_suggestionItemActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loginLabel.setText("Logged in as " + Main.p.getUsername());
    }//GEN-LAST:event_formComponentShown

    private void changePasswordLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordLabelMouseClicked
        changePassword(true);
    }//GEN-LAST:event_changePasswordLabelMouseClicked

    // </editor-fold>
    /**
     * FillList()
     *
     * Gets all of the users from IOController and shoves them into an array
     * Then it populates the DefaultListModel of ListElements from that array
     *
     * @return the DefaultListModel to populate the JList
     */
    public DefaultListModel FillList() {

        int total = IOController.getTotalUsers();       // get total
        Account[] str = IOController.getAllUsers();     // get users
        elements = new ListElement[total];              // create array of ListElements

        if (str != null && elements.length > 0) {
            // create the DefaultListModel elements
            for (int i = 0; i < total; i++) {
                elements[i] = new ListElement(str[i].getUsername(),
                        str[i].getPassword(),
                        str[i].getAccess(),
                        str[i].getName());
                users.add(i, elements[i]);
            }
        }
        return users;
    }

    /**
     * UpdateList()
     *
     * Works with the global list of users, which updates the JList graphics
     *
     * @param action,  the type of action (either add or remove)
     * @param element, the element to add or remove
     */
    public void UpdateList(int action, ListElement element) {
        switch (action) {
            case ADD:         // add
                users.add(users.getSize(), element);
                break;
            case REMOVE:      // remove
                users.remove(list.getSelectedIndex());
                break;
        }
    }

    public void changePassword(boolean b) {
        JTextField password = new JPasswordField();
        JTextField confirmPassword = new JPasswordField();

        if (b) {
            Object[] message = {
                "Password:", password,
                "Confirm Password:", confirmPassword,
                " "
            };

            int option = JOptionPane.showConfirmDialog(null, message, "Change password", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                if (password.getText().equals(confirmPassword.getText())) {
                    passwordChangeTo = password.getText();
                    //submitButton.doClick();
                } else {
                    changePassword(false);
                }
            } else {
                
            }
        } else {
            //JLabel err = new JLabel();
            Object[] message = {
                "Password:", password,
                "Confirm Password:", confirmPassword,
                "Passwords did not match"
            };

            int option = JOptionPane.showConfirmDialog(null, message, "Change password", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                if (password.getText().equals(confirmPassword.getText())) {
                    passwordChangeTo = password.getText();
                    //submitButton.doClick();
                } else {
                    changePassword(false);
                }
            } else {
                // cancel
            }
        }
    }

    /**
     * Add()
     *
     * If the fields are all valid, this method is called Takes fields and
     * creates Account and ListElement objects Then it calls the
     * AccountController to add the user If the addition succeeds Confirmation
     * on errLabel, update the list, and update graphics Else addition fails
     * Means that the username is already taken, display error on errLabel Also
     * does not allow any addition unless your access level is 0 (admin)
     */
    public void Add() {

        String username = aUField.getText();
        String password = apassField.getText();
        String name = aNField.getText();
        String access = String.valueOf(aAComboBox.getSelectedIndex());

        Account p = new Account(username, password, Integer.valueOf(access), name);
        ListElement element = new ListElement(username, password, Integer.valueOf(access), name);

        if (AccountController.AddUser(p)) {
            // errLabel
            errLabel.setForeground(Color.blue);
            errLabel.setText("User added successfully");

            // update the list
            UpdateList(ADD, element);

            // update graphics
            setAddValuesToNull();
            aUField.requestFocus();

        } else {
            // errLabel
            errLabel.setForeground(Color.red);
            errLabel.setText("Username already taken");
        }

    }

    /**
     * Search()
     *
     * Calls the SearchUser method from AccountController, which returns a valid
     * account Update the graphics with the account credentials
     *
     * @param username, the username to search
     */
    public void Search(String username) {

        // SearchUser()
        Account p = AccountController.SearchUser(username);

        // update graphics
        errLabel.setText(" ");
        editButton.setEnabled(true);
        deleteButton.setEnabled(true);
        setSearchFieldsToValid();

        // display account credentials
        sUField.setText(p.getUsername());
        sAField.setText(String.valueOf(p.getAccess()));
        sAComboBox.setSelectedIndex(p.getAccess());
        sNField.setText(p.getName());
    }

    /**
     * Delete()
     *
     * Creates an account with the fields given Then call DeleteUser() from
     * AccountController If success, confirm on errLabel
     */
    public void Delete() {

        // create new Account
        Account p = new Account(sUField.getText(),
                null,
                sAComboBox.getSelectedIndex(),
                sNField.getText());

        // call DeleteUser()
        if (AccountController.DeleteUser(p.getUsername())) {
            ListElement element = new ListElement(p.getUsername(),
                    p.getPassword(),
                    p.getAccess(),
                    p.getName());
            UpdateList(REMOVE, element);

            // errLabel
            errLabel.setForeground(Color.blue);
            errLabel.setText("User deleted successfully");

            // update graphics
            setSearchValuesToNull();
            setSearchFieldsEditable(false);
            deleteButton.setEnabled(false);
            editButton.setEnabled(false);
            submitButton.setEnabled(false);
        } else {
            errLabel.setForeground(Color.red);
            errLabel.setText("User not deleted successfully");
        }

    }

    /**
     * Edit()
     *
     * Basically just sets the fields to editable Stores a temporary global
     * account, used in the editing process in Submit()
     */
    public void Edit() {

        // create the temp Account
        String username = sUField.getText();
        String password = "whoop";
        String access = String.valueOf(sAComboBox.getSelectedIndex());
        String name = sNField.getText();
        temp = new Account(username, password, Integer.valueOf(access), name);

        // graphics update
        setSearchFieldsEditable(true);
        submitButton.setEnabled(true);
        editButton.setEnabled(false);
        deleteButton.setEnabled(false);
        changePasswordLabel.setEnabled(true);

    }

    /**
     * Submit()
     *
     * Takes the new input as parameters for a new Account object Then it
     * deletes the old account, then adds the new one (in that order) If
     * success, update the graphics If failure, return and update graphics
     */
    public void Submit() {

        setSearchFieldsEditable(false);

        // create new account object
        String username = sUField.getText();
        String password;
        if(!Main.p.getPassword().equals(passwordChangeTo)) {
            password = passwordChangeTo;
        } else {
            password = Main.p.getPassword();
        }
        String access = String.valueOf(sAComboBox.getSelectedIndex());
        String name = sNField.getText();
        Account p = new Account(username, password, Integer.valueOf(access), name);

        // delete old, then add new
        if (AccountController.DeleteUser(temp.getUsername()) && AccountController.AddUser(p)) {
            errLabel.setForeground(Color.blue);
            errLabel.setText("User edited successfully");

            AccountController.DeleteUser(temp.getUsername());
            AccountController.AddUser(p);

            ListElement t = new ListElement(temp.getUsername(), temp.getPassword(),
                    temp.getAccess(), temp.getName());
            ListElement q = new ListElement(username, password, Integer.valueOf(access), name);

            UpdateList(REMOVE, t);
            UpdateList(ADD, q);
        } else {
            errLabel.setForeground(Color.red);
        }

        // update graphics
        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
        submitButton.setEnabled(false);
        changePasswordLabel.setEnabled(false);

        passwordChangeTo = "";
        list.setSelectedIndex(list.getLastVisibleIndex());
        Search(users.getElementAt(users.getSize() - 1).username);
    }

    /**
     * aCheck()
     *
     * Checks the add panel and makes sure all the fields are kosher See
     * comments in function for details on each element First, it "resets" by
     * making all fields foregrounds black Then it checks each individual field,
     * and sets the foreground red if the field has an error If it returns a
     * true flag, there is no error It calls the setAddErrLabel to find the
     * individual errors and updates errLabel
     *
     * @return flag, the conditional to show if the fields are valid
     */
    public boolean aCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        asetAllForeground(Color.black);

        // Username
        // if it is either nothing or default, throw error
        // if it contains separator character, throw error
        if (aUField.getText().equals("") || aUField.getText().equals("--")) {
            flag = false;
            aUField.setText("--");
            aUField.setForeground(Color.red);
        } else if (!Util.sepCheck(aUField.getText())) {
            flag = false;
            aUField.setForeground(Color.red);
        }

        // Password
        // if it is nothing, throw error
        // if it contains separator character, throw error
        if (apassField.getText().equals("") && aconfirmpassField.getText().equals("")) {
            flag = false;
            apassField.setForeground(Color.red);
            aconfirmpassField.setForeground(Color.red);
        } else if (!apasswordsMatch) {
            flag = false;
            apassField.setForeground(Color.red);
            aconfirmpassField.setForeground(Color.red);
        } else if (!Util.sepCheck(apassField.getText())) {
            flag = false;
            apassField.setForeground(Color.red);
            aconfirmpassField.setForeground(Color.red);
        }

        // Access
        // if the box is on the default index, throw error
        if (aAComboBox.getSelectedIndex() == 3) {
            flag = false;
            aAComboBox.setForeground(Color.red);
        }

        // Name
        // if it is either nothing or the default, throw error
        if (aNField.getText().equals("") || aNField.getText().equals("--")) {
            flag = false;
            aNField.setText("--");
            aNField.setForeground(Color.red);
        }

        setAddErrLabel();
        return flag;
    }

    /**
     * sCheck()
     *
     * Checks the search panel and makes sure all the fields are kosher See
     * comments in function for details on each element First, it "resets" by
     * making all fields foregrounds black Then it checks each individual field,
     * and sets the foreground red if the field has an error If it returns a
     * true flag, there is no error It calls the setAddErrLabel to find the
     * individual errors and updates errLabel
     *
     * UPDATE: Now when changing your username, it prompts you to log out then
     * log in again Mostly because coding it based on my logic would mean
     * restructuring my logic Ain't nobody got time for that
     *
     * @return flag, the conditional to show if the fields are valid
     */
    public boolean sCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        ssetAllForeground(Color.black);

        // if the username changed from the global account
        // if you edited your username
//        if (!Main.p.getUsername().equals(sUField.getText()) && !Main.p.getUsername().equals("root")) {
//                // show a dialog box
//                int res = JOptionPane.showConfirmDialog(
//                        null,
//                        "Changing your username requires you login again.\n"
//                        + "Are you sure you'd like to change your username to "
//                        + sUField.getText() + "?",
//                        "Confirm Username Change",
//                        JOptionPane.YES_NO_OPTION);
//
//                // do a thing based on response
//                switch (res) {
//                    case 0:     // if yes, check for dupe in username
//                        if (IOController.CheckForUsernameDupe(sUField.getText())) {
//                            errLabel.setForeground(Color.red);
//                            errLabel.setText("Username already taken");
//                            return false;
//
//                            // all is good, no duplication
//                        } else {
//                            //Submit();
//                            //submitButton.doClick();
//                            Main.Logout();
//                            Main.CloseAccountGUI();
//                            Main.CloseMainGUI();
//                        }
//                        break;
//                    default:
//                        return false;
//                }
//                // show a dialog box
//                int res = JOptionPane.showConfirmDialog(
//                        null,
//                        "Changing a username requires you login again.\n"
//                        + "Are you sure you'd like to change the username to "
//                        + sUField.getText() + "?",
//                        "Confirm Username Change",
//                        JOptionPane.YES_NO_OPTION);

//                // do a thing based on response
//                switch (res) {
//                    case 0:     // if yes, check for dupe in username
//                        if (IOController.CheckForUsernameDupe(sUField.getText())) {
//                            errLabel.setForeground(Color.red);
//                            errLabel.setText("Username already taken");
//                            return false;
//
//                            // all is good, no duplication
//                        } else {
//                            Main.Logout();
//                            Main.CloseAccountGUI();
//                            Main.CloseMainGUI();
//                        }
//                        break;
//                    default:
//                        return false;
//                }

            // no change in username, check the other things
        //} else {

            // Username
            // if it is either nothing or default, throw error
            // if it contains separator character, throw error
            if (sUField.getText().equals("") || sUField.getText().equals("--")) {
                flag = false;
                sUField.setText("--");
                sUField.setForeground(Color.red);
//        } else if (IOController.CheckForUsernameDupe(sUField.getText())) {
//            flag = false;
//            sUField.setForeground(Color.red);
            } else if (!Util.sepCheck(sUField.getText())) {
                flag = false;
                sUField.setForeground(Color.red);
            }

//            // Password
//            // if it is nothing, throw error
//            // if it contains separator character, throw error
//            if (spassField.getText().equals("") && sconfirmpassField.getText().equals("")) {
//                flag = false;
//                spassField.setForeground(Color.red);
//                sconfirmpassField.setForeground(Color.red);
//            } else if (!spasswordsMatch) {
//                flag = false;
//                spassField.setForeground(Color.red);
//                sconfirmpassField.setForeground(Color.red);
//            } else if (!Util.sepCheck(spassField.getText())) {
//                flag = false;
//                spassField.setForeground(Color.red);
//                sconfirmpassField.setForeground(Color.red);
//            }

            // Access
            // if the box is on the default index, throw error
            if (sAComboBox.getSelectedIndex() == 3) {
                flag = false;
                sAComboBox.setForeground(Color.red);
            }

            // Name
            // if it is either nothing or the default, throw error
            if (sNField.getText().equals("") || sNField.getText().equals("--")) {
                flag = false;
                sNField.setText("--");
                sNField.setForeground(Color.red);
            }

        //}
        setSearchErrLabel();
        return flag;
    }

    /**
     * setAddErrLabel()
     *
     * Has an error count to find the total number of errors Basically just sees
     * if the foregrounds of each field is red If they are, add 1 to count It's
     * in reverse so it starts with the top most field Example: "Error with
     * access field and 1 other(s)"
     */
    public void setAddErrLabel() {
        int errCount = 0;   // number of errors
        String err = "";    // err, instantiated it to null to add to it later

        // name field
        if (aNField.getForeground() == Color.red) {
            errCount++;
            err = "Error with name field";
        }

        // access field
        if (aAComboBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with access field";
        }

        // passwords field
        if (apassField.getForeground() == Color.red
                && aconfirmpassField.getForeground() == Color.red) {
            errCount++;
            err = "Error with password field(s)";
        }

        // username field
        if (aUField.getForeground() == Color.red) {
            errCount++;
            err = "Error with username field";
        }

        // if the count is over 1, get the top most error and add "and # other(s)"
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");

            // else if error count is only 1, display the only error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
    }

    /**
     * setSeachErrLabel()
     *
     * Has an error count to find the total number of errors Basically just sees
     * if the foregrounds of each field is red If they are, add 1 to count It's
     * in reverse so it starts with the top most field Example: "Error with
     * access field and 1 other(s)"
     */
    public void setSearchErrLabel() {
        int errCount = 0;   // number of errors
        String err = "";    // err, instantiated it to null to add to it later

        // name field
        if (sNField.getForeground() == Color.red) {
            errCount++;
            err = "Error with name field";
        }

        // access field
        if (sAComboBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with access field";
        }

//        // password field
//        if (spassField.getForeground() == Color.red
//                && sconfirmpassField.getForeground() == Color.red) {
//            errCount++;
//            err = "Error with password field(s)";
//        }

        // username field
        if (sUField.getForeground() == Color.red) {
            errCount++;
            err = "Error with username field";
        }

        // if the count is over 1, get the top most error and add "and # other(s)"
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");

            // else if error count is only 1, display the only error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
    }

    /**
     * asetAllForeground()
     *
     * Graphics update Just sets the foreground of all fields on add panel to a
     * color
     *
     * @param c, the color to change the fields to
     */
    public void asetAllForeground(Color c) {
        aAComboBox.setForeground(c);
        aNField.setForeground(c);
        aUField.setForeground(c);
        apassField.setForeground(c);
        aconfirmpassField.setForeground(c);
    }

    /**
     * ssetAllForeground()
     *
     * Graphics update Just sets the foreground of all fields on search panel to
     * a color
     *
     * @param c, the color to change the fields to
     */
    public void ssetAllForeground(Color c) {
        sAComboBox.setForeground(c);
        sNField.setForeground(c);
        sUField.setForeground(c);
    }

    /**
     * aCheckPasswordMatch()
     *
     * Checks to see if the password in first field matches the password in the
     * confirm field on every key release
     */
    public void aCheckPasswordMatch() {
        if (apassField.getText().equals(aconfirmpassField.getText())) {
            apasswordMatch.setForeground(Color.blue);
            apasswordMatch.setText("Passwords match!");
            apasswordsMatch = true;
        } else {
            apasswordMatch.setForeground(Color.red);
            apasswordMatch.setText("Passwords don't match!");
            apasswordsMatch = false;
        }
    }

    /**
     * sCheckPasswordMatch()
     *
     * Checks to see if the password in first field matches the password in the
     * confirm field on every key release
     */
//    public void sCheckPasswordMatch() {
//        if (spassField.getText().equals(sconfirmpassField.getText())) {
//            spasswordMatch.setForeground(Color.blue);
//            spasswordMatch.setText("Passwords match!");
//            spasswordsMatch = true;
//        } else {
//            spasswordMatch.setForeground(Color.red);
//            spasswordMatch.setText("Passwords don't match!");
//            spasswordsMatch = false;
//        }
//    }

    /**
     * setAddValuesToNull()
     *
     * Graphics update Sets all fields in add panel to blank values
     */
    public void setAddValuesToNull() {
        aUField.setText("");
        apassField.setText("");
        aconfirmpassField.setText("");
        aNField.setText("");
        apasswordMatch.setText(" ");
        aAComboBox.setSelectedIndex(3);
    }

    /**
     * setSearchValuesToNull()
     *
     * Graphics update Sets all fields in search panel to blank values
     */
    public void setSearchValuesToNull() {
        sUField.setText("");
        spasswordMatch.setText(" ");
        sAComboBox.setSelectedIndex(3);
        sAField.setText("");
        sNField.setText("");

        sUField.setBackground(new Color(240, 240, 240));
        sAField.setBackground(new Color(240, 240, 240));
        sNField.setBackground(new Color(240, 240, 240));
    }

    /**
     * setSearchFieldsToValid()
     *
     * Graphics update Sets all fields in search panel to valid
     */
    public void setSearchFieldsToValid() {
        sAField.setEnabled(true);
        sUField.setBackground(Color.white);
        sAField.setBackground(Color.white);
        sNField.setBackground(Color.white);
    }

    /**
     * setSearchFieldsEditable()
     *
     * Graphics update Sets all fields in search panel to editable
     *
     * @param b, the condition of editable
     */
    public void setSearchFieldsEditable(boolean b) {
        sUField.setEditable(b);
        sAComboBox.setEnabled(b);
        sNField.setEditable(b);
    }

    /**
     * main()
     *
     * You already know what main is if you're reading this
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AccountGUI().setVisible(true);
        });
    }

    // I'll modify what I want
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L1;
    private javax.swing.JLabel L10;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JLabel L7;
    private javax.swing.JLabel L8;
    private javax.swing.JLabel L9;
    private javax.swing.JComboBox<String> aAComboBox;
    private javax.swing.JTextField aAField;
    private javax.swing.JTextField aNField;
    private javax.swing.JTextField aUField;
    private javax.swing.JPasswordField aconfirmpassField;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JPasswordField apassField;
    private javax.swing.JLabel apasswordMatch;
    private javax.swing.JMenuItem bugItem;
    private javax.swing.JLabel changePasswordLabel;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel errLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JList<String> list;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JMenuItem logoutItem;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JComboBox<String> sAComboBox;
    private javax.swing.JTextField sAField;
    private javax.swing.JTextField sNField;
    private javax.swing.JTextField sUField;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel spasswordMatch;
    private javax.swing.JButton submitButton;
    private javax.swing.JMenuItem suggestionItem;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
} // End AccountGUI
