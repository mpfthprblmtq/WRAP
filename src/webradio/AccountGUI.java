/**
 * File: AccountGUI.java
 * Desc: Sends input to AccountController and handles all the GUI related events
 *
 * Author: Pat Ripley
 */

package webradio;

// imports
import java.awt.Color;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class AccountGUI extends javax.swing.JFrame {

    /**
     * Minor inner class used to create the list on the right side of the panel
     */
    // <editor-fold defaultstate="collapsed" desc="class ListElement">  
    public class ListElement {

        String username, password, name;
        int access;

        public ListElement(String username, String password, int access, String name) {
            this.username = username;
            this.password = password;
            this.access = access;
            this.name = name;
        }

        @Override
        public String toString() {
            return username;
        }
    }
    // </editor-fold>

    /**
     * Minor inner class used to limit the amount of text in a text field
     */
    // <editor-fold defaultstate="collapsed" desc="JTextFieldLimit">
    class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        JTextFieldLimit(int limit, boolean upper) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }
    // </editor-fold>

    // globals
    Account temp;
    DefaultListModel<ListElement> users = new DefaultListModel<>();
    ListElement[] elements;
    boolean apasswordsMatch = true;
    boolean spasswordsMatch = true;

    // some temp variables for editing accounts
    String passwordChangeTo;
    boolean passwordChanged = false;
    String tempAccess;

    // global constants
    public static final int ADMIN = 0;
    public static final int MOD = 1;
    public static final int USER = 2;

    public static final int ADD = 0;
    public static final int REMOVE = 1;

    /**
     * Creates new form AccountGUI
     */
    public AccountGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        L1 = new javax.swing.JLabel();
        L4 = new javax.swing.JLabel();
        L5 = new javax.swing.JLabel();
        sUField = new javax.swing.JTextField();
        spasswordMatch = new javax.swing.JLabel();
        sAField = new javax.swing.JTextField();
        sAComboBox = new javax.swing.JComboBox<>();
        sNField = new javax.swing.JTextField();
        changePasswordLabel = new javax.swing.JLabel();
        changePasswordLabel2 = new javax.swing.JLabel();
        addPanel = new javax.swing.JPanel();
        L6 = new javax.swing.JLabel();
        L7 = new javax.swing.JLabel();
        L8 = new javax.swing.JLabel();
        L9 = new javax.swing.JLabel();
        L10 = new javax.swing.JLabel();
        aUField = new javax.swing.JTextField();
        apassField = new javax.swing.JPasswordField();
        aconfirmpassField = new javax.swing.JPasswordField();
        passwordMatch = new javax.swing.JLabel();
        aAField = new javax.swing.JTextField();
        aAComboBox = new javax.swing.JComboBox<>();
        aNField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        errLabel = new javax.swing.JLabel();
        scrollpane = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        loginLabel = new javax.swing.JLabel();
        adminLabel = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        closeItem = new javax.swing.JMenuItem();
        logoutItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        bugItem = new javax.swing.JMenuItem();
        suggestionItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("W.R.A.P. - Accounts");
        setIconImage(new ImageIcon("src\\images\\imageicon.png").getImage());
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        tabs.setFocusable(false);
        tabs.setName("tabPane"); // NOI18N

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.setMaximumSize(new java.awt.Dimension(68, 23));
        submitButton.setMinimumSize(new java.awt.Dimension(68, 23));
        submitButton.setPreferredSize(new java.awt.Dimension(68, 23));
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        L1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L1.setText("Username:");

        L4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L4.setText("Access:");

        L5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L5.setText("Name:");

        sUField.setEditable(false);
        sUField.setFocusCycleRoot(true);
        sUField.setDocument(new JTextFieldLimit(30));
        sUField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sUFieldFocusGained(evt);
            }
        });

        spasswordMatch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        spasswordMatch.setText(" ");

        sAField.setEditable(false);
        sAField.setEnabled(false);

        sAComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 : Admin", "1 : Mod", "2 : User", "--" }));
        sAComboBox.setSelectedIndex(3);
        sAComboBox.setToolTipText("");
        sAComboBox.setEnabled(false);
        sAComboBox.setName(""); // NOI18N
        sAComboBox.setNextFocusableComponent(sNField);
        sAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sAComboBoxActionPerformed(evt);
            }
        });

        sNField.setEditable(false);
        sNField.setNextFocusableComponent(sUField);
        sNField.setDocument(new JTextFieldLimit(30));
        sNField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sNFieldFocusGained(evt);
            }
        });

        changePasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        changePasswordLabel.setText("Click to change password");
        changePasswordLabel.setEnabled(false);
        changePasswordLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                changePasswordLabelMouseClicked(evt);
            }
        });

        changePasswordLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        changePasswordLabel2.setText(" ");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(editButton)
                        .addGap(5, 5, 5)
                        .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(L1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(changePasswordLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(changePasswordLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sNField)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                                .addComponent(sAField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sUField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spasswordMatch, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sUField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changePasswordLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changePasswordLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spasswordMatch)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(L5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(editButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(submitButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteButton))))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        tabs.addTab("Search", searchPanel);

        addPanel.setFocusable(false);

        L6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L6.setText("Username:");

        L7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L7.setText("Password:");

        L8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L8.setText("Access:");

        L9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L9.setText("Name:");

        L10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        L10.setText("Confirm:");

        aUField.setFocusCycleRoot(true);
        aUField.setNextFocusableComponent(apassField);
        aUField.setDocument(new JTextFieldLimit(30));
        aUField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aUFieldFocusGained(evt);
            }
        });
        aUField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aUFieldKeyPressed(evt);
            }
        });

        apassField.setNextFocusableComponent(aconfirmpassField);
        apassField.setDocument(new JTextFieldLimit(30));
        apassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                apassFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                apassFieldFocusLost(evt);
            }
        });
        apassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                apassFieldKeyReleased(evt);
            }
        });

        aconfirmpassField.setNextFocusableComponent(aAComboBox);
        aconfirmpassField.setDocument(new JTextFieldLimit(30));
        aconfirmpassField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aconfirmpassFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                aconfirmpassFieldFocusLost(evt);
            }
        });
        aconfirmpassField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aconfirmpassFieldKeyReleased(evt);
            }
        });

        passwordMatch.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        passwordMatch.setText(" ");

        aAField.setEditable(false);
        aAField.setBackground(new java.awt.Color(255, 255, 255));

        aAComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0 : Admin", "1 : Mod", "2 : User", "--" }));
        aAComboBox.setSelectedIndex(3);
        aAComboBox.setName(""); // NOI18N
        aAComboBox.setNextFocusableComponent(aNField);
        aAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aAComboBoxActionPerformed(evt);
            }
        });
        aAComboBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aAComboBoxKeyPressed(evt);
            }
        });

        aNField.setNextFocusableComponent(aUField);
        aNField.setDocument(new JTextFieldLimit(30));
        aNField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                aNFieldFocusGained(evt);
            }
        });
        aNField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                aNFieldKeyPressed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addButton)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(L7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L6, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(L8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(L9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aNField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                                    .addComponent(passwordMatch, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addGap(26, 26, 26))
                                .addComponent(aconfirmpassField, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(addPanelLayout.createSequentialGroup()
                                    .addComponent(aAField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(aAComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(apassField)
                                .addComponent(aUField)))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aUField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(L7)
                    .addComponent(apassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aconfirmpassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L10))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(passwordMatch)
                .addGap(13, 13, 13)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L8)
                    .addComponent(aAField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aNField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(L9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addButton)
                .addGap(23, 23, 23))
        );

        tabs.addTab("Add", addPanel);

        errLabel.setForeground(new java.awt.Color(255, 0, 0));
        errLabel.setText(" ");

        list.setModel(fillList());
        list.setFocusable(false);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(list);

        loginLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        loginLabel.setText(" ");

        adminLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear.png"))); // NOI18N
        adminLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                adminLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                adminLabelMouseExited(evt);
            }
        });

        file.setText("File");

        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        file.add(closeItem);

        logoutItem.setText("Logout");
        logoutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutItemActionPerformed(evt);
            }
        });
        file.add(logoutItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        file.add(exitItem);

        menubar.add(file);

        help.setText("Help");

        bugItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bug_PNG3980.png"))); // NOI18N
        bugItem.setText("Report a bug");
        bugItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugItemActionPerformed(evt);
            }
        });
        help.add(bugItem);

        suggestionItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear.png"))); // NOI18N
        suggestionItem.setText("Make a suggestion");
        suggestionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestionItemActionPerformed(evt);
            }
        });
        help.add(suggestionItem);

        menubar.add(help);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(errLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loginLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adminLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(adminLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loginLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(errLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Literally all event related methods Includes:
     *
     * Add, Submit, and Edit : calls outside methods
     * FormWindow events : closing, opening
     * ListClicked : searches for element that was clicked
     * KeyPressed : if enter was pressed, do a thing
     * MenuBar things : things in the menu bar (exit, close, logout, help, bug, etc)
     * ComboBox things : changes the fields when the combobox is changed
     * GainFocus : selects all text in the field when field gains focus
     * EnterKeyPressed : clicks a certain button when enter is pressed
     * ChangePassword : pops up a dialog box for the new password
     *
     * Note: Most of these just call external methods in the class
     */
    // <editor-fold defaultstate="collapsed" desc="Literally all event-related methods">  
    /**
     * Handles when the ADD button is pressed
     * Checks to see if all of the elements are kosher, then calls add()
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (Main.p.getAccess() == 0) {
            if (aCheck()) {
                add();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "403 : Forbidden\nAdministrator access only",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            setAddValuesToNull();
            aUField.requestFocus();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Handles when the window is closed
     * When the window is closed, call Main.closeAccountGUI()
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Main.CloseAccountGUI();
    }//GEN-LAST:event_formWindowClosed

    /**
     * Handles when the DELETE button is pressed
     * Pops up a confirmation window, then calls delete() if user wishes
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        // if they tried to delete themselves
        if (Main.p.getUsername().equals(sUField.getText())) {
            JOptionPane.showMessageDialog(this,
                    "403 : Forbidden\nAccount " + sUField.getText() + " is logged in.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            
        // make sure they're admin
        } else if (Main.p.getAccess() == 0) {
            int res = JOptionPane.showConfirmDialog(
                    null,
                    "Are you sure you want to delete user "
                    + sUField.getText() + "?",
                    "Confirm Deletion",
                    JOptionPane.YES_NO_OPTION);

            // do a thing based on response
            switch (res) {
                case 0:
                    delete();
                    break;
                default:
                // do nothing
                }
        
        // if they are not admin
        } else {
            JOptionPane.showMessageDialog(this,
                    "403 : Forbidden\nAdministrator access only",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            setAddValuesToNull();
            aUField.requestFocus();
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Handles when the SUBMIT button is pressed
     * Checks to see if all the modified elements are okay,
     * calls submit() if they are
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (sCheck()) {
            submit();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Handles when the EDIT button is pressed
     * IF you are editing your own account, call edit()
     * ELSE IF you are root account, call rootEdit()
     * ELSE pops up error dialog and returns
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        if (Main.p.getUsername().equals(sUField.getText())) {
            edit();
        } else if (Main.p.getUsername().equals("root")) {
            rootEdit();
        } else {
            JOptionPane.showMessageDialog(this,
                    "403 : Forbidden\n"
                    + "Edit usability restricted to own account",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Handles when the graphical list is clicked on
     * Basically just searches for the element that was clicked on
     */
    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if (!users.isEmpty()) {
            submitButton.setEnabled(false);
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);

            setSearchFieldsEditable(false);

            search(users.elementAt(list.getSelectedIndex()).username);
            tabs.setSelectedIndex(0);
        } else {
            // do nothing
            // it crashes otherwise
        }
    }//GEN-LAST:event_listMouseClicked

    /**
     * Handles when Enter was pressed while Username field (add) was in focus
     * If enter was pressed while Username field (add) was in focus, click the
     * add button
     */
    private void aUFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aUFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aUFieldKeyPressed

    /**
     * Handles when Enter was pressed while Access comboBox (add) was in focus
     * If enter was pressed while Access comboBox (add) was in focus, click the
     * add button
     */
    private void aAComboBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aAComboBoxKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aAComboBoxKeyPressed

    /**
     * Handles when Enter was pressed while Name field (add) was in focus
     * If enter was pressed while Name field (add) was in focus, click the add
     * button
     */
    private void aNFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aNFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        }
    }//GEN-LAST:event_aNFieldKeyPressed

    /**
     * Handles if user selects close current window option in the menu bar
     * Calls Main.CloseAccountGUI()
     */
    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        Main.CloseAccountGUI();
    }//GEN-LAST:event_closeItemActionPerformed

    /**
     * Handles if user selects logout option in the menu bar
     * Calls Main.Logout(), setting the user to null, as well as
     * Main.CloseAccountGUI()
     */
    private void logoutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutItemActionPerformed
        Main.Logout();
        Main.CloseAccountGUI();
        Main.CloseMainGUI();
    }//GEN-LAST:event_logoutItemActionPerformed

    /**
     * Handles if user selects exit option in the menu bar
     * Pops up a confirmation window, then exits the program if user wishes
     */
    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit WRAP?",
                "",
                JOptionPane.YES_NO_OPTION);

        // do a thing based on response
        switch (res) {
            case 0:
                System.exit(0);
                break;
            default:
            // do nothing
        }
    }//GEN-LAST:event_exitItemActionPerformed

    /**
     * Handles if user selects bug option in the menu bar
     * Calls LaunchBugReportGUI()
     */
    private void bugItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugItemActionPerformed
        Main.LaunchBugReportGUI();
    }//GEN-LAST:event_bugItemActionPerformed

    /**
     * Handles if the comboBox index is changed (Access for add)
     * Changes the field to match the changed index
     */
    private void sAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sAComboBoxActionPerformed
        switch (sAComboBox.getSelectedIndex()) {
            case 0:
                sAField.setText("Admin");
                break;
            case 1:
                sAField.setText("Mod");
                break;
            case 2:
                sAField.setText("User");
                break;
            case 3:
                sAField.setText("");
                break;
        }
    }//GEN-LAST:event_sAComboBoxActionPerformed

    /**
     * Handles if the comboBox index is changed (Access for search)
     * Changes the field to match the changed index
     */
    private void aAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aAComboBoxActionPerformed
        switch (aAComboBox.getSelectedIndex()) {
            case 0:
                aAField.setText("Admin");
                break;
            case 1:
                aAField.setText("Mod");
                break;
            case 2:
                aAField.setText("User");
                break;
            case 3:
                aAField.setText("");
                break;
        }
    }//GEN-LAST:event_aAComboBoxActionPerformed

    /**
     * Handles if key is pressed in the password fields (add)
     * If enter, click the add button
     * Else check to see if the passwords match
     */
    private void apassFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_apassFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        } else {
            aCheckPasswordMatch();
        }
    }//GEN-LAST:event_apassFieldKeyReleased

    /**
     * Handles if key is pressed in the password fields (add)
     * If enter, click the add button
     * Else check to see if the passwords match
     */
    private void aconfirmpassFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aconfirmpassFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addButton.doClick();
        } else {
            aCheckPasswordMatch();
        }
    }//GEN-LAST:event_aconfirmpassFieldKeyReleased

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sUFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sUFieldFocusGained
        sUField.selectAll();
    }//GEN-LAST:event_sUFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void sNFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sNFieldFocusGained
        sNField.selectAll();
    }//GEN-LAST:event_sNFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aUFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aUFieldFocusGained
        aUField.selectAll();
    }//GEN-LAST:event_aUFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void apassFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_apassFieldFocusGained
        apassField.selectAll();
        aCheckPasswordMatch();
    }//GEN-LAST:event_apassFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aconfirmpassFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aconfirmpassFieldFocusGained
        aconfirmpassField.selectAll();
        aCheckPasswordMatch();
    }//GEN-LAST:event_aconfirmpassFieldFocusGained

    /**
     * Handles if the field gains focus
     * Highlights the contents of the field
     */
    private void aNFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aNFieldFocusGained
        aNField.selectAll();
    }//GEN-LAST:event_aNFieldFocusGained

    /**
     * Handles if user selects suggestion option in the menu bar
     * Calls LaunchSuggestionReportGUI()
     */
    private void suggestionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestionItemActionPerformed
        Main.LaunchSuggestionReportGUI();
    }//GEN-LAST:event_suggestionItemActionPerformed

    /**
     * Handles when the form is loaded
     * Sets the text with the global user
     */
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loginLabel.setText("Logged in as " + Main.p.getUsername());
    }//GEN-LAST:event_formComponentShown

    /**
     * Handles when the user clicks on the "Change password" label
     * Calls changePassword() with parameter true
     */
    private void changePasswordLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changePasswordLabelMouseClicked
        if (changePasswordLabel.isEnabled()) {
            changePassword(true);
        }
    }//GEN-LAST:event_changePasswordLabelMouseClicked

    /**
     * Handles when the password textfield loses focus
     * If the next object in focus is confirm password, check for password match
     * Else set the text to nothing
     */
    private void apassFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_apassFieldFocusLost
        if (aconfirmpassField.hasFocus()) {
            aCheckPasswordMatch();
        } else if (!aconfirmpassField.hasFocus()) {
            passwordMatch.setText(" ");
        }
    }//GEN-LAST:event_apassFieldFocusLost

    /**
     * Handles when the confirm password textfield loses focus
     * If the next object in focus is password, check for password match
     * Else set the text to nothing
     */
    private void aconfirmpassFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_aconfirmpassFieldFocusLost
        if (apassField.hasFocus()) {
            aCheckPasswordMatch();
        } else if (!apassField.hasFocus()) {
            passwordMatch.setText(" ");
        }
    }//GEN-LAST:event_aconfirmpassFieldFocusLost

    private void adminLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLabelMouseClicked
        // probably some admin stuff
        JOptionPane.showMessageDialog(this, 
                "Probably some admin stuff here", 
                "Advanced", 
                JOptionPane.INFORMATION_MESSAGE);
                
    }//GEN-LAST:event_adminLabelMouseClicked

    private void adminLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLabelMouseEntered
        loginLabel.setText("Advanced options");
    }//GEN-LAST:event_adminLabelMouseEntered

    private void adminLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLabelMouseExited
        loginLabel.setText("Logged in as " + Main.p.getUsername());
    }//GEN-LAST:event_adminLabelMouseExited

    // </editor-fold>
    
    /**
     * fillList()
     *
     * Gets all of the users from IOController and shoves them into an array
     * Then it populates the DefaultListModel of ListElements from that array
     *
     * @return the DefaultListModel to populate the JList
     */
    public DefaultListModel fillList() {

        int total = IOController.getTotalUsers();       // get total
        Account[] str = IOController.getAllUsers();     // get users
        elements = new ListElement[total];              // create array of ListElements

        if (str != null && elements.length > 0) {
            // create the DefaultListModel elements
            for (int i = 0; i < total; i++) {
                elements[i] = new ListElement(str[i].getUsername(),
                        str[i].getPassword(),
                        str[i].getAccess(),
                        str[i].getName());
                // add it to the global list
                users.add(i, elements[i]);
            }
        }
        return users;
    }

    /**
     * updateList()
     *
     * Works with the global list of users, which updates the JList graphics
     *
     * @param action, the type of action (either add or remove)
     * @param element, the element to add or remove
     */
    public void updateList(int action, ListElement element) {
        switch (action) {
            case ADD:         // add
                users.add(users.getSize(), element);
                break;
            case REMOVE:      // remove
                users.remove(list.getSelectedIndex());
                break;
        }
    }

    /**
     * changePassword()
     *
     * Pops up a dialog box that prompts user for a new password, then a
     * confirmation of that password
     * If the passwords don't match, it calls itself again but with a label
     * that says "Passwords did not match"
     * If the passwords do match, it stores that new password globally
     *
     * @param b, the case of if the passwords matched or not, affects the label
     */
    public void changePassword(boolean b) {
        JTextField password = new JPasswordField();
        JTextField confirmPassword = new JPasswordField();
        Object[] message;

        // conditional that determines if the passwords matched
        if (b) {
            message = new Object[]{
                "Password:", password,
                "Confirm Password:", confirmPassword,
                " "
            };
        } else {
            message = new Object[]{
                "Password:", password,
                "Confirm Password:", confirmPassword,
                "Passwords did not match"
            };
        }

        // display the dialog
        int option = JOptionPane.showConfirmDialog(null, message, "Change password", JOptionPane.OK_CANCEL_OPTION);

        // if OK is pressed
        if (option == JOptionPane.OK_OPTION) {

            // if the passwords match
            if (password.getText().equals(confirmPassword.getText())) {

                // update graphics
                changePasswordLabel2.setForeground(Color.blue);
                changePasswordLabel2.setText("Password changed!");

                // set globals
                passwordChanged = true;
                passwordChangeTo = password.getText();

            } else {
                // passwords didn't match, try again
                changePassword(false);
            }
        } else {
            // canceled
        }
    }

    /**
     * confirmPassword()
     *
     * Pops up a dialog for confirmation of their old password after user clicks
     * submit
     * Checks the password user enters against the hashed password stored
     *
     * @param b
     * @return
     */
    public boolean confirmPassword(boolean b) {

        JTextField password = new JPasswordField();
        Object[] message;

        if (b) {
            message = new Object[]{
                "Enter your original password to confirm:",
                "Password:", password,
                " "};
        } else {
            message = new Object[]{
                "Enter your original password to confirm:",
                "Password:", password,
                "Invalid password"};
        }

        // display the dialog
        int option = JOptionPane.showConfirmDialog(null, message, "Confirm submission", JOptionPane.OK_CANCEL_OPTION);

        // if OK is pressed
        if (option == JOptionPane.OK_OPTION) {

            // if the passwords match
            if (IOController.checkPasswordForConfirmation(Main.p.getUsername(), password.getText())) {
                if (passwordChanged == false) {
                    passwordChangeTo = password.getText();
                } else {
                    // no change in passwords
                }
                return true;
            } else {
                // passwords didn't match
            }
        } else {
            // canceled
        }
        return false;
    }

    /**
     * add()
     *
     * If the fields are all valid, this method is called
     * Takes fields and creates Account and ListElement objects
     * Then it calls the AccountController to add the user
     * If the addition succeeds
     * Confirmation on errLabel, update the list, and update graphics
     * Else addition fails
     * Means that the username is already taken, display error on errLabel
     *
     * Also does not allow any addition unless your access level is 0 (admin)
     */
    public void add() {

        // create account and listelement objects
        String username = aUField.getText();
        String password = apassField.getText();
        String name = aNField.getText();
        String access = String.valueOf(aAComboBox.getSelectedIndex());

        Account p = new Account(username, password, Integer.valueOf(access), name);
        ListElement element = new ListElement(username, password, Integer.valueOf(access), name);

        // if addition was successful
        if (AccountController.AddUser(p)) {
            // errLabel
            errLabel.setForeground(Color.blue);
            errLabel.setText("User added successfully");

            // update the list
            updateList(ADD, element);

            // update graphics
            setAddValuesToNull();
            aUField.requestFocus();

        } else {
            // errLabel
            errLabel.setForeground(Color.red);
            errLabel.setText("Username already taken");
        }
    }

    /**
     * search()
     *
     * Calls the SearchUser method from AccountController,
     * which returns a valid account
     * Update the graphics with the account credentials
     *
     * @param username, the username to search
     */
    public void search(String username) {

        // SearchUser()
        Account p = AccountController.SearchUser(username);

        // update graphics
        errLabel.setText(" ");
        editButton.setEnabled(true);
        deleteButton.setEnabled(true);
        setSearchFieldsToValid();

        // display account credentials
        sUField.setText(p.getUsername());
        sAField.setText(String.valueOf(p.getAccess()));
        sAComboBox.setSelectedIndex(p.getAccess());
        sNField.setText(p.getName());
    }

    /**
     * delete()
     *
     * Creates an account with the fields given
     * Then call DeleteUser() from AccountController
     * If success, confirm on errLabel
     */
    public void delete() {

        // create new Account
        Account p = new Account(sUField.getText(),
                null,
                sAComboBox.getSelectedIndex(),
                sNField.getText());

        // call DeleteUser()
        if (AccountController.DeleteUser(p.getUsername())) {
            ListElement element = new ListElement(p.getUsername(),
                    p.getPassword(),
                    p.getAccess(),
                    p.getName());
            updateList(REMOVE, element);

            // errLabel
            errLabel.setForeground(Color.blue);
            errLabel.setText("User deleted successfully");

            // update graphics
            setSearchValuesToNull();
            setSearchFieldsEditable(false);
            deleteButton.setEnabled(false);
            editButton.setEnabled(false);
            submitButton.setEnabled(false);
        } else {
            errLabel.setForeground(Color.red);
            errLabel.setText("User not deleted successfully");
        }

    }

    /**
     * edit()
     *
     * Basically just sets the fields to editable
     * Stores a temporary global account, used in the editing process in submit()
     */
    public void edit() {

        // create the temp Account
        String username = sUField.getText();
        String password = Main.p.getPassword();
        String access = String.valueOf(sAComboBox.getSelectedIndex());
        String name = sNField.getText();
        temp = new Account(username, password, Integer.valueOf(access), name);

        // graphics update
        setSearchFieldsEditable(true);
        submitButton.setEnabled(true);
        editButton.setEnabled(false);
        deleteButton.setEnabled(false);

    }

    /**
     * rootEdit() {
     *
     * Allows the root account to change the access level of any account
     * That's pretty much it
     */
    public void rootEdit() {
        tempAccess = String.valueOf(sAComboBox.getSelectedIndex());
        sAComboBox.setEnabled(true);
        sAField.setBackground(Color.white);

        changePasswordLabel.setEnabled(true);
        submitButton.setEnabled(true);
        editButton.setEnabled(false);
        deleteButton.setEnabled(false);
    }

    /**
     * rootSubmit()
     *
     * Allows the root account to change the access level of any account
     * That's pretty much it
     */
    public void rootSubmit() {
        
        // get the username from the field
        String username = sUField.getText();
        
        // manual error checking
        if (sAComboBox.getSelectedIndex() == 3) {
            JOptionPane.showMessageDialog(this,
                    "Access field invalid",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        } else {
            String newAccess = String.valueOf(sAComboBox.getSelectedIndex());
            if (IOController.changeAccountAccess(username, tempAccess, newAccess)) {

                // graphics update
                setSearchFieldsEditable(false);

                // update the list
                ListElement q = new ListElement(username, "whoop", Integer.valueOf(newAccess), sNField.getText());
                updateList(REMOVE, null);
                updateList(ADD, q);

                // update graphics
                deleteButton.setEnabled(false);
                editButton.setEnabled(false);
                submitButton.setEnabled(false);
                changePasswordLabel.setEnabled(false);

                // sends the updated account to the end of the list, then
                // selets it
                list.setSelectedIndex(list.getLastVisibleIndex());
                search(users.getElementAt(users.getSize() - 1).username);
            }

        }
    }

    /**
     * submit()
     *
     * Prompts user for their old password for confirmation
     * Also checks if the user is trying to delete themselves, which won't
     * work because, you know, logic
     * Takes the new input as parameters for a new Account object
     * Then it deletes the old account, then adds the new one (in that order)
     * If success, update the graphics
     * If failure, return and update graphics
     */
    public void submit() {

        // if the username is NOT root
        if (!Main.p.getUsername().equals("root")) {

            // if the user tries to change theirselves in access level (no)
            if (sAComboBox.getSelectedIndex() != temp.getAccess()) {
                JOptionPane.showMessageDialog(this,
                        "403 : Forbidden\nAccess cannot be changed",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // if the confirm password matches the one on file
            if (confirmPassword(true)) {

                setSearchFieldsEditable(false);

                // create new account object
                String username = sUField.getText();
                String password = passwordChangeTo;
                String access = String.valueOf(sAComboBox.getSelectedIndex());
                String name = sNField.getText();
                Account p = new Account(username, password, Integer.valueOf(access), name);

                // delete old, then add new
                if (AccountController.DeleteUser(temp.getUsername()) && AccountController.AddUser(p)) {
                    errLabel.setForeground(Color.blue);
                    errLabel.setText("Account edited successfully");

                    AccountController.DeleteUser(temp.getUsername());
                    AccountController.AddUser(p);

                    ListElement t = new ListElement(temp.getUsername(), temp.getPassword(),
                            temp.getAccess(), temp.getName());
                    ListElement q = new ListElement(username, password, Integer.valueOf(access), name);

                    updateList(REMOVE, t);
                    updateList(ADD, q);
                } else {
                    errLabel.setForeground(Color.red);
                    errLabel.setText("Error submitting account");
                }

                // update the global account
                Main.p.setUsername(username);
                Main.p.setPassword(password);
                Main.p.setAccess(sAComboBox.getSelectedIndex());
                Main.p.setName(name);

                // update the login label
                loginLabel.setText("Logged in as " + Main.p.getUsername());

                // update graphics
                deleteButton.setEnabled(false);
                editButton.setEnabled(false);
                submitButton.setEnabled(false);
                changePasswordLabel.setEnabled(false);

                passwordChangeTo = "";
                changePasswordLabel2.setText(" ");
                list.setSelectedIndex(list.getLastVisibleIndex());
                search(users.getElementAt(users.getSize() - 1).username);
            } else {
                // error with confirmPassword
            }

            // if user is is root
        } else {
            rootSubmit();
        }
    }

    /**
     * aCheck()
     *
     * Checks the add panel and makes sure all the fields are kosher
     * See comments in each block for details on each element
     * First, it "resets" by making all fields foregrounds black
     * Then it checks each individual field, and sets the foreground red if the field has an error
     * If it returns a true flag, there is no error
     * It calls the setAddErrLabel to find the individual errors and updates errLabel
     *
     * @return flag, the conditional to show if the fields are valid
     */
    public boolean aCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        asetAllForeground(Color.black);

        // Username
        // if it is either nothing or default, throw error
        // if it contains separator character, throw error
        if (aUField.getText().equals("") || aUField.getText().equals("--")) {
            flag = false;
            aUField.setText("--");
            aUField.setForeground(Color.red);
        } else if (!Util.sepCheck(aUField.getText())) {
            flag = false;
            aUField.setForeground(Color.red);
        }

        // Password
        // if it is nothing, throw error
        // if it contains separator character, throw error
        if (apassField.getText().equals("") && aconfirmpassField.getText().equals("")) {
            flag = false;
            apassField.setForeground(Color.red);
            aconfirmpassField.setForeground(Color.red);
        } else if (!apasswordsMatch) {
            flag = false;
            apassField.setForeground(Color.red);
            aconfirmpassField.setForeground(Color.red);
        } else if (!Util.sepCheck(apassField.getText())) {
            flag = false;
            apassField.setForeground(Color.red);
            aconfirmpassField.setForeground(Color.red);
        }

        // Access
        // if the box is on the default index, throw error
        if (aAComboBox.getSelectedIndex() == 3) {
            flag = false;
            aAComboBox.setForeground(Color.red);
        }

        // Name
        // if it is either nothing or the default, throw error
        if (aNField.getText().equals("") || aNField.getText().equals("--")) {
            flag = false;
            aNField.setText("--");
            aNField.setForeground(Color.red);
        }

        setAddErrLabel();
        return flag;
    }

    /**
     * sCheck()
     *
     * Checks the search panel and makes sure all the fields are kosher
     * See comments in function for details on each element
     * First, it "resets" by making all fields foregrounds black
     * Then it checks each individual field, and sets the foreground red if the field has an error
     * If it returns a true flag, there is no error
     * It calls the setAddErrLabel to find the individual errors and updates errLabel
     *
     * UPDATE: Now when changing your anything, it prompts you for your og
     * password
     *
     * @return flag, the conditional to show if the fields are valid
     */
    public boolean sCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        ssetAllForeground(Color.black);

        // Username
        // if it is either nothing or default, throw error
        // if it contains separator character, throw error
        if (sUField.getText().equals("") || sUField.getText().equals("--")) {
            flag = false;
            sUField.setText("--");
            sUField.setForeground(Color.red);
        } else if (!Util.sepCheck(sUField.getText())) {
            flag = false;
            sUField.setForeground(Color.red);
        }

        // Access
        // if the box is on the default index, throw error
        if (sAComboBox.getSelectedIndex() == 3) {
            flag = false;
            sAComboBox.setForeground(Color.red);
        }

        // Name
        // if it is either nothing or the default, throw error
        if (sNField.getText().equals("") || sNField.getText().equals("--")) {
            flag = false;
            sNField.setText("--");
            sNField.setForeground(Color.red);
        }

        setSearchErrLabel();
        return flag;
    }

    /**
     * setAddErrLabel()
     *
     * Has an error count to find the total number of errors
     * Basically just sees if the foregrounds of each field is red
     * If they are, add 1 to count
     * It's in reverse so it starts with the top most field
     * Example: "Error with access field and 1 other(s)"
     */
    public void setAddErrLabel() {
        int errCount = 0;   // number of errors
        String err = "";    // err, instantiated it to null to add to it later

        // name field
        if (aNField.getForeground() == Color.red) {
            errCount++;
            err = "Error with name field";
        }

        // access field
        if (aAComboBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with access field";
        }

        // passwords field
        if (apassField.getForeground() == Color.red
                && aconfirmpassField.getForeground() == Color.red) {
            errCount++;
            err = "Error with password field(s)";
        }

        // username field
        if (aUField.getForeground() == Color.red) {
            errCount++;
            err = "Error with username field";
        }

        // if the count is over 1, get the top most error and add "and # other(s)"
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");

            // else if error count is only 1, display the only error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
    }

    /**
     * setSeachErrLabel()
     *
     * Has an error count to find the total number of errors
     * Basically just sees if the foregrounds of each field is red
     * If they are, add 1 to count
     * It's in reverse so it starts with the top most field
     * Example: "Error with access field and 1 other(s)"
     */
    public void setSearchErrLabel() {
        int errCount = 0;   // number of errors
        String err = "";    // err, instantiated it to null to add to it later

        // name field
        if (sNField.getForeground() == Color.red) {
            errCount++;
            err = "Error with name field";
        }

        // access field
        if (sAComboBox.getForeground() == Color.red) {
            errCount++;
            err = "Error with access field";
        }

        // username field
        if (sUField.getForeground() == Color.red) {
            errCount++;
            err = "Error with username field";
        }

        // if the count is over 1, get the top most error and add "and # other(s)"
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");

            // else if error count is only 1, display the only error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
    }

    /**
     * asetAllForeground()
     *
     * Graphics update
     * Just sets the foreground of all fields on add panel to a color
     *
     * @param c, the color to change the fields to
     */
    public void asetAllForeground(Color c) {
        aAComboBox.setForeground(c);
        aNField.setForeground(c);
        aUField.setForeground(c);
        apassField.setForeground(c);
        aconfirmpassField.setForeground(c);
    }

    /**
     * ssetAllForeground()
     *
     * Graphics update
     * Just sets the foreground of all fields on search panel to a color
     *
     * @param c, the color to change the fields to
     */
    public void ssetAllForeground(Color c) {
        sAComboBox.setForeground(c);
        sNField.setForeground(c);
        sUField.setForeground(c);
    }

    /**
     * aCheckPasswordMatch()
     *
     * Checks to see if the password in first field matches the password in the
     * confirm field on every key release
     */
    public void aCheckPasswordMatch() {
        if (apassField.getText().equals(aconfirmpassField.getText())
                && (!apassField.getText().equals("")
                && !aconfirmpassField.getText().equals(""))) {
            passwordMatch.setForeground(Color.blue);
            passwordMatch.setText("Passwords match!");
            apasswordsMatch = true;
        } else {
            passwordMatch.setForeground(Color.red);
            passwordMatch.setText("Passwords don't match!");
            apasswordsMatch = false;
        }
    }

    /**
     * setAddValuesToNull()
     *
     * Graphics update
     * Sets all fields in add panel to blank values
     */
    public void setAddValuesToNull() {
        aUField.setText("");
        apassField.setText("");
        aconfirmpassField.setText("");
        aNField.setText("");
        passwordMatch.setText(" ");
        aAComboBox.setSelectedIndex(3);
    }

    /**
     * setSearchValuesToNull()
     *
     * Graphics update
     * Sets all fields in search panel to blank values
     */
    public void setSearchValuesToNull() {
        sUField.setText("");
        spasswordMatch.setText(" ");
        sAComboBox.setSelectedIndex(3);
        sAField.setText("");
        sNField.setText("");

        sUField.setBackground(new Color(240, 240, 240));
        sAField.setBackground(new Color(240, 240, 240));
        sNField.setBackground(new Color(240, 240, 240));
    }

    /**
     * setSearchFieldsToValid()
     *
     * Graphics update
     * Sets all fields in search panel to valid
     */
    public void setSearchFieldsToValid() {
        sAField.setEnabled(true);
        sUField.setBackground(Color.white);
        sAField.setBackground(Color.white);
        sNField.setBackground(Color.white);
    }

    /**
     * setSearchFieldsEditable()
     *
     * Graphics update
     * Sets all fields in search panel to editable
     *
     * @param b, the condition of editable
     */
    public void setSearchFieldsEditable(boolean b) {
        sUField.setEditable(b);
        sAComboBox.setEnabled(b);
        sNField.setEditable(b);
        changePasswordLabel.setEnabled(b);
    }

    /**
     * main()
     *
     * You already know what main is if you're reading this
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AccountGUI().setVisible(true);
        });
    }

    // I'll modify what I want
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel L1;
    private javax.swing.JLabel L10;
    private javax.swing.JLabel L4;
    private javax.swing.JLabel L5;
    private javax.swing.JLabel L6;
    private javax.swing.JLabel L7;
    private javax.swing.JLabel L8;
    private javax.swing.JLabel L9;
    private javax.swing.JComboBox<String> aAComboBox;
    private javax.swing.JTextField aAField;
    private javax.swing.JTextField aNField;
    private javax.swing.JTextField aUField;
    private javax.swing.JPasswordField aconfirmpassField;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JLabel adminLabel;
    private javax.swing.JPasswordField apassField;
    private javax.swing.JMenuItem bugItem;
    private javax.swing.JLabel changePasswordLabel;
    private javax.swing.JLabel changePasswordLabel2;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel errLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JList<String> list;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JMenuItem logoutItem;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JLabel passwordMatch;
    private javax.swing.JComboBox<String> sAComboBox;
    private javax.swing.JTextField sAField;
    private javax.swing.JTextField sNField;
    private javax.swing.JTextField sUField;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel spasswordMatch;
    private javax.swing.JButton submitButton;
    private javax.swing.JMenuItem suggestionItem;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
} // End AccountGUI
