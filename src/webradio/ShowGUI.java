/**
 * File: ShowGUI.java
 * Desc: Sends input to ShowController and handles all the GUI related events
 *
 * Author: Pat Ripley
 */

package webradio;

import java.awt.Color;
import javax.swing.DefaultListModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

public class ShowGUI extends javax.swing.JFrame {

    /**
     * Minor inner class used to create the options in the host comboboxes
     */
    // <editor-fold defaultstate="collapsed" desc="ComboBoxElement">
    public class ComboBoxElement {

        String fName, lName, id;

        public ComboBoxElement(String fName, String lName, String id) {
            this.fName = fName;
            this.lName = lName;
            this.id = id;
        }

        public ComboBoxElement() {
            this.fName = "--";
        }

        @Override
        public String toString() {
            if (!fName.equals("--")) {
                return lName + ", " + fName;
            } else {
                return "--";
            }
        }
    }
    // </editor-fold>

    /**
     * Minor inner class used to create the list on the right side of the panel
     */
    // <editor-fold defaultstate="collapsed" desc="ListElement">
    public class ListElement {

        String name;

        public ListElement(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return name;
        }
    }
    // </editor-fold>

    /**
     * Minor inner class used to limit th amount of text in a text field
     */
    // <editor-fold defaultstate="collapsed" desc="JTextFieldLimit">
    class JTextFieldLimit extends PlainDocument {

        private final int limit;

        JTextFieldLimit(int limit) {
            super();
            this.limit = limit;
        }

        JTextFieldLimit(int limit, boolean upper) {
            super();
            this.limit = limit;
        }

        @Override
        public void insertString(int offset, String str, AttributeSet attr) throws BadLocationException {
            if (str == null) {
                return;
            }

            if ((getLength() + str.length()) <= limit) {
                super.insertString(offset, str, attr);
            }
        }
    }
    // </editor-fold>

    // globals
    Show temp;
    DefaultListModel<ListElement> shows = new DefaultListModel<>();
    DefaultComboBoxModel<ComboBoxElement> profiles = new DefaultComboBoxModel();
    ListElement[] elements;
    ComboBoxElement[] cbElements;
    
    int numProfiles = IOController.getTotalProfiles();

    private static final int ADD = 0;
    private static final int REMOVE = 1;

    /** Creates new form ShowGUI */
    public ShowGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabs = new javax.swing.JTabbedPane();
        searchPanel = new javax.swing.JPanel();
        sl1 = new javax.swing.JLabel();
        sl2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        sNameField = new javax.swing.JTextField();
        sSP = new javax.swing.JScrollPane();
        sDescField = new javax.swing.JTextArea();
        sSMField = new javax.swing.JTextField();
        sDayTimePanel = new javax.swing.JPanel();
        sl3 = new javax.swing.JLabel();
        sl4 = new javax.swing.JLabel();
        sl5 = new javax.swing.JLabel();
        sl6 = new javax.swing.JLabel();
        sShowNumSpinner = new javax.swing.JSpinner();
        sDayBox1 = new javax.swing.JComboBox<>();
        sStartBox1 = new javax.swing.JComboBox<>();
        sEndBox1 = new javax.swing.JComboBox<>();
        sDayBox2 = new javax.swing.JComboBox<>();
        sStartBox2 = new javax.swing.JComboBox<>();
        sEndBox2 = new javax.swing.JComboBox<>();
        sDayBox3 = new javax.swing.JComboBox<>();
        sStartBox3 = new javax.swing.JComboBox<>();
        sEndBox3 = new javax.swing.JComboBox<>();
        sDayBox4 = new javax.swing.JComboBox<>();
        sStartBox4 = new javax.swing.JComboBox<>();
        sEndBox4 = new javax.swing.JComboBox<>();
        sDayBox5 = new javax.swing.JComboBox<>();
        sStartBox5 = new javax.swing.JComboBox<>();
        sEndBox5 = new javax.swing.JComboBox<>();
        sDayBox6 = new javax.swing.JComboBox<>();
        sStartBox6 = new javax.swing.JComboBox<>();
        sEndBox6 = new javax.swing.JComboBox<>();
        sDayBox7 = new javax.swing.JComboBox<>();
        sStartBox7 = new javax.swing.JComboBox<>();
        sEndBox7 = new javax.swing.JComboBox<>();
        sHostPanel = new javax.swing.JPanel();
        sHostNumSpinner = new javax.swing.JSpinner();
        sl7 = new javax.swing.JLabel();
        sHost1 = new javax.swing.JComboBox<>();
        sHost2 = new javax.swing.JComboBox<>();
        sHost3 = new javax.swing.JComboBox<>();
        sHost4 = new javax.swing.JComboBox<>();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        addPanel = new javax.swing.JPanel();
        al1 = new javax.swing.JLabel();
        al2 = new javax.swing.JLabel();
        aNameField = new javax.swing.JTextField();
        aSP = new javax.swing.JScrollPane();
        aDescField = new javax.swing.JTextArea();
        aSMField = new javax.swing.JTextField();
        aDayTimePanel = new javax.swing.JPanel();
        al3 = new javax.swing.JLabel();
        al4 = new javax.swing.JLabel();
        al5 = new javax.swing.JLabel();
        al6 = new javax.swing.JLabel();
        aShowNumSpinner = new javax.swing.JSpinner();
        aDayBox1 = new javax.swing.JComboBox<>();
        aStartBox1 = new javax.swing.JComboBox<>();
        aEndBox1 = new javax.swing.JComboBox<>();
        aDayBox2 = new javax.swing.JComboBox<>();
        aStartBox2 = new javax.swing.JComboBox<>();
        aEndBox2 = new javax.swing.JComboBox<>();
        aDayBox3 = new javax.swing.JComboBox<>();
        aStartBox3 = new javax.swing.JComboBox<>();
        aEndBox3 = new javax.swing.JComboBox<>();
        aDayBox4 = new javax.swing.JComboBox<>();
        aStartBox4 = new javax.swing.JComboBox<>();
        aEndBox4 = new javax.swing.JComboBox<>();
        aDayBox5 = new javax.swing.JComboBox<>();
        aStartBox5 = new javax.swing.JComboBox<>();
        aEndBox5 = new javax.swing.JComboBox<>();
        aDayBox6 = new javax.swing.JComboBox<>();
        aStartBox6 = new javax.swing.JComboBox<>();
        aEndBox6 = new javax.swing.JComboBox<>();
        aDayBox7 = new javax.swing.JComboBox<>();
        aStartBox7 = new javax.swing.JComboBox<>();
        aEndBox7 = new javax.swing.JComboBox<>();
        aHostPanel = new javax.swing.JPanel();
        aHostNumSpinner = new javax.swing.JSpinner();
        al7 = new javax.swing.JLabel();
        aHost1 = new javax.swing.JComboBox<>();
        aHost2 = new javax.swing.JComboBox<>();
        aHost3 = new javax.swing.JComboBox<>();
        aHost4 = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        scrollpane = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        loginLabel = new javax.swing.JLabel();
        adminLabel = new javax.swing.JLabel();
        errLabel = new javax.swing.JLabel();
        menubar = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        closeItem = new javax.swing.JMenuItem();
        logoutItem = new javax.swing.JMenuItem();
        exitItem = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        helpItem = new javax.swing.JMenuItem();
        bugItem = new javax.swing.JMenuItem();
        suggestionItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("W.R.A.P. - Shows");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        sl1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        sl1.setText("Show Name:");

        sl2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        sl2.setText("Description:");

        jLabel1.setText("Primary SM:");

        sNameField.setEditable(false);
        sNameField.setEnabled(false);

        sSP.setEnabled(false);

        sDescField.setEditable(false);
        sDescField.setBackground(new java.awt.Color(240, 240, 240));
        sDescField.setColumns(20);
        sDescField.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        sDescField.setLineWrap(true);
        sDescField.setRows(5);
        sDescField.setWrapStyleWord(true);
        sDescField.setEnabled(false);
        sSP.setViewportView(sDescField);

        sSMField.setEnabled(false);

        sDayTimePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sDayTimePanel.setEnabled(false);

        sl3.setText("How many shows per week:");

        sl4.setText("Day:");

        sl5.setText("Start time:");

        sl6.setText("End time:");

        sShowNumSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));
        sShowNumSpinner.setEnabled(false);
        sShowNumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sShowNumSpinnerStateChanged(evt);
            }
        });

        sDayBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox1.setEnabled(false);

        sStartBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox1.setEnabled(false);

        sEndBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox1.setEnabled(false);

        sDayBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox2.setEnabled(false);

        sStartBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox2.setEnabled(false);

        sEndBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox2.setEnabled(false);

        sDayBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox3.setEnabled(false);

        sStartBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox3.setEnabled(false);

        sEndBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox3.setEnabled(false);

        sDayBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox4.setEnabled(false);

        sStartBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox4.setEnabled(false);

        sEndBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox4.setEnabled(false);

        sDayBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox5.setEnabled(false);

        sStartBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox5.setEnabled(false);

        sEndBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox5.setEnabled(false);

        sDayBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox6.setEnabled(false);

        sStartBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox6.setEnabled(false);

        sEndBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox6.setEnabled(false);

        sDayBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        sDayBox7.setEnabled(false);

        sStartBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sStartBox7.setEnabled(false);

        sEndBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        sEndBox7.setEnabled(false);

        javax.swing.GroupLayout sDayTimePanelLayout = new javax.swing.GroupLayout(sDayTimePanel);
        sDayTimePanel.setLayout(sDayTimePanelLayout);
        sDayTimePanelLayout.setHorizontalGroup(
            sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sDayTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sDayTimePanelLayout.createSequentialGroup()
                        .addComponent(sl3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sShowNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(sDayTimePanelLayout.createSequentialGroup()
                        .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sDayBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sDayBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sDayBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sDayBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sDayBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(sDayBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sDayBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(sl4))
                        .addGap(18, 18, 18)
                        .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sStartBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sStartBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sStartBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sStartBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sStartBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sStartBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sStartBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sl5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sl6)
                            .addComponent(sEndBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sEndBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        sDayTimePanelLayout.setVerticalGroup(
            sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sDayTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sl3)
                    .addComponent(sShowNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sl4)
                    .addComponent(sl5)
                    .addComponent(sl6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sDayBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sStartBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sEndBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sHostPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        sHostPanel.setEnabled(false);

        sHostNumSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 4, 1));
        sHostNumSpinner.setEnabled(false);
        sHostNumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sHostNumSpinnerStateChanged(evt);
            }
        });

        sl7.setText("Number of hosts:");

        sHost1.setEnabled(false);
        DefaultComboBoxModel sHost1model = new DefaultComboBoxModel(getProfiles());
        sHost1.setModel(sHost1model);

        sHost2.setEnabled(false);
        DefaultComboBoxModel sHost2model = new DefaultComboBoxModel(getProfiles());
        sHost2.setModel(sHost2model);

        sHost3.setEnabled(false);
        DefaultComboBoxModel sHost3model = new DefaultComboBoxModel(getProfiles());
        sHost3.setModel(sHost3model);

        sHost4.setEnabled(false);
        DefaultComboBoxModel sHost4model = new DefaultComboBoxModel(getProfiles());
        sHost4.setModel(sHost4model);

        javax.swing.GroupLayout sHostPanelLayout = new javax.swing.GroupLayout(sHostPanel);
        sHostPanel.setLayout(sHostPanelLayout);
        sHostPanelLayout.setHorizontalGroup(
            sHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sHostPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sHost1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sHost4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sHost3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sHostPanelLayout.createSequentialGroup()
                        .addComponent(sl7, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sHostNumSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE))
                    .addComponent(sHost2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        sHostPanelLayout.setVerticalGroup(
            sHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sHostPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sHostNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sl7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sHost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sHost2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sHost3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sHost4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sHost1.setSelectedIndex(numProfiles);
        sHost2.setSelectedIndex(numProfiles);
        sHost3.setSelectedIndex(numProfiles);
        sHost4.setSelectedIndex(numProfiles);

        editButton.setText("Edit");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        submitButton.setText("Submit");
        submitButton.setEnabled(false);
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addComponent(sDayTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(searchPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(submitButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(sHostPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sl1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sl2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sNameField)
                            .addComponent(sSP)
                            .addComponent(sSMField))))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sl1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sl2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sSMField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addComponent(sHostPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitButton))
                    .addComponent(sDayTimePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabs.addTab("Search", searchPanel);

        al1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        al1.setText("Show Name:");

        al2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        al2.setText("Description:");

        aSP.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        aSP.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        aDescField.setColumns(20);
        aDescField.setRows(5);
        aSP.setViewportView(aDescField);

        aDayTimePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        al3.setText("How many shows per week:");

        al4.setText("Day:");

        al5.setText("Start time:");

        al6.setText("End time:");

        aShowNumSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 7, 1));
        aShowNumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aShowNumSpinnerStateChanged(evt);
            }
        });

        aDayBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox1.setEnabled(false);

        aStartBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox1.setEnabled(false);

        aEndBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox1.setEnabled(false);

        aDayBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox2.setEnabled(false);

        aStartBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox2.setEnabled(false);

        aEndBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox2.setEnabled(false);

        aDayBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox3.setEnabled(false);

        aStartBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox3.setEnabled(false);

        aEndBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox3.setEnabled(false);

        aDayBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox4.setEnabled(false);

        aStartBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox4.setEnabled(false);

        aEndBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox4.setEnabled(false);

        aDayBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox5.setEnabled(false);

        aStartBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox5.setEnabled(false);

        aEndBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox5.setEnabled(false);

        aDayBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox6.setEnabled(false);

        aStartBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox6.setEnabled(false);

        aEndBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox6.setEnabled(false);

        aDayBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" }));
        aDayBox7.setEnabled(false);

        aStartBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aStartBox7.setEnabled(false);

        aEndBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--", "6:00am", "6:30am", "7:00am", "7:30am", "8:00am", "8:30am", "9:00am", "9:30am", "10:00am", "10:30am", "11:00am", "11:30am", "12:00pm", "12:30pm", "1:00pm", "1:30pm", "2:00pm", "2:30pm", "3:00pm", "3:30pm", "4:00pm", "4:30pm", "5:00pm", "5:30pm", "6:00pm", "6:30pm", "7:00pm", "7:30pm", "8:00pm", "8:30pm", "9:00pm", "9:30pm", "10:00pm", "10:30pm", "11:00pm", "11:30pm", "12:00am" }));
        aEndBox7.setEnabled(false);

        javax.swing.GroupLayout aDayTimePanelLayout = new javax.swing.GroupLayout(aDayTimePanel);
        aDayTimePanel.setLayout(aDayTimePanelLayout);
        aDayTimePanelLayout.setHorizontalGroup(
            aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aDayTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(aDayTimePanelLayout.createSequentialGroup()
                        .addComponent(al3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aShowNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(aDayTimePanelLayout.createSequentialGroup()
                        .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aDayBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aDayBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aDayBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aDayBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aDayBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(aDayBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(aDayBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(al4))
                        .addGap(18, 18, 18)
                        .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aStartBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aStartBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aStartBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aStartBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aStartBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aStartBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aStartBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(al5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(al6)
                            .addComponent(aEndBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aEndBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aEndBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aEndBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aEndBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aEndBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(aEndBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        aDayTimePanelLayout.setVerticalGroup(
            aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aDayTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(al3)
                    .addComponent(aShowNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(al4)
                    .addComponent(al5)
                    .addComponent(al6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(aDayTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aDayBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aStartBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(aEndBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aHostPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        aHostNumSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 4, 1));
        aHostNumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                aHostNumSpinnerStateChanged(evt);
            }
        });

        al7.setText("Number of hosts:");

        aHost1.setEnabled(false);
        DefaultComboBoxModel aHost1model = new DefaultComboBoxModel(getProfiles());
        aHost1.setModel(aHost1model);

        aHost2.setEnabled(false);
        DefaultComboBoxModel aHost2model = new DefaultComboBoxModel(getProfiles());
        aHost2.setModel(aHost2model);

        aHost3.setEnabled(false);
        DefaultComboBoxModel aHost3model = new DefaultComboBoxModel(getProfiles());
        aHost3.setModel(aHost3model);

        aHost4.setEnabled(false);
        DefaultComboBoxModel aHost4model = new DefaultComboBoxModel(getProfiles());
        aHost4.setModel(aHost4model);

        javax.swing.GroupLayout aHostPanelLayout = new javax.swing.GroupLayout(aHostPanel);
        aHostPanel.setLayout(aHostPanelLayout);
        aHostPanelLayout.setHorizontalGroup(
            aHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aHostPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aHost1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aHost4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(aHost3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, aHostPanelLayout.createSequentialGroup()
                        .addComponent(al7, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aHostNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(aHost2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        aHostPanelLayout.setVerticalGroup(
            aHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aHostPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(aHostPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aHostNumSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(al7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aHost1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aHost2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aHost3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aHost4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aHost1.setSelectedIndex(numProfiles);
        aHost2.setSelectedIndex(numProfiles);
        aHost3.setSelectedIndex(numProfiles);
        aHost4.setSelectedIndex(numProfiles);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Primary SM:");

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addComponent(aDayTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aHostPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPanelLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(addButton))))
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(al2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(al1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(aSMField)
                            .addComponent(aNameField)
                            .addComponent(aSP))))
                .addContainerGap())
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(al1)
                    .addComponent(aNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(al2)
                    .addComponent(aSP, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aSMField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addComponent(aHostPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton))
                    .addComponent(aDayTimePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        tabs.addTab("Add", addPanel);

        list.setModel(fillList());
        list.setFocusable(false);
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        scrollpane.setViewportView(list);

        loginLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        loginLabel.setText(" ");

        adminLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear.png"))); // NOI18N
        adminLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                adminLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                adminLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                adminLabelMouseExited(evt);
            }
        });

        errLabel.setText(" ");

        file.setText("File");

        closeItem.setText("Close");
        closeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemActionPerformed(evt);
            }
        });
        file.add(closeItem);

        logoutItem.setText("Logout");
        logoutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutItemActionPerformed(evt);
            }
        });
        file.add(logoutItem);

        exitItem.setText("Exit");
        exitItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitItemActionPerformed(evt);
            }
        });
        file.add(exitItem);

        menubar.add(file);

        help.setText("Help");

        helpItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/question.png"))); // NOI18N
        helpItem.setText("Open Help...");
        helpItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpItemActionPerformed(evt);
            }
        });
        help.add(helpItem);

        bugItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bug_PNG3980.png"))); // NOI18N
        bugItem.setText("Report a bug");
        bugItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bugItemActionPerformed(evt);
            }
        });
        help.add(bugItem);

        suggestionItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gear.png"))); // NOI18N
        suggestionItem.setText("Make a suggestion");
        suggestionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestionItemActionPerformed(evt);
            }
        });
        help.add(suggestionItem);

        menubar.add(help);

        setJMenuBar(menubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(errLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(loginLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(adminLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(scrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(loginLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(adminLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollpane))
                    .addComponent(tabs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles when the window is closed
     * When the window is closed, call Main.closeShowGUI()
     */
    private void closeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemActionPerformed
        Main.CloseShowGUI();
    }//GEN-LAST:event_closeItemActionPerformed

    /**
     * Handles if user selects logout option in the menu bar
     * Calls Main.Logout(), setting the user to null, as well as
     * Main.CloseShowGUI()
     */
    private void logoutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutItemActionPerformed
        Main.Logout();
        Main.CloseAccountGUI();
        Main.CloseMainGUI();
    }//GEN-LAST:event_logoutItemActionPerformed

    /**
     * Handles if user selects exit option in the menu bar
     * Pops up a confirmation window, then exits the program if user wishes
     */
    private void exitItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitItemActionPerformed
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to exit WRAP?",
                "",
                JOptionPane.YES_NO_OPTION);

        // do a thing based on response
        switch (res) {
            case 0:
                System.exit(0);
                break;
            default:
            // do nothing
        }
    }//GEN-LAST:event_exitItemActionPerformed

    /**
     * Handles if user selects bug option in the menu bar
     * Calls Main.LaunchBugReportGUI()
     */
    private void bugItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bugItemActionPerformed
        Main.LaunchBugReportGUI();
    }//GEN-LAST:event_bugItemActionPerformed

    /**
     * Handles if user selects suggestion option in the menu bar
     * Calls Main.LaunchSuggestionReportGUI()
     */
    private void suggestionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestionItemActionPerformed
        Main.LaunchSuggestionReportGUI();
    }//GEN-LAST:event_suggestionItemActionPerformed

    /**
     * Handles when the graphical list is clicked on
     * Basically just searches for the element that was clicked on
     */
    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        if (!shows.isEmpty()) {
            submitButton.setEnabled(false);
            editButton.setEnabled(true);
            deleteButton.setEnabled(true);

            setSearchFieldsEnabled(false);
            search(shows.elementAt(list.getSelectedIndex()).name);
            tabs.setSelectedIndex(0);
        } else {
            // do nothing
            // it crashes otherwise
        }
    }//GEN-LAST:event_listMouseClicked

    /**
     * Handles if the gear is clicked on
     * @param evt 
     */
    private void adminLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLabelMouseClicked
        // probably some admin stuff
        JOptionPane.showMessageDialog(this,
                "Administration features\nNot implemented yet",
                "Advanced",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_adminLabelMouseClicked

    /**
     * Handles if the cursor hovers over the gear
     * @param evt 
     */
    private void adminLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLabelMouseEntered
        loginLabel.setText("Advanced options");
    }//GEN-LAST:event_adminLabelMouseEntered

    /**
     * Handles if the cursor moves out of the gear, setting it back to normal
     * @param evt 
     */
    private void adminLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adminLabelMouseExited
        loginLabel.setText("Logged in as " + Main.p.getUsername());
    }//GEN-LAST:event_adminLabelMouseExited

    /**
     * Handles when the add ShowNumberSpinner number changes
     * Calls updateShowNumber function based on a switch statement
     */
    private void aShowNumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aShowNumSpinnerStateChanged
        switch (Integer.parseInt(aShowNumSpinner.getValue().toString())) {
            case 0:
                aUpdateShowNumber(0);
                break;
            case 1:
                aUpdateShowNumber(1);
                break;
            case 2:
                aUpdateShowNumber(2);
                break;
            case 3:
                aUpdateShowNumber(3);
                break;
            case 4:
                aUpdateShowNumber(4);
                break;
            case 5:
                aUpdateShowNumber(5);
                break;
            case 6:
                aUpdateShowNumber(6);
                break;
            case 7:
                aUpdateShowNumber(7);
                break;
        }
    }//GEN-LAST:event_aShowNumSpinnerStateChanged

    /**
     * Handles when the search ShowNumberSpinner number changes
     * Calls updateShowNumber function based on a switch statement
     */
    private void sShowNumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sShowNumSpinnerStateChanged
        switch (Integer.parseInt(sShowNumSpinner.getValue().toString())) {
            case 0:
                sUpdateShowNumber(0);
                break;
            case 1:
                sUpdateShowNumber(1);
                break;
            case 2:
                sUpdateShowNumber(2);
                break;
            case 3:
                sUpdateShowNumber(3);
                break;
            case 4:
                sUpdateShowNumber(4);
                break;
            case 5:
                sUpdateShowNumber(5);
                break;
            case 6:
                sUpdateShowNumber(6);
                break;
            case 7:
                sUpdateShowNumber(7);
                break;
        }
    }//GEN-LAST:event_sShowNumSpinnerStateChanged

    /**
     * Handles when the add HostNumSpinner number changes
     * Calls updateHostNumber function based on a switch statement
     */
    private void aHostNumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_aHostNumSpinnerStateChanged
        switch (Integer.parseInt(aHostNumSpinner.getValue().toString())) {
            case 0:
                aUpdateHostNumber(0);
                break;
            case 1:
                aUpdateHostNumber(1);
                break;
            case 2:
                aUpdateHostNumber(2);
                break;
            case 3:
                aUpdateHostNumber(3);
                break;
            case 4:
                aUpdateHostNumber(4);
                break;
        }
    }//GEN-LAST:event_aHostNumSpinnerStateChanged

    /**
     * Handles if the add button is clicked
     * If all the fields are kosher, based on aCheck(), add()
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (aCheck()) {
            add();
        }
    }//GEN-LAST:event_addButtonActionPerformed

    /**
     * Handles if the delete button is pressed
     * @param evt 
     */
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // confirmation on delete
        int res = JOptionPane.showConfirmDialog(
                null,
                "Are you sure you want to delete "
                + sNameField.getText() + "?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        // if they select yes
        switch (res) {
            case 0:
                delete();
                break;
            case 1:
                // do nothing
                break;
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * Handles if the edit button is pressed
     * @param evt 
     */
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        edit();
    }//GEN-LAST:event_editButtonActionPerformed

    /**
     * Handles if the submit button is clicked
     * If all the fields are kosher, based on sCheck(), submit()
     * @param evt 
     */
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if (sCheck()) {
            submit();
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    /**
     * Handles when the search HostNumSpinner number changes
     * Calls updateHostNumber function based on a switch statement
     */
    private void sHostNumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sHostNumSpinnerStateChanged
        switch (Integer.parseInt(sHostNumSpinner.getValue().toString())) {
            case 0:
                sUpdateHostNumber(0);
                break;
            case 1:
                sUpdateHostNumber(1);
                break;
            case 2:
                sUpdateHostNumber(2);
                break;
            case 3:
                sUpdateHostNumber(3);
                break;
            case 4:
                sUpdateHostNumber(4);
                break;
        }
    }//GEN-LAST:event_sHostNumSpinnerStateChanged

    /**
     * Handles when the window is closed
     * Calls Main.CloseShowGUI()
     * @param evt 
     */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        Main.CloseShowGUI();
    }//GEN-LAST:event_formWindowClosed

    private void helpItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpItemActionPerformed
        Main.LaunchHelpGUI();
    }//GEN-LAST:event_helpItemActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loginLabel.setText("Logged in as " + Main.p.getUsername());
    }//GEN-LAST:event_formComponentShown

    /**
     * fillList()
     *
     * Gets all of the users from IOController and shoves them into an array
     * Then it populates the DefaultListModel of ListElements from that array
     *
     * @return the DefaultListModel to populate the JList
     */
    public DefaultListModel fillList() {

        int total = IOController.getTotalShows();       // get total
        Show[] str = IOController.getAllShows();     // get users
        elements = new ListElement[total];              // create array of ListElements

        if (str != null && elements.length > 0) {
            // create the DefaultListModel elements
            for (int i = 0; i < total; i++) {
                elements[i] = new ListElement(str[i].getShowName());
                // add it to the global list
                shows.add(i, elements[i]);
            }
        }
        return shows;
    }

    /**
     * getProfiles()
     *
     * Gets all of the profiles from IOController and shoves them into an array
     * Then it populates the DefaultLComboBoxModel of ComboBoxElements from that array
     *
     * @return
     */
    public ComboBoxElement[] getProfiles() {

        int total = IOController.getTotalProfiles();
        Profile[] pro = IOController.getAllProfiles();
        cbElements = new ComboBoxElement[total + 1];

        // empty slot (--)
        //cbElements[0] = new ComboBoxElement();
        if (pro != null && cbElements.length > 0) {
            cbElements[total] = new ComboBoxElement();
            for (int i = 0; i < total; i++) {
                cbElements[i] = new ComboBoxElement(pro[i].getfName(),
                        pro[i].getlName(), pro[i].getId());
                profiles.addElement(cbElements[i]);
            }
        }
        return cbElements;
    }

    /**
     * updateList()
     *
     * Works with the global list of Profiles, which updates the JList graphics
     *
     * @param action,  the type of action (either add or remove)
     * @param element, the element to add or remove
     */
    public void updateList(int action, ListElement element) {
        switch (action) {
            case ADD:         // add
                shows.add(shows.getSize(), element);
                break;
            case REMOVE:      // remove
                shows.remove(list.getSelectedIndex());
                break;
        }
    }

    /**
     * search()
     * 
     * Searches for the show based on the name, then populates the search
     * panel with the show information
     * 
     * @param name 
     */
    public void search(String name) {
        Show s = ShowController.searchShow(name);

        // update graphics
        errLabel.setText(" ");
        editButton.setEnabled(true);
        deleteButton.setEnabled(true);
        setSearchFieldsToValid();

        // name and description
        sNameField.setText(s.getShowName());
        sDescField.setText(s.getShowDesc());

        // show and host spinners
        sShowNumSpinner.setValue(s.getDays().length);
        sHostNumSpinner.setValue(s.getHosts().length);

        // show days and times
        sUpdateShowNumber(0);
        // <editor-fold defaultstate="collapsed" desc="Show Days and Times">
        switch (s.getDays().length) {
            case 1:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                break;
            case 2:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                sDayBox2.setSelectedIndex(getDayIndex(s.getDays()[1]));
                sStartBox2.setSelectedIndex(getTimeIndex(s.getTimes()[2]));
                sEndBox2.setSelectedIndex(getTimeIndex(s.getTimes()[3]));

                break;
            case 3:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                sDayBox2.setSelectedIndex(getDayIndex(s.getDays()[1]));
                sStartBox2.setSelectedIndex(getTimeIndex(s.getTimes()[2]));
                sEndBox2.setSelectedIndex(getTimeIndex(s.getTimes()[3]));

                sDayBox3.setSelectedIndex(getDayIndex(s.getDays()[2]));
                sStartBox3.setSelectedIndex(getTimeIndex(s.getTimes()[4]));
                sEndBox3.setSelectedIndex(getTimeIndex(s.getTimes()[5]));

                break;
            case 4:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                sDayBox2.setSelectedIndex(getDayIndex(s.getDays()[1]));
                sStartBox2.setSelectedIndex(getTimeIndex(s.getTimes()[2]));
                sEndBox2.setSelectedIndex(getTimeIndex(s.getTimes()[3]));

                sDayBox3.setSelectedIndex(getDayIndex(s.getDays()[2]));
                sStartBox3.setSelectedIndex(getTimeIndex(s.getTimes()[4]));
                sEndBox3.setSelectedIndex(getTimeIndex(s.getTimes()[5]));

                sDayBox4.setSelectedIndex(getDayIndex(s.getDays()[3]));
                sStartBox4.setSelectedIndex(getTimeIndex(s.getTimes()[6]));
                sEndBox4.setSelectedIndex(getTimeIndex(s.getTimes()[7]));

                break;
            case 5:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                sDayBox2.setSelectedIndex(getDayIndex(s.getDays()[1]));
                sStartBox2.setSelectedIndex(getTimeIndex(s.getTimes()[2]));
                sEndBox2.setSelectedIndex(getTimeIndex(s.getTimes()[3]));

                sDayBox3.setSelectedIndex(getDayIndex(s.getDays()[2]));
                sStartBox3.setSelectedIndex(getTimeIndex(s.getTimes()[4]));
                sEndBox3.setSelectedIndex(getTimeIndex(s.getTimes()[5]));

                sDayBox4.setSelectedIndex(getDayIndex(s.getDays()[3]));
                sStartBox4.setSelectedIndex(getTimeIndex(s.getTimes()[6]));
                sEndBox4.setSelectedIndex(getTimeIndex(s.getTimes()[7]));

                sDayBox5.setSelectedIndex(getDayIndex(s.getDays()[4]));
                sStartBox5.setSelectedIndex(getTimeIndex(s.getTimes()[8]));
                sEndBox5.setSelectedIndex(getTimeIndex(s.getTimes()[9]));

                break;
            case 6:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                sDayBox2.setSelectedIndex(getDayIndex(s.getDays()[1]));
                sStartBox2.setSelectedIndex(getTimeIndex(s.getTimes()[2]));
                sEndBox2.setSelectedIndex(getTimeIndex(s.getTimes()[3]));

                sDayBox3.setSelectedIndex(getDayIndex(s.getDays()[2]));
                sStartBox3.setSelectedIndex(getTimeIndex(s.getTimes()[4]));
                sEndBox3.setSelectedIndex(getTimeIndex(s.getTimes()[5]));

                sDayBox4.setSelectedIndex(getDayIndex(s.getDays()[3]));
                sStartBox4.setSelectedIndex(getTimeIndex(s.getTimes()[6]));
                sEndBox4.setSelectedIndex(getTimeIndex(s.getTimes()[7]));

                sDayBox5.setSelectedIndex(getDayIndex(s.getDays()[4]));
                sStartBox5.setSelectedIndex(getTimeIndex(s.getTimes()[8]));
                sEndBox5.setSelectedIndex(getTimeIndex(s.getTimes()[9]));

                sDayBox6.setSelectedIndex(getDayIndex(s.getDays()[5]));
                sStartBox6.setSelectedIndex(getTimeIndex(s.getTimes()[10]));
                sEndBox6.setSelectedIndex(getTimeIndex(s.getTimes()[11]));

                break;
            case 7:
                sDayBox1.setSelectedIndex(getDayIndex(s.getDays()[0]));
                sStartBox1.setSelectedIndex(getTimeIndex(s.getTimes()[0]));
                sEndBox1.setSelectedIndex(getTimeIndex(s.getTimes()[1]));

                sDayBox2.setSelectedIndex(getDayIndex(s.getDays()[1]));
                sStartBox2.setSelectedIndex(getTimeIndex(s.getTimes()[2]));
                sEndBox2.setSelectedIndex(getTimeIndex(s.getTimes()[3]));

                sDayBox3.setSelectedIndex(getDayIndex(s.getDays()[2]));
                sStartBox3.setSelectedIndex(getTimeIndex(s.getTimes()[4]));
                sEndBox3.setSelectedIndex(getTimeIndex(s.getTimes()[5]));

                sDayBox4.setSelectedIndex(getDayIndex(s.getDays()[3]));
                sStartBox4.setSelectedIndex(getTimeIndex(s.getTimes()[6]));
                sEndBox4.setSelectedIndex(getTimeIndex(s.getTimes()[7]));

                sDayBox5.setSelectedIndex(getDayIndex(s.getDays()[4]));
                sStartBox5.setSelectedIndex(getTimeIndex(s.getTimes()[8]));
                sEndBox5.setSelectedIndex(getTimeIndex(s.getTimes()[9]));

                sDayBox6.setSelectedIndex(getDayIndex(s.getDays()[5]));
                sStartBox6.setSelectedIndex(getTimeIndex(s.getTimes()[10]));
                sEndBox6.setSelectedIndex(getTimeIndex(s.getTimes()[11]));

                sDayBox7.setSelectedIndex(getDayIndex(s.getDays()[6]));
                sStartBox7.setSelectedIndex(getTimeIndex(s.getTimes()[12]));
                sEndBox7.setSelectedIndex(getTimeIndex(s.getTimes()[13]));

                break;
        }
        // </editor-fold>

        // hosts
        sUpdateHostNumber(0);
        switch (s.getHosts().length) {
            case 1:
                sHost1.setSelectedIndex(getProfileIndex(s.getHosts()[0].getId()));
                break;
            case 2:
                sHost1.setSelectedIndex(getProfileIndex(s.getHosts()[0].getId()));
                sHost2.setSelectedIndex(getProfileIndex(s.getHosts()[1].getId()));
                break;
            case 3:
                sHost1.setSelectedIndex(getProfileIndex(s.getHosts()[0].getId()));
                sHost2.setSelectedIndex(getProfileIndex(s.getHosts()[1].getId()));
                sHost3.setSelectedIndex(getProfileIndex(s.getHosts()[2].getId()));
                break;
            case 4:
                sHost1.setSelectedIndex(getProfileIndex(s.getHosts()[0].getId()));
                sHost2.setSelectedIndex(getProfileIndex(s.getHosts()[1].getId()));
                sHost3.setSelectedIndex(getProfileIndex(s.getHosts()[2].getId()));
                sHost4.setSelectedIndex(getProfileIndex(s.getHosts()[3].getId()));
                break;
            default:
                break;
        }

    }

    /**
     * getProfileIndex()
     * 
     * Returns the index to choose on the Host comboboxes
     * 
     * @param id
     * @return the index to choose
     */
    public int getProfileIndex(String id) {
        for (int i = 0; i < profiles.getSize(); i++) {
            if (id.equals(profiles.getElementAt(i).id)) {
                return i;
            }
        }
        return -1;
    }

    /**
     * add()
     * 
     * Creates the show object out of the fields on add panel, then sends
     * it over to IOController to be put into the file
     * 
     */
    public void add() {
        String showName = aNameField.getText();
        String showDesc = aDescField.getText();

        int hostNum = (Integer) aHostNumSpinner.getValue();
        int showNum = (Integer) aShowNumSpinner.getValue();

        Profile[] hostArr = new Profile[hostNum];
        Show.Day[] daysArr = new Show.Day[showNum];
        Show.Time[] timeArr = new Show.Time[showNum * 2];

        // HOSTS
        if (aHost1.isEnabled()) {
            hostArr[0] = ProfileController.SearchProfile(cbElements[aHost1.getSelectedIndex()].id);
        }
        if (aHost2.isEnabled()) {
            hostArr[1] = ProfileController.SearchProfile(cbElements[aHost2.getSelectedIndex()].id);
        }
        if (aHost3.isEnabled()) {
            hostArr[2] = ProfileController.SearchProfile(cbElements[aHost3.getSelectedIndex()].id);
        }
        if (aHost4.isEnabled()) {
            hostArr[3] = ProfileController.SearchProfile(cbElements[aHost4.getSelectedIndex()].id);
        }

        // DAYS AND TIMES
        if (aDayBox1.isEnabled()) {
            daysArr[0] = getDay(aDayBox1.getSelectedIndex());
            timeArr[0] = getTime(aStartBox1.getSelectedIndex());
            timeArr[1] = getTime(aEndBox1.getSelectedIndex());
        }
        if (aDayBox2.isEnabled()) {
            daysArr[1] = getDay(aDayBox2.getSelectedIndex());
            timeArr[2] = getTime(aStartBox2.getSelectedIndex());
            timeArr[3] = getTime(aEndBox2.getSelectedIndex());
        }
        if (aDayBox3.isEnabled()) {
            daysArr[2] = getDay(aDayBox3.getSelectedIndex());
            timeArr[4] = getTime(aStartBox3.getSelectedIndex());
            timeArr[5] = getTime(aEndBox3.getSelectedIndex());
        }
        if (aDayBox4.isEnabled()) {
            daysArr[3] = getDay(aDayBox4.getSelectedIndex());
            timeArr[6] = getTime(aStartBox4.getSelectedIndex());
            timeArr[7] = getTime(aEndBox4.getSelectedIndex());
        }
        if (aDayBox5.isEnabled()) {
            daysArr[4] = getDay(aDayBox5.getSelectedIndex());
            timeArr[8] = getTime(aStartBox5.getSelectedIndex());
            timeArr[9] = getTime(aEndBox5.getSelectedIndex());
        }
        if (aDayBox6.isEnabled()) {
            daysArr[5] = getDay(aDayBox6.getSelectedIndex());
            timeArr[10] = getTime(aStartBox6.getSelectedIndex());
            timeArr[11] = getTime(aEndBox6.getSelectedIndex());
        }
        if (aDayBox7.isEnabled()) {
            daysArr[6] = getDay(aDayBox7.getSelectedIndex());
            timeArr[12] = getTime(aStartBox7.getSelectedIndex());
            timeArr[13] = getTime(aEndBox7.getSelectedIndex());
        }

        // create the show and listelement
        Show s = new Show(showName, showDesc, hostArr, daysArr, timeArr);
        ListElement element = new ListElement(showName);

        if (ShowController.addShow(s)) {
            // update graphics
            errLabel.setForeground(Color.blue);
            errLabel.setText("Show added successfully");

            updateList(ADD, element);

            setAddValuesToNull();
            aNameField.requestFocus();
        }
    }

    /**
     * Helper function to return a Day object from an index of a JComboBox
     *
     * @param n, the index
     * @return the Day object
     */
    public Show.Day getDay(int n) {
        switch (n) {
            case 1:
                return Show.Day.SUN;
            case 2:
                return Show.Day.MON;
            case 3:
                return Show.Day.TUE;
            case 4:
                return Show.Day.WED;
            case 5:
                return Show.Day.THU;
            case 6:
                return Show.Day.FRI;
            case 7:
                return Show.Day.MON;
            default:
                return null;
        }
    }

    /**
     * Helper function to return a Time object from an index of a JComboBox
     *
     * @param n, the index
     * @return the Time object
     */
    public Show.Time getTime(int n) {
        switch (n) {
            case 1:
                return Show.Time.am0600;
            case 2:
                return Show.Time.am0630;
            case 3:
                return Show.Time.am0700;
            case 4:
                return Show.Time.am0730;
            case 5:
                return Show.Time.am0800;
            case 6:
                return Show.Time.am0830;
            case 7:
                return Show.Time.am0900;
            case 8:
                return Show.Time.am0930;
            case 9:
                return Show.Time.am1000;
            case 10:
                return Show.Time.am1030;
            case 11:
                return Show.Time.am1100;
            case 12:
                return Show.Time.am1130;
            case 13:
                return Show.Time.pm1200;
            case 14:
                return Show.Time.pm1230;
            case 15:
                return Show.Time.pm0100;
            case 16:
                return Show.Time.pm0130;
            case 17:
                return Show.Time.pm0200;
            case 18:
                return Show.Time.pm0230;
            case 19:
                return Show.Time.pm0300;
            case 20:
                return Show.Time.pm0330;
            case 21:
                return Show.Time.pm0400;
            case 22:
                return Show.Time.pm0430;
            case 23:
                return Show.Time.pm0500;
            case 24:
                return Show.Time.pm0530;
            case 25:
                return Show.Time.pm0600;
            case 26:
                return Show.Time.pm0630;
            case 27:
                return Show.Time.pm0700;
            case 28:
                return Show.Time.pm0730;
            case 29:
                return Show.Time.pm0800;
            case 30:
                return Show.Time.pm0830;
            case 31:
                return Show.Time.pm0900;
            case 32:
                return Show.Time.pm0930;
            case 33:
                return Show.Time.pm1000;
            case 34:
                return Show.Time.pm1030;
            case 35:
                return Show.Time.pm1100;
            case 36:
                return Show.Time.pm1130;
            case 37:
                return Show.Time.am1200;
            default:
                return null;
        }
    }

    /**
     * delete()
     * 
     * Grabs the name of the show to delete and sends it to IOController
     */
    public void delete() {

        // get the name
        String name = sNameField.getText();

        // if deletion succeeds
        if (ShowController.deleteShow(name)) {

            // create ListElement
            ListElement element = new ListElement(name);

            // update graphics
            updateList(REMOVE, element);
            errLabel.setForeground(Color.blue);
            errLabel.setText("Show deleted successfully");
            setSearchValuesToNull();
            setSearchFieldsEditable(false);
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            submitButton.setEnabled(false);
        }
    }

    /**
     * edit()
     *
     * Stores the current values of the search panel into the global temp variable
     * Then it sets the fields to editable
     */
    public void edit() {
        // store the current show in temp
        temp = getShow();

        // update graphics
        setSearchFieldsEditable(true);
        submitButton.setEnabled(true);
        deleteButton.setEnabled(false);
        editButton.setEnabled(false);
    }

    /**
     * submit()
     * 
     * Deletes the temporary show stored from edit(), then adds a new show based
     * on new information in search panel
     */
    public void submit() {

        // update graphics
        errLabel.setForeground(Color.blue);
        errLabel.setText("Show edited successfully");

        // create the new show object
        Show s = getShow();

        // more updating graphics
        setSearchFieldsEditable(false);

        // delete then add
        ShowController.deleteShow(temp.getShowName());
        ShowController.addShow(s);

        // create ListElements
        ListElement t = new ListElement(temp.getShowName());
        ListElement u = new ListElement(s.getShowName());

        // even more updating graphics
        updateList(REMOVE, t);
        updateList(ADD, u);

        submitButton.setEnabled(false);
        editButton.setEnabled(false);
        deleteButton.setEnabled(false);

        // reset the form, selecting the new show just edited
        list.setSelectedIndex(list.getLastVisibleIndex());
        search(shows.getElementAt(shows.getSize() - 1).name);

    }

    /**
     * sCheck()
     *
     * First, it sets all foregrounds in the search panel to black to "reset"
     * Then it checks the name and description fields and sees if they're
     * empty or the default
     * Then it checks each combo box that is enabled to see if they're on the
     * default slot
     * If anything fails, the foreground of the failing field is set to red
     * so that setSearchErrLabel() can pick it up and report it
     *
     * @return flag, the success or failure of the check
     */
    public boolean sCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        asetAllForeground(Color.black);

        // ShowName
        // if it is nothing or default, throw error
        // if it contains separator character, throw error
        if (sNameField.getText().equals("") || sNameField.getText().equals("--")) {
            flag = false;
            sNameField.setForeground(Color.red);
            sNameField.setText("--");
        } else if (!Util.sepCheck(sNameField.getText())) {
            flag = false;
            sNameField.setForeground(Color.red);
        }

        // ShowDescription
        // if it is nothing or default, throw error
        // if it contains separator character, throw error
        if (sDescField.getText().equals("") || sDescField.getText().equals("--")) {
            flag = false;
            sDescField.setForeground(Color.red);
            sDescField.setText("--");
        } else if (!Util.sepCheck(sDescField.getText())) {
            flag = false;
            sDescField.setForeground(Color.red);
        }

        // ShowNum
        // calls external helper function
        if (sDayBox1.isEnabled()) {
            if (sDayBox1.getSelectedIndex() == 0
                    || sStartBox1.getSelectedIndex() == 0
                    || sEndBox1.getSelectedIndex() == 0) {
                sDayBox1.setForeground(Color.red);
                sStartBox1.setForeground(Color.red);
                sEndBox1.setForeground(Color.red);
                flag = false;
            }
        }
        if (sDayBox2.isEnabled()) {
            if (sDayBox2.getSelectedIndex() == 0
                    || sStartBox2.getSelectedIndex() == 0
                    || sEndBox2.getSelectedIndex() == 0) {
                sDayBox2.setForeground(Color.red);
                sStartBox2.setForeground(Color.red);
                sEndBox2.setForeground(Color.red);
                flag = false;
            }
        }
        if (sDayBox3.isEnabled()) {
            if (sDayBox3.getSelectedIndex() == 0
                    || sStartBox3.getSelectedIndex() == 0
                    || sEndBox3.getSelectedIndex() == 0) {
                sDayBox3.setForeground(Color.red);
                sStartBox3.setForeground(Color.red);
                sEndBox3.setForeground(Color.red);
                flag = false;
            }
        }
        if (sDayBox4.isEnabled()) {
            if (sDayBox4.getSelectedIndex() == 0
                    || sStartBox4.getSelectedIndex() == 0
                    || sEndBox4.getSelectedIndex() == 0) {
                sDayBox4.setForeground(Color.red);
                sStartBox4.setForeground(Color.red);
                sEndBox4.setForeground(Color.red);
                flag = false;
            }
        }
        if (sDayBox5.isEnabled()) {
            if (sDayBox5.getSelectedIndex() == 0
                    || sStartBox5.getSelectedIndex() == 0
                    || sEndBox5.getSelectedIndex() == 0) {
                sDayBox5.setForeground(Color.red);
                sStartBox5.setForeground(Color.red);
                sEndBox5.setForeground(Color.red);
                flag = false;
            }
        }
        if (sDayBox6.isEnabled()) {
            if (sDayBox6.getSelectedIndex() == 0
                    || sStartBox6.getSelectedIndex() == 0
                    || sEndBox6.getSelectedIndex() == 0) {
                sDayBox6.setForeground(Color.red);
                sStartBox6.setForeground(Color.red);
                sEndBox6.setForeground(Color.red);
                flag = false;
            }
        }
        if (sDayBox7.isEnabled()) {
            if (sDayBox7.getSelectedIndex() == 0
                    || sStartBox7.getSelectedIndex() == 0
                    || sEndBox7.getSelectedIndex() == 0) {
                sDayBox7.setForeground(Color.red);
                sStartBox7.setForeground(Color.red);
                sEndBox7.setForeground(Color.red);
                flag = false;
            }
        }

        // HostNum
        // calls external helper function
        if (sHost1.isEnabled()) {
            if (sHost1.getSelectedIndex() == 0) {
                sHost1.setForeground(Color.red);
                flag = false;
            }
            if (sHost1.getSelectedIndex() == sHost2.getSelectedIndex()) {
                sHost1.setForeground(Color.red);
                sHost2.setForeground(Color.red);
                flag = false;
            }
            if (sHost1.getSelectedIndex() == sHost3.getSelectedIndex()) {
                sHost1.setForeground(Color.red);
                sHost3.setForeground(Color.red);
                flag = false;
            }
            if (sHost1.getSelectedIndex() == sHost4.getSelectedIndex()) {
                sHost1.setForeground(Color.red);
                sHost4.setForeground(Color.red);
                flag = false;
            }
        }
        if (sHost2.isEnabled()) {
            if (sHost2.getSelectedIndex() == 0) {
                sHost2.setForeground(Color.red);
                flag = false;
            }
            if (sHost2.getSelectedIndex() == sHost3.getSelectedIndex()) {
                sHost2.setForeground(Color.red);
                sHost3.setForeground(Color.red);
                flag = false;
            }
            if (sHost2.getSelectedIndex() == sHost4.getSelectedIndex()) {
                sHost2.setForeground(Color.red);
                sHost4.setForeground(Color.red);
                flag = false;
            }
        }
        if (sHost3.isEnabled()) {
            if (sHost3.getSelectedIndex() == 0) {
                sHost3.setForeground(Color.red);
                flag = false;
            }
            if (sHost3.getSelectedIndex() == sHost4.getSelectedIndex()) {
                sHost3.setForeground(Color.red);
                sHost4.setForeground(Color.red);
                flag = false;
            }
        }
        if (sHost4.isEnabled()) {
            if (sHost4.getSelectedIndex() == 0) {
                sHost4.setForeground(Color.red);
                flag = false;
            }
        }

        setSearchErrLabel();
        return flag;
    }

    /**
     * aCheck()
     *
     * First, it sets all foregrounds in the add panel to black to "reset"
     * Then it checks the name and description fields and sees if they're
     * empty or the default
     * Then it checks each combo box that is enabled to see if they're on the
     * default slot
     * If anything fails, the foreground of the failing field is set to red
     * so that setAddErrLabel() can pick it up and report it
     *
     * @return flag, the success or failure of the check
     */
    public boolean aCheck() {
        boolean flag = true;

        // preconditions
        errLabel.setForeground(Color.red);
        asetAllForeground(Color.black);

        // ShowName
        // if it is nothing or default, throw error
        // if it contains separator character, throw error
        if (aNameField.getText().equals("") || aNameField.getText().equals("--")) {
            flag = false;
            aNameField.setForeground(Color.red);
            aNameField.setText("--");
        } else if (!Util.sepCheck(aNameField.getText())) {
            flag = false;
            aNameField.setForeground(Color.red);
        }

        // ShowDescription
        // if it is nothing or default, throw error
        // if it contains separator character, throw error
        if (aDescField.getText().equals("") || aDescField.getText().equals("--")) {
            flag = false;
            aDescField.setForeground(Color.red);
            aDescField.setText("--");
        } else if (!Util.sepCheck(aDescField.getText())) {
            flag = false;
            aDescField.setForeground(Color.red);
        }

        // ShowNum
        // calls external helper function
        if (aDayBox1.isEnabled()) {
            if (aDayBox1.getSelectedIndex() == 0
                    || aStartBox1.getSelectedIndex() == 0
                    || aEndBox1.getSelectedIndex() == 0) {
                aDayBox1.setForeground(Color.red);
                aStartBox1.setForeground(Color.red);
                aEndBox1.setForeground(Color.red);
                flag = false;
            }
        }
        if (aDayBox2.isEnabled()) {
            if (aDayBox2.getSelectedIndex() == 0
                    || aStartBox2.getSelectedIndex() == 0
                    || aEndBox2.getSelectedIndex() == 0) {
                aDayBox2.setForeground(Color.red);
                aStartBox2.setForeground(Color.red);
                aEndBox2.setForeground(Color.red);
                flag = false;
            }
        }
        if (aDayBox3.isEnabled()) {
            if (aDayBox3.getSelectedIndex() == 0
                    || aStartBox3.getSelectedIndex() == 0
                    || aEndBox3.getSelectedIndex() == 0) {
                aDayBox3.setForeground(Color.red);
                aStartBox3.setForeground(Color.red);
                aEndBox3.setForeground(Color.red);
                flag = false;
            }
        }
        if (aDayBox4.isEnabled()) {
            if (aDayBox4.getSelectedIndex() == 0
                    || aStartBox4.getSelectedIndex() == 0
                    || aEndBox4.getSelectedIndex() == 0) {
                aDayBox4.setForeground(Color.red);
                aStartBox4.setForeground(Color.red);
                aEndBox4.setForeground(Color.red);
                flag = false;
            }
        }
        if (aDayBox5.isEnabled()) {
            if (aDayBox5.getSelectedIndex() == 0
                    || aStartBox5.getSelectedIndex() == 0
                    || aEndBox5.getSelectedIndex() == 0) {
                aDayBox5.setForeground(Color.red);
                aStartBox5.setForeground(Color.red);
                aEndBox5.setForeground(Color.red);
                flag = false;
            }
        }
        if (aDayBox6.isEnabled()) {
            if (aDayBox6.getSelectedIndex() == 0
                    || aStartBox6.getSelectedIndex() == 0
                    || aEndBox6.getSelectedIndex() == 0) {
                aDayBox6.setForeground(Color.red);
                aStartBox6.setForeground(Color.red);
                aEndBox6.setForeground(Color.red);
                flag = false;
            }
        }
        if (aDayBox7.isEnabled()) {
            if (aDayBox7.getSelectedIndex() == 0
                    || aStartBox7.getSelectedIndex() == 0
                    || aEndBox7.getSelectedIndex() == 0) {
                aDayBox7.setForeground(Color.red);
                aStartBox7.setForeground(Color.red);
                aEndBox7.setForeground(Color.red);
                flag = false;
            }
        }

        // HostNum
        // calls external helper function
        if (aHost1.isEnabled()) {
            if (aHost1.getSelectedIndex() == 0) {
                aHost1.setForeground(Color.red);
                flag = false;
            }
            if (aHost1.getSelectedIndex() == aHost2.getSelectedIndex()) {
                aHost1.setForeground(Color.red);
                aHost2.setForeground(Color.red);
                flag = false;
            }
            if (aHost1.getSelectedIndex() == aHost3.getSelectedIndex()) {
                aHost1.setForeground(Color.red);
                aHost3.setForeground(Color.red);
                flag = false;
            }
            if (aHost1.getSelectedIndex() == aHost4.getSelectedIndex()) {
                aHost1.setForeground(Color.red);
                aHost4.setForeground(Color.red);
                flag = false;
            }
        }
        if (aHost2.isEnabled()) {
            if (aHost2.getSelectedIndex() == 0) {
                aHost2.setForeground(Color.red);
                flag = false;
            }
            if (aHost2.getSelectedIndex() == aHost3.getSelectedIndex()) {
                aHost2.setForeground(Color.red);
                aHost3.setForeground(Color.red);
                flag = false;
            }
            if (aHost2.getSelectedIndex() == aHost4.getSelectedIndex()) {
                aHost2.setForeground(Color.red);
                aHost4.setForeground(Color.red);
                flag = false;
            }
        }
        if (aHost3.isEnabled()) {
            if (aHost3.getSelectedIndex() == 0) {
                aHost3.setForeground(Color.red);
                flag = false;
            }
            if (aHost3.getSelectedIndex() == aHost4.getSelectedIndex()) {
                aHost3.setForeground(Color.red);
                aHost4.setForeground(Color.red);
                flag = false;
            }
        }
        if (aHost4.isEnabled()) {
            if (aHost4.getSelectedIndex() == 0) {
                aHost4.setForeground(Color.red);
                flag = false;
            }
        }

        setAddErrLabel();
        return flag;
    }

    /**
     * setAddErrLabel()
     *
     * Checks each field to see if the text color is red
     * If it is, add to count
     * Starts with end so it can print out "Error with ##### field and # other(s)
     */
    public void setAddErrLabel() {
        int errCount = 0;
        String err = "";

        // hosts
        if (aHost4.isEnabled()) {
            if (aHost4.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 4";
            }
        }
        if (aHost3.isEnabled()) {
            if (aHost3.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 3";
            }
        }
        if (aHost2.isEnabled()) {
            if (aHost2.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 2";
            }
        }
        if (aHost1.isEnabled()) {
            if (aHost1.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 1";
            }
        }

        // times
        if (aDayBox7.isEnabled()) {
            if (aDayBox7.getForeground() == Color.red
                    || aStartBox7.getForeground() == Color.red
                    || aEndBox7.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 7";
            }
        }
        if (aDayBox6.isEnabled()) {
            if (aDayBox6.getForeground() == Color.red
                    || aStartBox6.getForeground() == Color.red
                    || aEndBox6.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 6";
            }
        }
        if (aDayBox5.isEnabled()) {
            if (aDayBox5.getForeground() == Color.red
                    || aStartBox5.getForeground() == Color.red
                    || aEndBox5.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 5";
            }
        }
        if (aDayBox4.isEnabled()) {
            if (aDayBox4.getForeground() == Color.red
                    || aStartBox4.getForeground() == Color.red
                    || aEndBox4.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 4";
            }
        }
        if (aDayBox3.isEnabled()) {
            if (aDayBox3.getForeground() == Color.red
                    || aStartBox3.getForeground() == Color.red
                    || aEndBox3.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 3";
            }
        }
        if (aDayBox2.isEnabled()) {
            if (aDayBox2.getForeground() == Color.red
                    || aStartBox2.getForeground() == Color.red
                    || aEndBox2.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 2";
            }
        }
        if (aDayBox1.isEnabled()) {
            if (aDayBox1.getForeground() == Color.red
                    || aStartBox1.getForeground() == Color.red
                    || aEndBox1.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 1";
            }
        }

        // showDesc
        if (aDescField.getForeground() == Color.red) {
            errCount++;
            err = "Error with show description";
        }

        // showName
        if (aNameField.getForeground() == Color.red) {
            errCount++;
            err = "Error with show name";
        }

        // if there is more than one error
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");
            // if there is only one error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
    }

    /**
     * setAddErrLabel()
     *
     * Checks each field to see if the text color is red
     * If it is, add to count
     * Starts with end so it can print out "Error with ##### field and # other(s)
     */
    public void setSearchErrLabel() {
        int errCount = 0;
        String err = "";

        // hosts
        if (sHost4.isEnabled()) {
            if (sHost4.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 4";
            }
        }
        if (sHost3.isEnabled()) {
            if (sHost3.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 3";
            }
        }
        if (sHost2.isEnabled()) {
            if (sHost2.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 2";
            }
        }
        if (sHost1.isEnabled()) {
            if (sHost1.getForeground() == Color.red) {
                errCount++;
                err = "Error with host 1";
            }
        }

        // times
        if (sDayBox7.isEnabled()) {
            if (sDayBox7.getForeground() == Color.red
                    || sStartBox7.getForeground() == Color.red
                    || sEndBox7.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 7";
            }
        }
        if (sDayBox6.isEnabled()) {
            if (sDayBox6.getForeground() == Color.red
                    || sStartBox6.getForeground() == Color.red
                    || sEndBox6.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 6";
            }
        }
        if (sDayBox5.isEnabled()) {
            if (sDayBox5.getForeground() == Color.red
                    || sStartBox5.getForeground() == Color.red
                    || sEndBox5.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 5";
            }
        }
        if (sDayBox4.isEnabled()) {
            if (sDayBox4.getForeground() == Color.red
                    || sStartBox4.getForeground() == Color.red
                    || sEndBox4.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 4";
            }
        }
        if (sDayBox3.isEnabled()) {
            if (sDayBox3.getForeground() == Color.red
                    || sStartBox3.getForeground() == Color.red
                    || sEndBox3.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 3";
            }
        }
        if (sDayBox2.isEnabled()) {
            if (sDayBox2.getForeground() == Color.red
                    || sStartBox2.getForeground() == Color.red
                    || sEndBox2.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 2";
            }
        }
        if (sDayBox1.isEnabled()) {
            if (sDayBox1.getForeground() == Color.red
                    || sStartBox1.getForeground() == Color.red
                    || sEndBox1.getForeground() == Color.red) {
                errCount++;
                err = "Error with day slot 1";
            }
        }

        // showDesc
        if (sDescField.getForeground() == Color.red) {
            errCount++;
            err = "Error with show description";
        }

        // showName
        if (sNameField.getForeground() == Color.red) {
            errCount++;
            err = "Error with show name";
        }

        // if there is more than one error
        if (errCount > 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err + " and " + (errCount - 1) + " other(s)");
            // if there is only one error
        } else if (errCount == 1) {
            errLabel.setForeground(Color.red);
            errLabel.setText(err);
        }
    }

    /**
     * asetAllForeground()
     *
     * Helper function to set add fields' foregrounds
     * Used to error check
     *
     * @param c
     */
    public void asetAllForeground(Color c) {
        aNameField.setForeground(c);
        aDescField.setForeground(c);

        aDayBox1.setForeground(c);
        aStartBox1.setForeground(c);
        aEndBox1.setForeground(c);

        aDayBox2.setForeground(c);
        aStartBox2.setForeground(c);
        aEndBox2.setForeground(c);

        aDayBox3.setForeground(c);
        aStartBox3.setForeground(c);
        aEndBox3.setForeground(c);

        aDayBox4.setForeground(c);
        aStartBox4.setForeground(c);
        aEndBox4.setForeground(c);

        aDayBox5.setForeground(c);
        aStartBox5.setForeground(c);
        aEndBox5.setForeground(c);

        aDayBox6.setForeground(c);
        aStartBox6.setForeground(c);
        aEndBox6.setForeground(c);

        aDayBox7.setForeground(c);
        aStartBox7.setForeground(c);
        aEndBox7.setForeground(c);

        aHost1.setForeground(c);
        aHost2.setForeground(c);
        aHost3.setForeground(c);
        aHost4.setForeground(c);
    }

    /**
     * ssetAllForeground()
     *
     * Helper function to set search fields' foregrounds
     * Used to error check
     *
     * @param c
     */
    public void ssetAllForeground(Color c) {
        sNameField.setForeground(c);
        sDescField.setForeground(c);

        sDayBox1.setForeground(c);
        sStartBox1.setForeground(c);
        sEndBox1.setForeground(c);

        sDayBox2.setForeground(c);
        sStartBox2.setForeground(c);
        sEndBox2.setForeground(c);

        sDayBox3.setForeground(c);
        sStartBox3.setForeground(c);
        sEndBox3.setForeground(c);

        sDayBox4.setForeground(c);
        sStartBox4.setForeground(c);
        sEndBox4.setForeground(c);

        sDayBox5.setForeground(c);
        sStartBox5.setForeground(c);
        sEndBox5.setForeground(c);

        sDayBox6.setForeground(c);
        sStartBox6.setForeground(c);
        sEndBox6.setForeground(c);

        sDayBox7.setForeground(c);
        sStartBox7.setForeground(c);
        sEndBox7.setForeground(c);

        sHost1.setForeground(c);
        sHost2.setForeground(c);
        sHost3.setForeground(c);
        sHost4.setForeground(c);
    }

    /**
     * aUpdateShowNumber()
     *
     * Stupid crazy long function to enable the correct number of combo boxes
     * when selecting the days and times
     * For real, this is too long. There has to be an easier way to do this
     * THIS WHOLE METHOD IS 403 LINES LONG. THAT'S WITH EMPTY LINES BUT
     * STILL HOLY COMBO BOXES BATMAN.
     *
     * @param num
     */
    public void aUpdateShowNumber(int num) {
        switch (num) {
            case 0:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(false);
                aStartBox1.setEnabled(false);
                aEndBox1.setEnabled(false);

                aDayBox2.setEnabled(false);
                aStartBox2.setEnabled(false);
                aEndBox2.setEnabled(false);

                aDayBox3.setEnabled(false);
                aStartBox3.setEnabled(false);
                aEndBox3.setEnabled(false);

                aDayBox4.setEnabled(false);
                aStartBox4.setEnabled(false);
                aEndBox4.setEnabled(false);

                aDayBox5.setEnabled(false);
                aStartBox5.setEnabled(false);
                aEndBox5.setEnabled(false);

                aDayBox6.setEnabled(false);
                aStartBox6.setEnabled(false);
                aEndBox6.setEnabled(false);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox1.setSelectedIndex(0);
                aStartBox1.setSelectedIndex(0);
                aEndBox1.setSelectedIndex(0);

                aDayBox2.setSelectedIndex(0);
                aStartBox2.setSelectedIndex(0);
                aEndBox2.setSelectedIndex(0);

                aDayBox3.setSelectedIndex(0);
                aStartBox3.setSelectedIndex(0);
                aEndBox3.setSelectedIndex(0);

                aDayBox4.setSelectedIndex(0);
                aStartBox4.setSelectedIndex(0);
                aEndBox4.setSelectedIndex(0);

                aDayBox5.setSelectedIndex(0);
                aStartBox5.setSelectedIndex(0);
                aEndBox5.setSelectedIndex(0);

                aDayBox6.setSelectedIndex(0);
                aStartBox6.setSelectedIndex(0);
                aEndBox6.setSelectedIndex(0);

                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 1:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(false);
                aStartBox2.setEnabled(false);
                aEndBox2.setEnabled(false);

                aDayBox3.setEnabled(false);
                aStartBox3.setEnabled(false);
                aEndBox3.setEnabled(false);

                aDayBox4.setEnabled(false);
                aStartBox4.setEnabled(false);
                aEndBox4.setEnabled(false);

                aDayBox5.setEnabled(false);
                aStartBox5.setEnabled(false);
                aEndBox5.setEnabled(false);

                aDayBox6.setEnabled(false);
                aStartBox6.setEnabled(false);
                aEndBox6.setEnabled(false);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox2.setSelectedIndex(0);
                aStartBox2.setSelectedIndex(0);
                aEndBox2.setSelectedIndex(0);

                aDayBox3.setSelectedIndex(0);
                aStartBox3.setSelectedIndex(0);
                aEndBox3.setSelectedIndex(0);

                aDayBox4.setSelectedIndex(0);
                aStartBox4.setSelectedIndex(0);
                aEndBox4.setSelectedIndex(0);

                aDayBox5.setSelectedIndex(0);
                aStartBox5.setSelectedIndex(0);
                aEndBox5.setSelectedIndex(0);

                aDayBox6.setSelectedIndex(0);
                aStartBox6.setSelectedIndex(0);
                aEndBox6.setSelectedIndex(0);

                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 2:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(true);
                aStartBox2.setEnabled(true);
                aEndBox2.setEnabled(true);

                aDayBox3.setEnabled(false);
                aStartBox3.setEnabled(false);
                aEndBox3.setEnabled(false);

                aDayBox4.setEnabled(false);
                aStartBox4.setEnabled(false);
                aEndBox4.setEnabled(false);

                aDayBox5.setEnabled(false);
                aStartBox5.setEnabled(false);
                aEndBox5.setEnabled(false);

                aDayBox6.setEnabled(false);
                aStartBox6.setEnabled(false);
                aEndBox6.setEnabled(false);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox3.setSelectedIndex(0);
                aStartBox3.setSelectedIndex(0);
                aEndBox3.setSelectedIndex(0);

                aDayBox4.setSelectedIndex(0);
                aStartBox4.setSelectedIndex(0);
                aEndBox4.setSelectedIndex(0);

                aDayBox5.setSelectedIndex(0);
                aStartBox5.setSelectedIndex(0);
                aEndBox5.setSelectedIndex(0);

                aDayBox6.setSelectedIndex(0);
                aStartBox6.setSelectedIndex(0);
                aEndBox6.setSelectedIndex(0);

                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 3:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(true);
                aStartBox2.setEnabled(true);
                aEndBox2.setEnabled(true);

                aDayBox3.setEnabled(true);
                aStartBox3.setEnabled(true);
                aEndBox3.setEnabled(true);

                aDayBox4.setEnabled(false);
                aStartBox4.setEnabled(false);
                aEndBox4.setEnabled(false);

                aDayBox5.setEnabled(false);
                aStartBox5.setEnabled(false);
                aEndBox5.setEnabled(false);

                aDayBox6.setEnabled(false);
                aStartBox6.setEnabled(false);
                aEndBox6.setEnabled(false);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox4.setSelectedIndex(0);
                aStartBox4.setSelectedIndex(0);
                aEndBox4.setSelectedIndex(0);

                aDayBox5.setSelectedIndex(0);
                aStartBox5.setSelectedIndex(0);
                aEndBox5.setSelectedIndex(0);

                aDayBox6.setSelectedIndex(0);
                aStartBox6.setSelectedIndex(0);
                aEndBox6.setSelectedIndex(0);

                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 4:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(true);
                aStartBox2.setEnabled(true);
                aEndBox2.setEnabled(true);

                aDayBox3.setEnabled(true);
                aStartBox3.setEnabled(true);
                aEndBox3.setEnabled(true);

                aDayBox4.setEnabled(true);
                aStartBox4.setEnabled(true);
                aEndBox4.setEnabled(true);

                aDayBox5.setEnabled(false);
                aStartBox5.setEnabled(false);
                aEndBox5.setEnabled(false);

                aDayBox6.setEnabled(false);
                aStartBox6.setEnabled(false);
                aEndBox6.setEnabled(false);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox5.setSelectedIndex(0);
                aStartBox5.setSelectedIndex(0);
                aEndBox5.setSelectedIndex(0);

                aDayBox6.setSelectedIndex(0);
                aStartBox6.setSelectedIndex(0);
                aEndBox6.setSelectedIndex(0);

                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 5:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(true);
                aStartBox2.setEnabled(true);
                aEndBox2.setEnabled(true);

                aDayBox3.setEnabled(true);
                aStartBox3.setEnabled(true);
                aEndBox3.setEnabled(true);

                aDayBox4.setEnabled(true);
                aStartBox4.setEnabled(true);
                aEndBox4.setEnabled(true);

                aDayBox5.setEnabled(true);
                aStartBox5.setEnabled(true);
                aEndBox5.setEnabled(true);

                aDayBox6.setEnabled(false);
                aStartBox6.setEnabled(false);
                aEndBox6.setEnabled(false);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox6.setSelectedIndex(0);
                aStartBox6.setSelectedIndex(0);
                aEndBox6.setSelectedIndex(0);

                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 6:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(true);
                aStartBox2.setEnabled(true);
                aEndBox2.setEnabled(true);

                aDayBox3.setEnabled(true);
                aStartBox3.setEnabled(true);
                aEndBox3.setEnabled(true);

                aDayBox4.setEnabled(true);
                aStartBox4.setEnabled(true);
                aEndBox4.setEnabled(true);

                aDayBox5.setEnabled(true);
                aStartBox5.setEnabled(true);
                aEndBox5.setEnabled(true);

                aDayBox6.setEnabled(true);
                aStartBox6.setEnabled(true);
                aEndBox6.setEnabled(true);

                aDayBox7.setEnabled(false);
                aStartBox7.setEnabled(false);
                aEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                aDayBox7.setSelectedIndex(0);
                aStartBox7.setSelectedIndex(0);
                aEndBox7.setSelectedIndex(0);

                break;

            case 7:

                // set the appropriate number of combo boxes
                aDayBox1.setEnabled(true);
                aStartBox1.setEnabled(true);
                aEndBox1.setEnabled(true);

                aDayBox2.setEnabled(true);
                aStartBox2.setEnabled(true);
                aEndBox2.setEnabled(true);

                aDayBox3.setEnabled(true);
                aStartBox3.setEnabled(true);
                aEndBox3.setEnabled(true);

                aDayBox4.setEnabled(true);
                aStartBox4.setEnabled(true);
                aEndBox4.setEnabled(true);

                aDayBox5.setEnabled(true);
                aStartBox5.setEnabled(true);
                aEndBox5.setEnabled(true);

                aDayBox6.setEnabled(true);
                aStartBox6.setEnabled(true);
                aEndBox6.setEnabled(true);

                aDayBox7.setEnabled(true);
                aStartBox7.setEnabled(true);
                aEndBox7.setEnabled(true);

                // no resetting the boxes here
                break;
        }
    }

    /**
     * sUpdateShowNumber()
     *
     * Stupid crazy long function to enable the correct number of combo boxes
     * when selecting the days and times
     * For real, this is too long. There has to be an easier way to do this
     * THIS WHOLE METHOD IS 403 LINES LONG. THAT'S WITH EMPTY LINES BUT
     * STILL HOLY COMBO BOXES BATMAN.
     *
     * @param num
     */
    public void sUpdateShowNumber(int num) {
        switch (num) {
            case 0:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(false);
                sStartBox1.setEnabled(false);
                sEndBox1.setEnabled(false);

                sDayBox2.setEnabled(false);
                sStartBox2.setEnabled(false);
                sEndBox2.setEnabled(false);

                sDayBox3.setEnabled(false);
                sStartBox3.setEnabled(false);
                sEndBox3.setEnabled(false);

                sDayBox4.setEnabled(false);
                sStartBox4.setEnabled(false);
                sEndBox4.setEnabled(false);

                sDayBox5.setEnabled(false);
                sStartBox5.setEnabled(false);
                sEndBox5.setEnabled(false);

                sDayBox6.setEnabled(false);
                sStartBox6.setEnabled(false);
                sEndBox6.setEnabled(false);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox1.setSelectedIndex(0);
                sStartBox1.setSelectedIndex(0);
                sEndBox1.setSelectedIndex(0);

                sDayBox2.setSelectedIndex(0);
                sStartBox2.setSelectedIndex(0);
                sEndBox2.setSelectedIndex(0);

                sDayBox3.setSelectedIndex(0);
                sStartBox3.setSelectedIndex(0);
                sEndBox3.setSelectedIndex(0);

                sDayBox4.setSelectedIndex(0);
                sStartBox4.setSelectedIndex(0);
                sEndBox4.setSelectedIndex(0);

                sDayBox5.setSelectedIndex(0);
                sStartBox5.setSelectedIndex(0);
                sEndBox5.setSelectedIndex(0);

                sDayBox6.setSelectedIndex(0);
                sStartBox6.setSelectedIndex(0);
                sEndBox6.setSelectedIndex(0);

                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 1:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(false);
                sStartBox2.setEnabled(false);
                sEndBox2.setEnabled(false);

                sDayBox3.setEnabled(false);
                sStartBox3.setEnabled(false);
                sEndBox3.setEnabled(false);

                sDayBox4.setEnabled(false);
                sStartBox4.setEnabled(false);
                sEndBox4.setEnabled(false);

                sDayBox5.setEnabled(false);
                sStartBox5.setEnabled(false);
                sEndBox5.setEnabled(false);

                sDayBox6.setEnabled(false);
                sStartBox6.setEnabled(false);
                sEndBox6.setEnabled(false);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox2.setSelectedIndex(0);
                sStartBox2.setSelectedIndex(0);
                sEndBox2.setSelectedIndex(0);

                sDayBox3.setSelectedIndex(0);
                sStartBox3.setSelectedIndex(0);
                sEndBox3.setSelectedIndex(0);

                sDayBox4.setSelectedIndex(0);
                sStartBox4.setSelectedIndex(0);
                sEndBox4.setSelectedIndex(0);

                sDayBox5.setSelectedIndex(0);
                sStartBox5.setSelectedIndex(0);
                sEndBox5.setSelectedIndex(0);

                sDayBox6.setSelectedIndex(0);
                sStartBox6.setSelectedIndex(0);
                sEndBox6.setSelectedIndex(0);

                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 2:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(true);
                sStartBox2.setEnabled(true);
                sEndBox2.setEnabled(true);

                sDayBox3.setEnabled(false);
                sStartBox3.setEnabled(false);
                sEndBox3.setEnabled(false);

                sDayBox4.setEnabled(false);
                sStartBox4.setEnabled(false);
                sEndBox4.setEnabled(false);

                sDayBox5.setEnabled(false);
                sStartBox5.setEnabled(false);
                sEndBox5.setEnabled(false);

                sDayBox6.setEnabled(false);
                sStartBox6.setEnabled(false);
                sEndBox6.setEnabled(false);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox3.setSelectedIndex(0);
                sStartBox3.setSelectedIndex(0);
                sEndBox3.setSelectedIndex(0);

                sDayBox4.setSelectedIndex(0);
                sStartBox4.setSelectedIndex(0);
                sEndBox4.setSelectedIndex(0);

                sDayBox5.setSelectedIndex(0);
                sStartBox5.setSelectedIndex(0);
                sEndBox5.setSelectedIndex(0);

                sDayBox6.setSelectedIndex(0);
                sStartBox6.setSelectedIndex(0);
                sEndBox6.setSelectedIndex(0);

                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 3:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(true);
                sStartBox2.setEnabled(true);
                sEndBox2.setEnabled(true);

                sDayBox3.setEnabled(true);
                sStartBox3.setEnabled(true);
                sEndBox3.setEnabled(true);

                sDayBox4.setEnabled(false);
                sStartBox4.setEnabled(false);
                sEndBox4.setEnabled(false);

                sDayBox5.setEnabled(false);
                sStartBox5.setEnabled(false);
                sEndBox5.setEnabled(false);

                sDayBox6.setEnabled(false);
                sStartBox6.setEnabled(false);
                sEndBox6.setEnabled(false);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox4.setSelectedIndex(0);
                sStartBox4.setSelectedIndex(0);
                sEndBox4.setSelectedIndex(0);

                sDayBox5.setSelectedIndex(0);
                sStartBox5.setSelectedIndex(0);
                sEndBox5.setSelectedIndex(0);

                sDayBox6.setSelectedIndex(0);
                sStartBox6.setSelectedIndex(0);
                sEndBox6.setSelectedIndex(0);

                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 4:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(true);
                sStartBox2.setEnabled(true);
                sEndBox2.setEnabled(true);

                sDayBox3.setEnabled(true);
                sStartBox3.setEnabled(true);
                sEndBox3.setEnabled(true);

                sDayBox4.setEnabled(true);
                sStartBox4.setEnabled(true);
                sEndBox4.setEnabled(true);

                sDayBox5.setEnabled(false);
                sStartBox5.setEnabled(false);
                sEndBox5.setEnabled(false);

                sDayBox6.setEnabled(false);
                sStartBox6.setEnabled(false);
                sEndBox6.setEnabled(false);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox5.setSelectedIndex(0);
                sStartBox5.setSelectedIndex(0);
                sEndBox5.setSelectedIndex(0);

                sDayBox6.setSelectedIndex(0);
                sStartBox6.setSelectedIndex(0);
                sEndBox6.setSelectedIndex(0);

                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 5:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(true);
                sStartBox2.setEnabled(true);
                sEndBox2.setEnabled(true);

                sDayBox3.setEnabled(true);
                sStartBox3.setEnabled(true);
                sEndBox3.setEnabled(true);

                sDayBox4.setEnabled(true);
                sStartBox4.setEnabled(true);
                sEndBox4.setEnabled(true);

                sDayBox5.setEnabled(true);
                sStartBox5.setEnabled(true);
                sEndBox5.setEnabled(true);

                sDayBox6.setEnabled(false);
                sStartBox6.setEnabled(false);
                sEndBox6.setEnabled(false);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox6.setSelectedIndex(0);
                sStartBox6.setSelectedIndex(0);
                sEndBox6.setSelectedIndex(0);

                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 6:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(true);
                sStartBox2.setEnabled(true);
                sEndBox2.setEnabled(true);

                sDayBox3.setEnabled(true);
                sStartBox3.setEnabled(true);
                sEndBox3.setEnabled(true);

                sDayBox4.setEnabled(true);
                sStartBox4.setEnabled(true);
                sEndBox4.setEnabled(true);

                sDayBox5.setEnabled(true);
                sStartBox5.setEnabled(true);
                sEndBox5.setEnabled(true);

                sDayBox6.setEnabled(true);
                sStartBox6.setEnabled(true);
                sEndBox6.setEnabled(true);

                sDayBox7.setEnabled(false);
                sStartBox7.setEnabled(false);
                sEndBox7.setEnabled(false);

                // reset the disabled comboBoxes
                sDayBox7.setSelectedIndex(0);
                sStartBox7.setSelectedIndex(0);
                sEndBox7.setSelectedIndex(0);

                break;

            case 7:

                // set the appropriate number of combo boxes
                sDayBox1.setEnabled(true);
                sStartBox1.setEnabled(true);
                sEndBox1.setEnabled(true);

                sDayBox2.setEnabled(true);
                sStartBox2.setEnabled(true);
                sEndBox2.setEnabled(true);

                sDayBox3.setEnabled(true);
                sStartBox3.setEnabled(true);
                sEndBox3.setEnabled(true);

                sDayBox4.setEnabled(true);
                sStartBox4.setEnabled(true);
                sEndBox4.setEnabled(true);

                sDayBox5.setEnabled(true);
                sStartBox5.setEnabled(true);
                sEndBox5.setEnabled(true);

                sDayBox6.setEnabled(true);
                sStartBox6.setEnabled(true);
                sEndBox6.setEnabled(true);

                sDayBox7.setEnabled(true);
                sStartBox7.setEnabled(true);
                sEndBox7.setEnabled(true);

                // no resetting the boxes here
                break;
        }
    }

    /**
     * aUpdateHostNumber()
     *
     * Helper function to update the number of ComboBoxes to enable based
     * on the spinner
     *
     * @param num
     */
    public void aUpdateHostNumber(int num) {
        switch (num) {
            case 0:
                aHost1.setEnabled(false);
                aHost2.setEnabled(false);
                aHost3.setEnabled(false);
                aHost4.setEnabled(false);
                aHost1.setSelectedIndex(aHost1.getItemCount()-1);
                aHost2.setSelectedIndex(aHost2.getItemCount()-1);
                aHost3.setSelectedIndex(aHost3.getItemCount()-1);
                aHost4.setSelectedIndex(aHost4.getItemCount()-1);
                break;
            case 1:
                aHost1.setEnabled(true);
                aHost2.setEnabled(false);
                aHost3.setEnabled(false);
                aHost4.setEnabled(false);
                aHost2.setSelectedIndex(aHost2.getItemCount()-1);
                aHost3.setSelectedIndex(aHost3.getItemCount()-1);
                aHost4.setSelectedIndex(aHost4.getItemCount()-1);
                break;
            case 2:
                aHost1.setEnabled(true);
                aHost2.setEnabled(true);
                aHost3.setEnabled(false);
                aHost4.setEnabled(false);
                aHost3.setSelectedIndex(aHost3.getItemCount()-1);
                aHost4.setSelectedIndex(aHost4.getItemCount()-1);
                break;
            case 3:
                aHost1.setEnabled(true);
                aHost2.setEnabled(true);
                aHost3.setEnabled(true);
                aHost4.setEnabled(false);
                aHost4.setSelectedIndex(aHost4.getItemCount()-1);
                break;
            case 4:
                aHost1.setEnabled(true);
                aHost2.setEnabled(true);
                aHost3.setEnabled(true);
                aHost4.setEnabled(true);
                break;
        }
    }

    /**
     * sUpdateHostNumber()
     *
     * Helper function to update the number of ComboBoxes to enable based
     * on the spinner
     *
     * @param num
     */
    public void sUpdateHostNumber(int num) {
        switch (num) {
            case 0:
                sHost1.setEnabled(false);
                sHost2.setEnabled(false);
                sHost3.setEnabled(false);
                sHost4.setEnabled(false);
                sHost1.setSelectedIndex(sHost1.getItemCount()-1);
                sHost2.setSelectedIndex(sHost2.getItemCount()-1);
                sHost3.setSelectedIndex(sHost3.getItemCount()-1);
                sHost4.setSelectedIndex(sHost4.getItemCount()-1);
                break;
            case 1:
                sHost1.setEnabled(true);
                sHost2.setEnabled(false);
                sHost3.setEnabled(false);
                sHost4.setEnabled(false);
                sHost2.setSelectedIndex(sHost2.getItemCount()-1);
                sHost3.setSelectedIndex(sHost3.getItemCount()-1);
                sHost4.setSelectedIndex(sHost4.getItemCount()-1);
                break;
            case 2:
                sHost1.setEnabled(true);
                sHost2.setEnabled(true);
                sHost3.setEnabled(false);
                sHost4.setEnabled(false);
                sHost3.setSelectedIndex(sHost3.getItemCount()-1);
                sHost4.setSelectedIndex(sHost4.getItemCount()-1);
                break;
            case 3:
                sHost1.setEnabled(true);
                sHost2.setEnabled(true);
                sHost3.setEnabled(true);
                sHost4.setEnabled(false);
                sHost4.setSelectedIndex(sHost4.getItemCount()-1);
                break;
            case 4:
                sHost1.setEnabled(true);
                sHost2.setEnabled(true);
                sHost3.setEnabled(true);
                sHost4.setEnabled(true);
                break;
        }
    }

    /**
     * getDayIndex()
     *
     * Helper function to set the index of the day combo boxes based on the
     * day parameter
     *
     * @param day
     * @return the index of the combo box
     */
    public int getDayIndex(Show.Day day) {
        if (null != day) {
            switch (day) {
                case SUN:
                    return 1;
                case MON:
                    return 2;
                case TUE:
                    return 3;
                case WED:
                    return 4;
                case THU:
                    return 5;
                case FRI:
                    return 6;
                case SAT:
                    return 7;
                default:
                    return -1;
            }
        }
        return -1;
    }

    /**
     * getTimeIndex()
     *
     * Helper function to set the index of the time combo boxes based on the
     * time parameter
     *
     * @param time
     * @return the index of the combo box
     */
    public int getTimeIndex(Show.Time time) {
        if (null != time) {
            switch (time) {
                case am0600:
                    return 1;
                case am0630:
                    return 2;
                case am0700:
                    return 3;
                case am0730:
                    return 4;
                case am0800:
                    return 5;
                case am0830:
                    return 6;
                case am0900:
                    return 7;
                case am0930:
                    return 8;
                case am1000:
                    return 9;
                case am1030:
                    return 10;
                case am1100:
                    return 11;
                case am1130:
                    return 12;
                case pm1200:
                    return 13;
                case pm1230:
                    return 14;
                case pm0100:
                    return 15;
                case pm0130:
                    return 16;
                case pm0200:
                    return 17;
                case pm0230:
                    return 18;
                case pm0300:
                    return 19;
                case pm0330:
                    return 20;
                case pm0400:
                    return 21;
                case pm0430:
                    return 22;
                case pm0500:
                    return 23;
                case pm0530:
                    return 24;
                case pm0600:
                    return 25;
                case pm0630:
                    return 26;
                case pm0700:
                    return 27;
                case pm0730:
                    return 28;
                case pm0800:
                    return 29;
                case pm0830:
                    return 30;
                case pm0900:
                    return 31;
                case pm0930:
                    return 32;
                case pm1000:
                    return 33;
                case pm1030:
                    return 34;
                case pm1100:
                    return 35;
                case pm1130:
                    return 36;
                case am1200:
                    return 37;
            }
        }
        return -1;
    }

    /**
     * setSearchFieldsEnabled()
     * 
     * Graphics updating
     * 
     * @param b 
     */
    public void setSearchFieldsEnabled(boolean b) {
        sNameField.setEnabled(b);
        sDescField.setEnabled(b);
        sShowNumSpinner.setEnabled(b);
        sHostNumSpinner.setEnabled(b);
        sUpdateShowNumber(0);
        sUpdateHostNumber(0);
    }

    /**
     * setAddValuesToNull()
     * 
     * Graphics updating
     */
    public void setAddValuesToNull() {
        aNameField.setText("");
        aDescField.setText("");
        aShowNumSpinner.setValue(0);
        aHostNumSpinner.setValue(0);
    }

    /**
     * setSearchFieldsToValid()
     * 
     * Graphics updating
     */
    public void setSearchFieldsToValid() {
        sNameField.setEnabled(true);
        sDescField.setEnabled(true);
        sNameField.setBackground(Color.white);
        sDescField.setBackground(Color.white);
    }

    /**
     * setSearchFieldsEditable()
     * 
     * Graphics updating
     * 
     * @param b 
     */
    public void setSearchFieldsEditable(boolean b) {
        sNameField.setEditable(b);
        sDescField.setEditable(b);

        sShowNumSpinner.setEnabled(b);
        sHostNumSpinner.setEnabled(b);

        if (b) {
            sUpdateShowNumber((Integer) sShowNumSpinner.getValue());
            sUpdateHostNumber((Integer) sHostNumSpinner.getValue());
        } else {
            sShowNumSpinner.setValue(0);
            sHostNumSpinner.setValue(0);
        }
    }

    /**
     * setSearchFieldsToValid()
     * 
     * Graphics updating
     */
    public void setSearchValuesToNull() {
        sNameField.setText("");
        sDescField.setText("");
        sUpdateShowNumber(0);
        sUpdateHostNumber(0);
    }

    /**
     * getShow()
     *
     * Takes the values in the search panel and returns a new show based
     * on those values
     *
     * @return the new show
     */
    public Show getShow() {
        String name = sNameField.getText();
        String desc = sDescField.getText();

        Profile[] p = new Profile[(Integer) sHostNumSpinner.getValue()];
        switch (p.length) {
            case 1:
                p[0] = ProfileController.SearchProfile(profiles.getElementAt(sHost1.getSelectedIndex()).id);
                break;
            case 2:
                p[0] = ProfileController.SearchProfile(profiles.getElementAt(sHost1.getSelectedIndex()).id);
                p[1] = ProfileController.SearchProfile(profiles.getElementAt(sHost2.getSelectedIndex()).id);
                break;
            case 3:
                p[0] = ProfileController.SearchProfile(profiles.getElementAt(sHost1.getSelectedIndex()).id);
                p[1] = ProfileController.SearchProfile(profiles.getElementAt(sHost2.getSelectedIndex()).id);
                p[2] = ProfileController.SearchProfile(profiles.getElementAt(sHost3.getSelectedIndex()).id);
                break;
            case 4:
                p[0] = ProfileController.SearchProfile(profiles.getElementAt(sHost1.getSelectedIndex()).id);
                p[1] = ProfileController.SearchProfile(profiles.getElementAt(sHost2.getSelectedIndex()).id);
                p[2] = ProfileController.SearchProfile(profiles.getElementAt(sHost3.getSelectedIndex()).id);
                p[3] = ProfileController.SearchProfile(profiles.getElementAt(sHost4.getSelectedIndex()).id);
                break;
            default:
                break;
        }

        Show.Day[] d = new Show.Day[(Integer) sShowNumSpinner.getValue()];
        Show.Time[] t = new Show.Time[(Integer) sShowNumSpinner.getValue() * 2];
        switch (d.length) {
            case 1:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                break;
            case 2:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                d[1] = getDay(sDayBox2.getSelectedIndex());
                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                t[2] = getTime(sStartBox2.getSelectedIndex());
                t[3] = getTime(sEndBox3.getSelectedIndex());
                break;
            case 3:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                d[1] = getDay(sDayBox2.getSelectedIndex());
                d[2] = getDay(sDayBox3.getSelectedIndex());

                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                t[2] = getTime(sStartBox2.getSelectedIndex());
                t[3] = getTime(sEndBox2.getSelectedIndex());
                t[4] = getTime(sStartBox3.getSelectedIndex());
                t[5] = getTime(sEndBox3.getSelectedIndex());
                break;
            case 4:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                d[1] = getDay(sDayBox2.getSelectedIndex());
                d[2] = getDay(sDayBox3.getSelectedIndex());
                d[3] = getDay(sDayBox4.getSelectedIndex());

                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                t[2] = getTime(sStartBox2.getSelectedIndex());
                t[3] = getTime(sEndBox2.getSelectedIndex());
                t[4] = getTime(sStartBox3.getSelectedIndex());
                t[5] = getTime(sEndBox3.getSelectedIndex());
                t[6] = getTime(sStartBox4.getSelectedIndex());
                t[7] = getTime(sEndBox4.getSelectedIndex());
                break;
            case 5:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                d[1] = getDay(sDayBox2.getSelectedIndex());
                d[2] = getDay(sDayBox3.getSelectedIndex());
                d[3] = getDay(sDayBox4.getSelectedIndex());
                d[4] = getDay(sDayBox5.getSelectedIndex());

                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                t[2] = getTime(sStartBox2.getSelectedIndex());
                t[3] = getTime(sEndBox2.getSelectedIndex());
                t[4] = getTime(sStartBox3.getSelectedIndex());
                t[5] = getTime(sEndBox3.getSelectedIndex());
                t[6] = getTime(sStartBox4.getSelectedIndex());
                t[7] = getTime(sEndBox4.getSelectedIndex());
                t[8] = getTime(sStartBox5.getSelectedIndex());
                t[9] = getTime(sEndBox5.getSelectedIndex());
                break;
            case 6:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                d[1] = getDay(sDayBox2.getSelectedIndex());
                d[2] = getDay(sDayBox3.getSelectedIndex());
                d[3] = getDay(sDayBox4.getSelectedIndex());
                d[4] = getDay(sDayBox5.getSelectedIndex());
                d[5] = getDay(sDayBox6.getSelectedIndex());

                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                t[2] = getTime(sStartBox2.getSelectedIndex());
                t[3] = getTime(sEndBox2.getSelectedIndex());
                t[4] = getTime(sStartBox3.getSelectedIndex());
                t[5] = getTime(sEndBox3.getSelectedIndex());
                t[6] = getTime(sStartBox4.getSelectedIndex());
                t[7] = getTime(sEndBox4.getSelectedIndex());
                t[8] = getTime(sStartBox5.getSelectedIndex());
                t[9] = getTime(sEndBox5.getSelectedIndex());
                t[10] = getTime(sStartBox6.getSelectedIndex());
                t[11] = getTime(sEndBox6.getSelectedIndex());
                break;
            case 7:
                d[0] = getDay(sDayBox1.getSelectedIndex());
                d[1] = getDay(sDayBox2.getSelectedIndex());
                d[2] = getDay(sDayBox3.getSelectedIndex());
                d[3] = getDay(sDayBox4.getSelectedIndex());
                d[4] = getDay(sDayBox5.getSelectedIndex());
                d[5] = getDay(sDayBox6.getSelectedIndex());
                d[6] = getDay(sDayBox7.getSelectedIndex());

                t[0] = getTime(sStartBox1.getSelectedIndex());
                t[1] = getTime(sEndBox1.getSelectedIndex());
                t[2] = getTime(sStartBox2.getSelectedIndex());
                t[3] = getTime(sEndBox2.getSelectedIndex());
                t[4] = getTime(sStartBox3.getSelectedIndex());
                t[5] = getTime(sEndBox3.getSelectedIndex());
                t[6] = getTime(sStartBox4.getSelectedIndex());
                t[7] = getTime(sEndBox4.getSelectedIndex());
                t[8] = getTime(sStartBox5.getSelectedIndex());
                t[9] = getTime(sEndBox5.getSelectedIndex());
                t[10] = getTime(sStartBox6.getSelectedIndex());
                t[11] = getTime(sEndBox6.getSelectedIndex());
                t[12] = getTime(sStartBox7.getSelectedIndex());
                t[13] = getTime(sEndBox7.getSelectedIndex());
                break;
            default:
                break;
        }

        return new Show(name, desc, p, d, t);
    }

    /**
     * main()
     * 
     * You already know what main does if you're reading this
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ShowGUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> aDayBox1;
    private javax.swing.JComboBox<String> aDayBox2;
    private javax.swing.JComboBox<String> aDayBox3;
    private javax.swing.JComboBox<String> aDayBox4;
    private javax.swing.JComboBox<String> aDayBox5;
    private javax.swing.JComboBox<String> aDayBox6;
    private javax.swing.JComboBox<String> aDayBox7;
    private javax.swing.JPanel aDayTimePanel;
    private javax.swing.JTextArea aDescField;
    private javax.swing.JComboBox<String> aEndBox1;
    private javax.swing.JComboBox<String> aEndBox2;
    private javax.swing.JComboBox<String> aEndBox3;
    private javax.swing.JComboBox<String> aEndBox4;
    private javax.swing.JComboBox<String> aEndBox5;
    private javax.swing.JComboBox<String> aEndBox6;
    private javax.swing.JComboBox<String> aEndBox7;
    private javax.swing.JComboBox<String> aHost1;
    private javax.swing.JComboBox<String> aHost2;
    private javax.swing.JComboBox<String> aHost3;
    private javax.swing.JComboBox<String> aHost4;
    private javax.swing.JSpinner aHostNumSpinner;
    private javax.swing.JPanel aHostPanel;
    private javax.swing.JTextField aNameField;
    private javax.swing.JTextField aSMField;
    private javax.swing.JScrollPane aSP;
    private javax.swing.JSpinner aShowNumSpinner;
    private javax.swing.JComboBox<String> aStartBox1;
    private javax.swing.JComboBox<String> aStartBox2;
    private javax.swing.JComboBox<String> aStartBox3;
    private javax.swing.JComboBox<String> aStartBox4;
    private javax.swing.JComboBox<String> aStartBox5;
    private javax.swing.JComboBox<String> aStartBox6;
    private javax.swing.JComboBox<String> aStartBox7;
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JLabel adminLabel;
    private javax.swing.JLabel al1;
    private javax.swing.JLabel al2;
    private javax.swing.JLabel al3;
    private javax.swing.JLabel al4;
    private javax.swing.JLabel al5;
    private javax.swing.JLabel al6;
    private javax.swing.JLabel al7;
    private javax.swing.JMenuItem bugItem;
    private javax.swing.JMenuItem closeItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel errLabel;
    private javax.swing.JMenuItem exitItem;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JMenuItem helpItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> list;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JMenuItem logoutItem;
    private javax.swing.JMenuBar menubar;
    private javax.swing.JComboBox<String> sDayBox1;
    private javax.swing.JComboBox<String> sDayBox2;
    private javax.swing.JComboBox<String> sDayBox3;
    private javax.swing.JComboBox<String> sDayBox4;
    private javax.swing.JComboBox<String> sDayBox5;
    private javax.swing.JComboBox<String> sDayBox6;
    private javax.swing.JComboBox<String> sDayBox7;
    private javax.swing.JPanel sDayTimePanel;
    private javax.swing.JTextArea sDescField;
    private javax.swing.JComboBox<String> sEndBox1;
    private javax.swing.JComboBox<String> sEndBox2;
    private javax.swing.JComboBox<String> sEndBox3;
    private javax.swing.JComboBox<String> sEndBox4;
    private javax.swing.JComboBox<String> sEndBox5;
    private javax.swing.JComboBox<String> sEndBox6;
    private javax.swing.JComboBox<String> sEndBox7;
    private javax.swing.JComboBox<String> sHost1;
    private javax.swing.JComboBox<String> sHost2;
    private javax.swing.JComboBox<String> sHost3;
    private javax.swing.JComboBox<String> sHost4;
    private javax.swing.JSpinner sHostNumSpinner;
    private javax.swing.JPanel sHostPanel;
    private javax.swing.JTextField sNameField;
    private javax.swing.JTextField sSMField;
    private javax.swing.JScrollPane sSP;
    private javax.swing.JSpinner sShowNumSpinner;
    private javax.swing.JComboBox<String> sStartBox1;
    private javax.swing.JComboBox<String> sStartBox2;
    private javax.swing.JComboBox<String> sStartBox3;
    private javax.swing.JComboBox<String> sStartBox4;
    private javax.swing.JComboBox<String> sStartBox5;
    private javax.swing.JComboBox<String> sStartBox6;
    private javax.swing.JComboBox<String> sStartBox7;
    private javax.swing.JScrollPane scrollpane;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel sl1;
    private javax.swing.JLabel sl2;
    private javax.swing.JLabel sl3;
    private javax.swing.JLabel sl4;
    private javax.swing.JLabel sl5;
    private javax.swing.JLabel sl6;
    private javax.swing.JLabel sl7;
    private javax.swing.JButton submitButton;
    private javax.swing.JMenuItem suggestionItem;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables
}
